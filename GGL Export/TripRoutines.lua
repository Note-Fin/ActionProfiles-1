TellMeWhenDB = {
	["Version"] = 90201,
	["profiles"] = {
		["[Trip] Shaman"] = {
			["CodeSnippets"] = {
				{
					["Name"] = "ProfileUI",
					["Code"] = "--############################\n--##### TRIP'S SHAMAN UI #####\n--############################\n\n--Full credit to Taste\n\n\nlocal TMW                                            = TMW \nlocal CNDT                                            = TMW.CNDT\nlocal Env                                            = CNDT.Env\nlocal A                                                = Action\nlocal GetToggle                                        = A.GetToggle\nlocal InterruptIsValid                                = A.InterruptIsValid\nlocal UnitCooldown                                    = A.UnitCooldown\nlocal Unit                                            = A.Unit \nlocal Player                                        = A.Player \nlocal Pet                                            = A.Pet\nlocal LoC                                            = A.LossOfControl\nlocal MultiUnits                                    = A.MultiUnits\nlocal EnemyTeam                                        = A.EnemyTeam\nlocal FriendlyTeam                                    = A.FriendlyTeam\nlocal TeamCache                                        = A.TeamCache\nlocal InstanceInfo                                    = A.InstanceInfo\nlocal TR                                            = Action.TasteRotation\nlocal select, setmetatable                            = select, setmetatable\n\n-- Shadowlands Spell Info fix for empty spells\nlocal GetSpellInfo_original                                = _G.GetSpellInfo\nlocal function GetSpellInfo(...)\n    return GetSpellInfo_original(...) or \"\"\nend\n\nA.Data.ProfileEnabled[Action.CurrentProfile] = true\nA.Data.ProfileUI = {    \n    DateTime = \"v1 (28 Oct 2020)\",\n    -- Class settings\n    [2] = {        \n        [ACTION_CONST_SHAMAN_ENCHANCEMENT] = {\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- General -- \",\n                    },\n                },\n            },        \n            { -- [1] 1st Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use @mouseover\", \n                        ruRU = \"Использовать @mouseover\", \n                        frFR = \"Utiliser les fonctions @mouseover\",\n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                        ruRU = \"Разблокирует использование действий для @mouseover юнитов\\nНапример: Воскрешение, Хилинг\", \n                        frFR = \"Activera les actions via @mouseover\\n Exemple: Ressusciter, Soigner\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use AoE\", \n                        ruRU = \"Использовать AoE\", \n                        frFR = \"Utiliser l'AoE\",\n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                        ruRU = \"Включает действия для нескольких целей\", \n                        frFR = \"Activer les actions multi-unités\",\n                    }, \n                    M = {\n                        Custom = \"/run Action.AoEToggleMode()\",\n                        -- It does call func CraftMacro(L[CL], macro above, 1) -- 1 means perCharacter tab in MacroUI, if nil then will be used allCharacters tab in MacroUI\n                        Value = value or nil, \n                        -- Very Very Optional, no idea why it will be need however.. \n                        TabN = '@number' or nil,                                \n                        Print = '@string' or nil,\n                    },\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },                    \n            },  \n            { -- [7] Spell Status Frame\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Spell Status Frame -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E         = \"Button\",\n                    H         = 35,\n                    OnClick = function(self, button, down)     \n                        if button == \"LeftButton\" then \n                            TR.ToggleStatusFrame() \n                        else                \n                            Action.CraftMacro(\"Status Frame\", [[/run Action.TasteRotation.ToggleStatusFrame()]], 1, true, true)   \n                        end \n                    end, \n                    L = { \n                        ANY = \"Status Frame\\nMacro Creator\",\n                    }, \n                    TT = { \n                        enUS = \"Click this button to create the special status frame macro.\\nStatus Frame is a new windows that allow user to track blocked spells during fight. So you don't have to check your chat anymore.\", \n                        ruRU = \"Нажмите эту кнопку, чтобы создать специальный макрос статуса.\\nStatus Frame - это новые окна, которые позволяют пользователю отслеживать заблокированные заклинания во время боя. Так что вам больше не нужно проверять свой чат.\",  \n                        frFR = \"Cliquez sur ce bouton pour créer la macro de cadre d'état spécial.\\nLe cadre d'état est une nouvelle fenêtre qui permet à l'utilisateur de suivre les sorts bloqués pendant le combat. Vous n'avez donc plus besoin de vérifier votre chat.\", \n                    },                           \n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"ChangelogOnStartup\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Changelog On Startup\", \n                        ruRU = \"Журнал изменений при запуске\", \n                        frFR = \"Journal des modifications au démarrage\",\n                    }, \n                    TT = { \n                        enUS = \"Will show latest changelog of the current rotation when you enter in game.\\nDisable this option to block the popup when you enter the game.\", \n                        ruRU = \"При входе в игру будет отображаться последний список изменений текущего вращения.\\nОтключить эту опцию, чтобы заблокировать всплывающее окно при входе в игру.\", \n                        frFR = \"Affiche le dernier journal des modifications de la rotation actuelle lorsque vous entrez dans le jeu.\\nDésactivez cette option pour bloquer la fenêtre contextuelle lorsque vous entrez dans le jeu..\", \n                    }, \n                    M = {},\n                }, \n            },    \n            { -- [4] 4th Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"EnableFS\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Show Feral Spirit in rotation\", \n                        ruRU = \"Show Feral Spirit in rotation\", \n                        frFR = \"Show Feral Spirit in rotation\",\n                    }, \n                    TT = { \n                        enUS = \"Uncheck this if you don't want to see Feral Spirit in the rotation.\", \n                        ruRU = \"Uncheck this if you don't want to see Feral Spirit in the rotation.\", \n                        frFR = \"Uncheck this if you don't want to see Feral Spirit in the rotation.\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseSyncCooldowns\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Cooldowns Synchronisation\", \n                        ruRU = \"Cooldowns Synchronisation\",\n                        frFR = \"Cooldowns Synchronisation\",\n                    }, \n                    TT = { \n                        enUS = \"Uncheck this if you don't want to synchronize all your cooldowns.\\nIf disabled, will use each cooldowns as soon as they are ready !\", \n                        ruRU = \"Uncheck this if you don't want to synchronize all your cooldowns.\\nIf disabled, will use each cooldowns as soon as they are ready !\", \n                        frFR = \"Uncheck this if you don't want to synchronize all your cooldowns.\\nIf disabled, will use each cooldowns as soon as they are ready !\", \n                    }, \n                    M = {},\n                },\n            },            \n            -- Buff refreshs\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Buffs Refresh -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"FlametongueRefresh\",\n                    Precision = 1,\n                    DBV = 4.5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(193796) .. \" refresh\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(193796) .. \" refresh value in seconds.\", \n                        ruRU = GetSpellInfo(193796) .. \" refresh value in seconds.\",\n                        frFR = GetSpellInfo(193796) .. \" refresh value in seconds.\",\n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"FrostbrandRefresh\",\n                    Precision = 1,\n                    DBV = 4.8, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(196834) .. \" refresh\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(196834) .. \" refresh value in seconds.\", \n                        ruRU = GetSpellInfo(196834) .. \" refresh value in seconds.\",\n                        frFR = GetSpellInfo(196834) .. \" refresh value in seconds.\",\n                    },                     \n                    M = {},\n                },\n            },\n            -- Feral lunge\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(196884) ..\" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"FeralLungeHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(196884) .. \"\\ntarget HP\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(196884) .. \" on low HP target depending of the value you set.\", \n                        ruRU = GetSpellInfo(196884) .. \" on low HP target depending of the value you set.\", \n                        frFR = GetSpellInfo(196884) .. \" on low HP target depending of the value you set.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 30,                            \n                    DB = \"FeralLungeRange\",\n                    DBV = 20, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(196884) .. \"\\nrange\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(196884) .. \" if target range is equal or greater than this value.\", \n                        ruRU = GetSpellInfo(196884) .. \" if target range is equal or greater than this value.\", \n                        frFR = GetSpellInfo(196884) .. \" if target range is equal or greater than this value.\", \n                    },                     \n                    M = {},\n                },\n            },    \n            { -- [7]  CrashLightning\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(187874) .. \" -- \",\n                    },\n                },\n            },\n            { -- [3] 3rd Row                 \n                \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 3, \n                    MAX = 10,                            \n                    DB = \"CrashLightningAreaTTD\",\n                    DBV = 5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(187874) .. \" TTD\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum Time To Die for all units around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Set the minimum Time To Die for all units around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\", \n                        frFR = \"Set the minimum Time To Die for all units around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\",  \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 10,                            \n                    DB = \"CrashLightningRange\",\n                    DBV = 8, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(187874) .. \" range\",\n                    },\n                    TT = { \n                        enUS = \"Set the maximum range to search for enemies around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Set the maximum range to search for enemies around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\", \n                        frFR = \"Set the maximum range to search for enemies around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"CrashLightningUnits\",\n                    DBV = 2, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(187874) .. \" units\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum number of units around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Set the minimum number of units around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\",\n                        frFR = \"Set the minimum number of units around before using \" .. GetSpellInfo(187874) .. \" \\nDoes not apply to Boss.\",\n                    },                     \n                    M = {},\n                },                 \n            },\n            -- Counterstrike Totem\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(204331) ..\" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 30,                            \n                    DB = \"CounterStrikeTotemTTD\",\n                    DBV = 5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(204331) .. \"\\nTTD\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(204331) .. \" if player is gonna die in the next X seconds.\", \n                        ruRU = GetSpellInfo(204331) .. \" if player is gonna die in the next X seconds.\",  \n                        frFR = GetSpellInfo(204331) .. \" if player is gonna die in the next X seconds.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"CounterStrikeTotemHPlosepersec\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(204331) .. \"\\n%HP loose per sec\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(204331) .. \" if player is taking damage and HP lost per seconds >= value.\", \n                        ruRU = GetSpellInfo(204331) .. \" if player is taking damage and HP lost per seconds >= value.\", \n                        frFR = GetSpellInfo(204331) .. \" if player is taking damage and HP lost per seconds >= value.\", \n                    },                     \n                    M = {},\n                },\n            },\n            -- Skyfury Totem\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(204330) ..\" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"SkyfuryTotemHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(204330) .. \"\\ntarget HP\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(204330) .. \" on low HP target depending of the value you set.\", \n                        ruRU = GetSpellInfo(204330) .. \" on low HP target depending of the value you set.\", \n                        frFR = GetSpellInfo(204330) .. \" on low HP target depending of the value you set.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 30,                            \n                    DB = \"SkyfuryTotemTTD\",\n                    DBV = 5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(204330) .. \"\\nTTD\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(204330) .. \" if target time to die is inferior to this value.\", \n                        ruRU = GetSpellInfo(204330) .. \" if target time to die is inferior to this value.\", \n                        frFR = GetSpellInfo(204330) .. \" if target time to die is inferior to this value.\", \n                    },                     \n                    M = {},\n                },\n            },                \n            -- Totem Mastery\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(262395) .. \" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseTotemMastery\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto \" .. GetSpellInfo(262395), \n                        ruRU = \"Авто \" .. GetSpellInfo(262395), \n                        frFR = \"Auto \" .. GetSpellInfo(262395), \n                    }, \n                    TT = { \n                        enUS = \"Automatically use \" .. GetSpellInfo(262395) .. \" if talent learned.\", \n                        ruRU = \"Automatically use \" .. GetSpellInfo(262395) .. \" if talent learned.\",  \n                        frFR = \"Automatically use \" .. GetSpellInfo(262395) .. \" if talent learned.\",   \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"TotemMasteryRefresh\",\n                    DBV = 5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(262395) .. \" refresh\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(262395) .. \" refresh value in seconds.\", \n                        ruRU = GetSpellInfo(262395) .. \" refresh value in seconds.\",\n                        frFR = GetSpellInfo(262395) .. \" refresh value in seconds.\",\n                    },                     \n                    M = {},\n                },\n            },\n            { -- [7]  Azerite Beam settings\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(295258) .. \" -- \",\n                    },\n                },\n            },\n            { -- [3] 3rd Row                 \n                \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 3, \n                    MAX = 50,                            \n                    DB = \"FocusedAzeriteBeamTTD\",\n                    DBV = 10, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(295258) .. \" TTD\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum Time To Die for a unit before using \" .. GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Установите минимальное время смерти для отряда перед использованием \" .. GetSpellInfo(295258) .. \" \\nНе применимо к боссу.\", \n                        frFR = \"Définissez le temps minimum pour mourir pour une unité avant d'utiliser \" .. GetSpellInfo(295258) .. \" \\nNe s'applique pas aux boss.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"FocusedAzeriteBeamUnits\",\n                    DBV = 3, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(295258) .. \" units\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum number of units around before using \" .. GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Set the minimum number of units around before using \" .. GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\",\n                        frFR = \"Set the minimum number of units around before using \" .. GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\",\n                    },                     \n                    M = {},\n                },                 \n            },\n            { -- [7] UnbridledFury \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(300714) .. \" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryAuto\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Burst Potion\", \n                        ruRU = \"Burst Potion\",\n                        frFR = \"Burst Potion\",\n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots depending of the settings of this section\", \n                        ruRU = \"If activated, will auto re pots depending of the settings of this section\", \n                        frFR = \"If activated, will auto re pots depending of the settings of this section\", \n                    }, \n                    M = {},\n                }, \n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryWithExecute\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Sync execute phase\", \n                        ruRU = \"Sync execute phase\",\n                        frFR = \"Sync execute phase\",   \n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                        ruRU = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                        frFR = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                    }, \n                    M = {},\n                }, \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 40,                          \n                    DB = \"UnbridledFuryTTD\",\n                    DBV = 40, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(300714) .. \" TTD\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum Time To Die for a unit before using \" .. GetSpellInfo(300714) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Установите минимальное время смерти для отряда перед использованием \" .. GetSpellInfo(300714) .. \" \\nНе применимо к боссу.\", \n                        frFR = \"Définissez le temps minimum pour mourir pour une unité avant d'utiliser \" .. GetSpellInfo(300714) .. \" \\nNe s'applique pas aux boss.\", \n                    },                     \n                    M = {},\n                },                \n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryWithBloodlust\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Sync Bloodlust\", \n                        ruRU = \"Sync Bloodlust\", \n                        frFR = \"Sync Bloodlust\",  \n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots as soon as Bloodlust is detected.\", \n                        ruRU = \"If activated, will auto re pots as soon as Bloodlust is detected.\",\n                        frFR = \"If activated, will auto re pots as soon as Bloodlust is detected.\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryWithSecondAscendance\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Sync Ascendance\", \n                        ruRU = \"Sync Ascendance\", \n                        frFR = \"Sync Ascendance\",  \n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots as soon as Ascendance is detected.\\nOnly work if Ascendance talent is learned.\", \n                        ruRU = \"If activated, will auto re pots as soon as Ascendance is detected.\\nOnly work if Ascendance talent is learned.\", \n                        frFR = \"If activated, will auto re pots as soon as Ascendance is detected.\\nOnly work if Ascendance talent is learned.\", \n                    }, \n                    M = {},\n                },                 \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                          \n                    DB = \"UnbridledFuryHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(300714) .. \" HP\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum health percent for a unit before using \" .. GetSpellInfo(300714) .. \".\", \n                        ruRU = \"Set the minimum health percent for a unit before using \" .. GetSpellInfo(300714) .. \".\",  \n                        frFR = \"Set the minimum health percent for a unit before using \" .. GetSpellInfo(300714) .. \".\", \n                    },                     \n                    M = {},\n                },\n            },    \n            -- EarthElemental\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(198103) ..\" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"EarthElementalUnits\",\n                    DBV = 5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(198103) .. \" units\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(198103) .. \" if at least X units around and player is in trouble.\\nThis settings is linked to Earth Elemental range.\",  \n                        ruRU = GetSpellInfo(198103) .. \" if at least X units around and player is in trouble.\\nThis settings is linked to Earth Elemental range.\", \n                        frFR = GetSpellInfo(198103) .. \" if at least X units around and player is in trouble.\\nThis settings is linked to Earth Elemental range.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 30,                            \n                    DB = \"EarthElementalRange\",\n                    DBV = 8, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(198103) .. \" range\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(198103) .. \" depending of current number of enemies in range value.\\nThis settings is linked to Earth Elemental units.\", \n                        ruRU = GetSpellInfo(198103) .. \" depending of current number of enemies in range value.\\nThis settings is linked to Earth Elemental units.\", \n                        frFR = GetSpellInfo(198103) .. \" depending of current number of enemies in range value.\\nThis settings is linked to Earth Elemental units.\",  \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"EarthElementalHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(198103) .. \"\\n %HP lost per sec\",\n                    },\n                    TT = { \n                        enUS = GetSpellInfo(198103) .. \" if player is taking damage and HP lost per seconds >= value.\", \n                        ruRU = GetSpellInfo(198103) .. \" if player is taking damage and HP lost per seconds >= value.\", \n                        frFR = GetSpellInfo(198103) .. \" if player is taking damage and HP lost per seconds >= value.\", \n                    },                     \n                    M = {},\n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Trinkets -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"TrinketsAoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Trinkets\\nAoE only\", \n                        ruRU = \"Trinkets\\nAoE only\",  \n                        frFR = \"Trinkets\\nAoE only\",  \n                    }, \n                    TT = { \n                        enUS = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                        ruRU = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                        frFR = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"TrinketOnlyBurst\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Trinkets\\nBurst only\", \n                        ruRU = \"Trinkets\\nBurst only\", \n                        frFR = \"Trinkets\\nBurst only\", \n                    }, \n                    TT = { \n                        enUS = \"Enable this to option to trinkets with Burst usage ONLY.\", \n                        ruRU = \"Enable this to option to trinkets with Burst usage ONLY.\", \n                        frFR = \"Enable this to option to trinkets with Burst usage ONLY.\",  \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 30,                            \n                    DB = \"TrinketsMinTTD\",\n                    DBV = 10, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Min TTD\",\n                    },\n                    TT = { \n                        enUS = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                        ruRU = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                        frFR = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                    },                    \n                    M = {},\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 2, \n                    MAX = 10,                            \n                    DB = \"TrinketsMinUnits\",\n                    DBV = 20, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Min Units\",\n                    },\n                    TT = { \n                        enUS = \"Minimum number of units in range to activate Trinkets.\", \n                        ruRU = \"Minimum number of units in range to activate Trinkets.\", \n                        frFR = \"Minimum number of units in range to activate Trinkets.\",  \n                    },                    \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 40,                            \n                    DB = \"TrinketsUnitsRange\",\n                    DBV = 20, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Max AoE range\",\n                    },\n                    TT = { \n                        enUS = \"Maximum range for units detection to automatically activate trinkets.\", \n                        ruRU = \"Maximum range for units detection to automatically activate trinkets.\", \n                        frFR = \"Maximum range for units detection to automatically activate trinkets.\",  \n                    },                    \n                    M = {},\n                },\n            },\n            \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Dummy DPS Test -- \",\n                    },\n                },\n            },\n            { -- [3] 3rd Row                     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 10,                            \n                    DB = \"DummyTime\",\n                    DBV = 5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"DPS Testing Time\",\n                    },\n                    TT = { \n                        enUS = \"Set the desired time for test in minutes.\\nWill show a notification icon when time is expired.\\nMin: 1 / Max: 10.\", \n                        ruRU = \"Установите желаемое время для теста в минутах.\\nПо истечении времени будет отображаться значок уведомления.\\nMin: 1 / Max: 10.\",  \n                        frFR = \"Définissez la durée souhaitée pour le test en minutes.\\nAffiche une icône de notification lorsque le temps est écoulé.\\nMin: 1 / Max: 10.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 15,                            \n                    DB = \"DummyStopDelay\",\n                    DBV = 10, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Stop Delay\",\n                    },\n                    TT = { \n                        enUS = \"After the dummy test is concluded, how much time should we stop the rotation. (In seconds)\\nThis value is mainly used as a protection when you are out of combat to avoid auto attack.\\nDefault value : 10 seconds.\", \n                        ruRU = \"После того, как фиктивный тест закончен, сколько времени мы должны остановить вращение. (В секундах)\\nЭто значение в основном используется в качестве защиты, когда вы находитесь вне боя, чтобы избежать автоматической атаки.\\nЗначение по умолчанию: 10 секунд.\", \n                        frFR = \"Une fois le test fictif terminé, combien de temps devons-nous arrêter la rotation. (En secondes)\\nCette valeur est principalement utilisée comme protection lorsque vous êtes hors de combat pour éviter l'attaque automatique.\\nValeur par défaut: 10 secondes.\", \n                    },                     \n                    M = {},\n                },\n            },            \n            { -- [4] 4th Row\n                \n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },\n            { -- [6]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Party -- \",\n                    },\n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@party1\", value = 1 },\n                        { text = \"@party2\", value = 2 },\n                    },\n                    MULT = true,\n                    DB = \"PartyUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                    }, \n                    L = { \n                        ANY = \"Party Units\",\n                    }, \n                    TT = { \n                        enUS = \"Enable/Disable relative party passive rotation\\nExample : Pet Dispell over party members.\", \n                        ruRU = \"Включить/Выключить относительно группы пассивную ротацию\\nExample : Pet Dispell over party members.\", \n                        frFR = \"Active/Désactive la rotation spécifique aux alliés pour les personnes dans le groupe.\\nExemple : Dispell automatique sur les membres du groupe.\",\n                    }, \n                    M = {},\n                },            \n            },             \n            { -- [4] 4th Row\n                \n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },            \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Overlay -- \",\n                    },\n                },\n            },\n            { -- [2] 2nd Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseAnnouncer\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Smart Announcer\", \n                        ruRU = \"Use Smart Announcer\",  \n                        frFR = \"Use Smart Announcer\", \n                    }, \n                    TT = { \n                        enUS = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        ruRU = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        frFR = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AnnouncerInCombatOnly\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Only use in combat\", \n                        ruRU = \"Only use in combat\", \n                        frFR = \"Only use in combat\",\n                    }, \n                    TT = { \n                        enUS = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work with precombat actions if available.\\nFor example : Sap out of combat, pre potion.\", \n                        ruRU = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",\n                        frFR = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",  \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AnnouncerDelay\",\n                    DBV = 2, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Alerts delay (sec)\",\n                    },\n                    TT = { \n                        enUS = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        ruRU = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        frFR = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                    },                     \n                    M = {},\n                },                \n            },    \n            { -- [4] 4th Row\n                \n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Miscellaneous -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseGhostWolf\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\" .. GetSpellInfo(2645), \n                        ruRU = \"Авто\" .. GetSpellInfo(2645), \n                        frFR = \"Auto\" .. GetSpellInfo(2645), \n                    }, \n                    TT = { \n                        enUS = \"Automatically use \" .. GetSpellInfo(2645), \n                        ruRU = \"Автоматически использовать \" .. GetSpellInfo(2645), \n                        frFR = \"Utiliser automatiquement \" .. GetSpellInfo(2645), \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 7,                            \n                    DB = \"GhostWolfTime\",\n                    DBV = 3, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(2645) .. \" if moving for\",\n                    }, \n                    TT = { \n                        enUS = \"If \" .. GetSpellInfo(2645) .. \" is talented and ready, will use it if moving for set value.\", \n                        ruRU = \"Если \" .. GetSpellInfo(2645) .. \" изучен и готов, будет использовать его при переходе на заданное значение.\", \n                        frFR = \"Si \" .. GetSpellInfo(2645) .. \" est prêt, l'utilisera s'il se déplace pour la valeur définie.\", \n                    }, \n                    M = {},\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"FeralLungeHP\",\n                    DBV = 60, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(196884) .. \" enemy HP\",\n                    }, \n                    TT = { \n                        enUS = \"If \" .. GetSpellInfo(196884) .. \" is talented and ready, will use it if enemy try to move out and got HP value <= this setting.\", \n                        ruRU = \"Если \" .. GetSpellInfo(196884) .. \" талантлив и готов, будет использовать его, если враг попытается выйти и получить значение HP <= этот параметр.\", \n                        frFR = \"Si \" .. GetSpellInfo(196884) .. \" est appris et prêt, l'utilisera si l'ennemi essaie de s'enfuir et a une valeur HP <= ce paramètre.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseCapacitorTotem\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Capacitor Totem\", \n                        ruRU = \"Use Capacitor Totem\", \n                        frFR = \"Use Capacitor Totem\", \n                    }, \n                    TT = { \n                        enUS = \"Will force use of Capacitor Totem if Wind Shear is not ready.\", \n                        ruRU = \"Will force use of Capacitor Totem if Wind Shear is not ready.\",\n                        frFR = \"Will force use of Capacitor Totem if Wind Shear is not ready.\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Defensives -- \",\n                    },\n                },\n            },            \n            { -- [3] 3rd Row \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"AstralShiftHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(108271) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"EarthShieldHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(974) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"HealingSurgeHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(8004) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"AbyssalHealingPotionHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(301308) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- PvP -- \",\n                    },\n                },\n            },\n            { -- [5] 5th Row     \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"ON MELEE BURST\", value = \"ON MELEE BURST\" },\n                        { text = \"ON COOLDOWN\", value = \"ON COOLDOWN\" },                    \n                        { text = \"OFF\", value = \"OFF\" },\n                    },\n                    DB = \"HexPvP\",\n                    DBV = \"ON MELEE BURST\",\n                    L = { \n                        ANY = \"PvP \" .. GetSpellInfo(51514),\n                    }, \n                    TT = { \n                        enUS = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Only if melee player has damage buffs\\nON COOLDOWN - means will use always on melee players\\nOFF - Cut out from rotation but still allow work through Queue and MSG systems\\nIf you want fully turn it OFF then you should make SetBlocker in 'Actions' tab\", \n                        ruRU = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Только если игрок ближнего боя имеет бафы на урон\\nON COOLDOWN - значит будет использовано по игрокам ближнего боя по восстановлению способности\\nOFF - Выключает из ротации, но при этом позволяет Очередь и MSG системам работать\\nЕсли нужно полностью выключить, тогда установите блокировку во вкладке 'Действия'\", \n                        frFR = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Seulement si le joueur de mêlée a des buffs de dégâts\\nON COOLDOWN - les moyens seront toujours utilisés sur les joueurs de mêlée\\nOFF - Coupé de la rotation mais autorisant toujours le travail dans la file d'attente et Systèmes MSG\\nSi vous souhaitez l'éteindre complètement, vous devez définir SetBlocker dans l'onglet 'Actions'\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@arena1\", value = 1 },\n                        { text = \"@arena2\", value = 2 },\n                        { text = \"@arena3\", value = 3 },\n                        { text = \"primary\", value = 4 },\n                    },\n                    MULT = true,\n                    DB = \"HexPvPUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                        [3] = true,\n                        [4] = true,\n                    }, \n                    L = { \n                        ANY = \"PvP \" .. GetSpellInfo(51514) .. \" units\",\n                    }, \n                    TT = { \n                        enUS = \"primary - is @target, @mouseover, @targettarget (these units are depend on toggles above)\", \n                        ruRU = \"primary - это @target, @mouseover, @targettarget (эти юниты зависят от чекбоксов наверху)\", \n                    }, \n                    M = {},\n                },\n            },\n        },\n        [ACTION_CONST_SHAMAN_ELEMENTAL] = {\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- General -- \",\n                    },\n                },\n            },        \n            { -- [1] 1st Row\n                \n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use @mouseover\", \n                        ruRU = \"Использовать @mouseover\", \n                        frFR = \"Utiliser les fonctions @mouseover\",\n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                        ruRU = \"Разблокирует использование действий для @mouseover юнитов\\nНапример: Воскрешение, Хилинг\", \n                        frFR = \"Activera les actions via @mouseover\\n Exemple: Ressusciter, Soigner\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use AoE\", \n                        ruRU = \"Использовать AoE\", \n                        frFR = \"Utiliser l'AoE\",\n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                        ruRU = \"Включает действия для нескольких целей\", \n                        frFR = \"Activer les actions multi-unités\",\n                    }, \n                    M = {\n                        Custom = \"/run Action.AoEToggleMode()\",\n                        -- It does call func CraftMacro(L[CL], macro above, 1) -- 1 means perCharacter tab in MacroUI, if nil then will be used allCharacters tab in MacroUI\n                        Value = value or nil, \n                        -- Very Very Optional, no idea why it will be need however.. \n                        TabN = '@number' or nil,                                \n                        Print = '@string' or nil,\n                    },\n                },  \n                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },                    \n            }, \n            { -- [7] Spell Status Frame\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Spell Status Frame -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E         = \"Button\",\n                    H         = 35,\n                    OnClick = function(self, button, down)     \n                        if button == \"LeftButton\" then \n                            TR.ToggleStatusFrame() \n                        else                \n                            Action.CraftMacro(\"Status Frame\", [[/run Action.TasteRotation.ToggleStatusFrame()]], 1, true, true)   \n                        end \n                    end, \n                    L = { \n                        ANY = \"Status Frame\\nMacro Creator\",\n                    }, \n                    TT = { \n                        enUS = \"Click this button to create the special status frame macro.\\nStatus Frame is a new windows that allow user to track blocked spells during fight. So you don't have to check your chat anymore.\", \n                        ruRU = \"Нажмите эту кнопку, чтобы создать специальный макрос статуса.\\nStatus Frame - это новые окна, которые позволяют пользователю отслеживать заблокированные заклинания во время боя. Так что вам больше не нужно проверять свой чат.\",  \n                        frFR = \"Cliquez sur ce bouton pour créer la macro de cadre d'état spécial.\\nLe cadre d'état est une nouvelle fenêtre qui permet à l'utilisateur de suivre les sorts bloqués pendant le combat. Vous n'avez donc plus besoin de vérifier votre chat.\", \n                    },                           \n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"ChangelogOnStartup\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Changelog On Startup\", \n                        ruRU = \"Журнал изменений при запуске\", \n                        frFR = \"Journal des modifications au démarrage\",\n                    }, \n                    TT = { \n                        enUS = \"Will show latest changelog of the current rotation when you enter in game.\\nDisable this option to block the popup when you enter the game.\", \n                        ruRU = \"При входе в игру будет отображаться последний список изменений текущего вращения.\\nОтключить эту опцию, чтобы заблокировать всплывающее окно при входе в игру.\", \n                        frFR = \"Affiche le dernier journal des modifications de la rotation actuelle lorsque vous entrez dans le jeu.\\nDésactivez cette option pour bloquer la fenêtre contextuelle lorsque vous entrez dans le jeu..\", \n                    }, \n                    M = {},\n                }, \n            },                \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Trinkets -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"TrinketsAoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Trinkets\\nAoE only\", \n                        ruRU = \"Trinkets\\nAoE only\",  \n                        frFR = \"Trinkets\\nAoE only\",  \n                    }, \n                    TT = { \n                        enUS = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                        ruRU = \"Включите эту опцию для Брелков ТОЛЬКО для использования AoE.\", \n                        frFR = \"Activez cette option pour les trinkets pour une utilisation AoE UNIQUEMENT.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 15,                            \n                    DB = \"TrinketsMinTTD\",\n                    DBV = 5, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Min TTD\",\n                    },\n                    TT = { \n                        enUS = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                        ruRU = \"Минимальное время до смерти для юнитов в радиусе действия до использования Брелков.\\nПРИМЕЧАНИЕ. При этом будет рассчитано время до смерти текущей цели ИЛИ время до смерти в случае обнаружения нескольких единиц.\", \n                        frFR = \"Temps minimum pour mourir pour les unités à portée avant d'utiliser des Trinkets.\\nREMARQUE: Cela calculera le temps de mourir de votre cible actuelle OU le temps de mourir de la zone si plusieurs unités sont détectées.\", \n                    },                    \n                    M = {},\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 2, \n                    MAX = 10,                            \n                    DB = \"TrinketsMinUnits\",\n                    DBV = 2, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Min Units\",\n                    },\n                    TT = { \n                        enUS = \"Minimum number of units in range to activate Trinkets.\", \n                        ruRU = \"Минимальное количество юнитов в радиусе действия для активации Брелков.\", \n                        frFR = \"Nombre minimum d'unités à portée pour activer les Trinkets.\",  \n                    },                    \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 40,                            \n                    DB = \"TrinketsUnitsRange\",\n                    DBV = 30, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Max AoE range\",\n                    },\n                    TT = { \n                        enUS = \"Maximum range for units detection to automatically activate trinkets.\", \n                        ruRU = \"Максимальная дальность обнаружения юнитов для автоматической активации безделушек.\", \n                        frFR = \"Portée maximale de détection des unités pour activer automatiquement les trinkets.\",  \n                    },                    \n                    M = {},\n                },\n            },\n            { -- [5] 5th Row     \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"Burst Only\", value = 1 },\n                        { text = \"Aoe Only\", value = 2 },\n                        { text = \"Everytime\", value = 3 },\n                    },\n                    MULT = true,\n                    DB = \"StormkeeperMode\",\n                    DBV = {\n                        [1] = true, \n                        [2] = false,\n                        [3] = false,\n                    }, \n                    L = { \n                        ANY = GetSpellInfo(191634) .. \" settings\",\n                    }, \n                    TT = { \n                        enUS = \"Customize your Stormkeeper options. Multiple checks possible.\", \n                        ruRU = \"Customize your Stormkeeper options. Multiple checks possible.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"FlameShockTTD\",\n                    DBV = 100, \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(188389) .. \" min TTD\",\n                    }, \n                    TT = { \n                        enUS = \"Customize minimum target health percent to use Flame Shock\", \n                        ruRU = \"Customize minimum target health percent to use Flame Shock\", \n                    }, \n                    M = {},\n                },\n            },\n            \n            { -- [4] 4th Row\n                \n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },\n            { -- [7] Multidots settings\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Multidots settings -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"AutoDot\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Enable auto Multidots\", \n                        ruRU = \"Использовать auto Multidots\", \n                        frFR = \"Activer le Multidots auto\", \n                    }, \n                    TT = { \n                        enUS = \"Automatically multidots units.\\nMake sure to stay front of the enemies nameplate you want the bot to target.\\nMake sure you correctly keybinded the TargetEnemy key in both game and GG.\",\n                        ruRU = \"Автоматически многоточечные юниты.\\nУбедитесь, что вы находитесь перед именной табличкой врагов, на которую должен нацелиться бот. \\nУбедитесь, что вы правильно связали клавишу TargetEnemy в игре и в GG.\",\n                        frFR = \"Multidot automatique des unités.\\nAssurez-vous de rester en face du nameplate de l'ennemi que le bot doit cibler. \\nAssurez-vous que la touche TargetEnemy a été correctement indexée dans le jeu et dans GG.\",\n                    }, \n                    M = {},\n                },\n                {\n                    E         = \"Slider\",                                                     \n                    MIN     = 1, \n                    MAX     = 40,                            \n                    DB         = \"MultiDotDistance\",\n                    DBV     = 25,\n                    ONLYOFF = true,\n                    L         = { \n                        enUS = \"Multidots Range\", \n                        ruRU = \"Сфера Multidots\", \n                        frFR = \"Portée du Multidots\", \n                    }, \n                    TT        = { \n                        enUS = \"Choose the range where you want to automatically multidots units.\", \n                        ruRU = \"Выберите диапазон, в котором вы хотите автоматически многоточечные единицы.\", \n                        frFR = \"Choisissez la portée dans laquelle vous souhaitez multidoter automatiquement les unités.\", \n                    },\n                    M         = {},\n                },\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"In Raid\", value = \"In Raid\" },\n                        { text = \"In Dungeon\", value = \"In Dungeon\" },\n                        { text = \"In PvP\", value = \"In PvP\" },\n                        { text = \"Everywhere\", value = \"Everywhere\" },\n                    },\n                    MULT = false,\n                    DB = \"AutoDotSelection\",\n                    DBV = \"In Raid\", \n                    L = { \n                        enUS = \"Multidots where\", \n                        ruRU = \"Multidots где\", \n                        frFR = \"Multidots où\", \n                    }, \n                    TT = { \n                        enUS = \"Choose where you want to automatically multidots units.\", \n                        ruRU = \"Выберите, где вы хотите автоматически многоточечные единицы.\", \n                        frFR = \"Choisissez l'endroit où vous souhaitez multidoter automatiquement les unités.\",\n                    }, \n                    M = {},\n                },                \n            },\n            { -- [4] 4th Row\n                \n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },            \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Overlay -- \",\n                    },\n                },\n            },\n            { -- [2] 2nd Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseAnnouncer\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Smart Announcer\", \n                        ruRU = \"Use Smart Announcer\",  \n                        frFR = \"Use Smart Announcer\", \n                    }, \n                    TT = { \n                        enUS = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        ruRU = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        frFR = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AnnouncerInCombatOnly\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Only use in combat\", \n                        ruRU = \"Only use in combat\", \n                        frFR = \"Only use in combat\",\n                    }, \n                    TT = { \n                        enUS = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work with precombat actions if available.\\nFor example : Sap out of combat, pre potion.\", \n                        ruRU = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",\n                        frFR = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",  \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AnnouncerDelay\",\n                    DBV = 2, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Alerts delay (sec)\",\n                    },\n                    TT = { \n                        enUS = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        ruRU = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        frFR = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                    },                     \n                    M = {},\n                },                \n            },    \n            { -- [4] 4th Row\n                \n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Miscellaneous -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"ForceAoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Force AoE opener\", \n                        ruRU = \"Force AoE opener\", \n                        frFR = \"Force AoE opener\", \n                    }, \n                    TT = { \n                        enUS = \"If activated, opener will use Chain Lightning instead of Lava Burst.\\nUsefull if you got issue with AoE detection on opener.\", \n                        ruRU = \"If activated, opener will use Chain Lightning instead of Lava Burst.\\nUsefull if you got issue with AoE detection on opener.\",\n                        frFR = \"If activated, opener will use Chain Lightning instead of Lava Burst.\\nUsefull if you got issue with AoE detection on opener.\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseGhostWolf\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Ghost Wolf\", \n                        ruRU = \"Use Ghost Wolf\", \n                        frFR = \"Use Ghost Wolf\",\n                    }, \n                    TT = { \n                        enUS = \"Automatically use Ghost Wolf if out of range and in combat.\", \n                        ruRU = \"Automatically use Ghost Wolf if out of range and in combat.\", \n                        frFR = \"Automatically use Ghost Wolf if out of range and in combat.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseCapacitorTotem\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Capacitor Totem\", \n                        ruRU = \"Use Capacitor Totem\", \n                        frFR = \"Use Capacitor Totem\", \n                    }, \n                    TT = { \n                        enUS = \"Will force use of Capacitor Totem if Wind Shear is not ready.\", \n                        ruRU = \"Will force use of Capacitor Totem if Wind Shear is not ready.\",\n                        frFR = \"Will force use of Capacitor Totem if Wind Shear is not ready.\",\n                    }, \n                    M = {},\n                },\n            },\n            \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Defensives -- \",\n                    },\n                },\n            },            \n            { -- [3] 3rd Row \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"AstralShiftHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(108271) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"EarthShieldHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(974) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"HealingSurgeHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(8004) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"AbyssalHealingPotionHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(301308) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseEarthElemental\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Defensive Earth Elemental\", \n                        ruRU = \"Defensive Earth Elemental\", \n                        frFR = \"Defensive Earth Elemental\", \n                    }, \n                    TT = { \n                        enUS = \"Will use Earth Elemental defensively depending on your settings.\", \n                        ruRU = \"Will use Earth Elemental defensively depending on your settings.\", \n                        frFR = \"Will use Earth Elemental defensively depending on your settings.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"EarthElementalHP\",\n                    DBV = 40, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Health\",\n                    },\n                    TT = { \n                        enUS = \"Current player health percentage to use Earth Elemental.\", \n                        ruRU = \"Current player health percentage to use Earth Elemental.\", \n                        frFR = \"Current player health percentage to use Earth Elemental.\",\n                    },                    \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 15,                            \n                    DB = \"EarthElementalEnemies\",\n                    DBV = 3, \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Enemies\",\n                    }, \n                    TT = { \n                        enUS = \"Number of enemies around to use Earth Elemental.\", \n                        ruRU = \"Number of enemies around to use Earth Elemental.\", \n                        frFR = \"Number of enemies around to use Earth Elemental.\",\n                    },\n                    M = {},\n                },\n            },\n            { -- [4] 4th Row\n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Ancestral Guidance -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"In Raid\", value = \"In Raid\" },\n                        { text = \"In Dungeon\", value = \"In Dungeon\" },\n                        { text = \"In PvP\", value = \"In PvP\" },\n                        { text = \"Everywhere\", value = \"Everywhere\" },\n                    },\n                    MULT = false,\n                    DB = \"AncestralGuidanceSelection\",\n                    DBV = \"In Dungeon\", \n                    L = { \n                        ANY = \"Ancestral Guidance usage\",\n                    }, \n                    TT = { \n                        enUS = \"Choose where you want to automatically Ancestral Guidance units.\", \n                        ruRU = \"Choose where you want to automatically Ancestral Guidance units.\",\n                    }, \n                    M = {},\n                },    \n            },    \n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"AncestralGuidanceHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Defensive Logic\",\n                    },\n                    TT = { \n                        enUS = \"Auto : Will dynamically take in account your current group size, current group damage and healing per second to determine when to use assist healing.\\nNOT Auto : the value set with slider will be the current percent damage per second on your group.\", \n                        ruRU = \"Auto : Will dynamically take in account your current group size, current group damage and healing per second to determine when to use assist healing.\\nNOT Auto : the value set with slider will be the current percent damage per second on your group.\", \n                        frFR = \"Auto : Will dynamically take in account your current group size, current group damage and healing per second to determine when to use assist healing.\\nNOT Auto : the value set with slider will be the current percent damage per second on your group.\", \n                    },                    \n                    M = {},\n                },\n            },\n            \n            { -- [4] 4th Row\n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- PvP -- \",\n                    },\n                },\n            },\n            { -- [5] 5th Row     \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"ON MELEE BURST\", value = \"ON MELEE BURST\" },\n                        { text = \"ON COOLDOWN\", value = \"ON COOLDOWN\" },                    \n                        { text = \"OFF\", value = \"OFF\" },\n                    },\n                    DB = \"HexPvP\",\n                    DBV = \"ON MELEE BURST\",\n                    L = { \n                        ANY = \"PvP \" .. GetSpellInfo(51514),\n                    }, \n                    TT = { \n                        enUS = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Only if melee player has damage buffs\\nON COOLDOWN - means will use always on melee players\\nOFF - Cut out from rotation but still allow work through Queue and MSG systems\\nIf you want fully turn it OFF then you should make SetBlocker in 'Actions' tab\", \n                        ruRU = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Только если игрок ближнего боя имеет бафы на урон\\nON COOLDOWN - значит будет использовано по игрокам ближнего боя по восстановлению способности\\nOFF - Выключает из ротации, но при этом позволяет Очередь и MSG системам работать\\nЕсли нужно полностью выключить, тогда установите блокировку во вкладке 'Действия'\", \n                        frFR = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Seulement si le joueur de mêlée a des buffs de dégâts\\nON COOLDOWN - les moyens seront toujours utilisés sur les joueurs de mêlée\\nOFF - Coupé de la rotation mais autorisant toujours le travail dans la file d'attente et Systèmes MSG\\nSi vous souhaitez l'éteindre complètement, vous devez définir SetBlocker dans l'onglet 'Actions'\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@arena1\", value = 1 },\n                        { text = \"@arena2\", value = 2 },\n                        { text = \"@arena3\", value = 3 },\n                        { text = \"primary\", value = 4 },\n                    },\n                    MULT = true,\n                    DB = \"HexPvPUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                        [3] = true,\n                        [4] = true,\n                    }, \n                    L = { \n                        ANY = \"PvP \" .. GetSpellInfo(51514) .. \" units\",\n                    }, \n                    TT = { \n                        enUS = \"primary - is @target, @mouseover, @targettarget (these units are depend on toggles above)\", \n                        ruRU = \"primary - это @target, @mouseover, @targettarget (эти юниты зависят от чекбоксов наверху)\", \n                    }, \n                    M = {},\n                },\n            },\n        },\n        [ACTION_CONST_SHAMAN_RESTORATION] = {\n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },    \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- General -- \",\n                    },\n                },\n            },\n            { -- [1]                             \n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\n@mouseover\", \n                        ruRU = \"Использовать\\n@mouseover\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                        ruRU = \"Разблокирует использование действий для @mouseover юнитов\\nНапример: Воскрешение, Хилинг\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"targettarget\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\n@targettarget\", \n                        ruRU = \"Использовать\\n@targettarget\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions\\nfor enemy @targettarget units\", \n                        ruRU = \"Разблокирует использование\\nдействий для вражеских @targettarget юнитов\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nAoE\", \n                        ruRU = \"Использовать\\nAoE\", \n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                        ruRU = \"Включает действия для нескольких целей\", \n                    }, \n                    M = {},\n                },  \n                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"UseRotationPassive\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nPassive\\nRotation\",\n                        ruRU = \"Включить\\nПассивную\\nРотацию\" \n                    },\n                    M = {},\n                },                                  \n            },     \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Healing Engine -- \",\n                    },\n                },\n            },    \n            { -- [7] \n                {\n                    E = \"Checkbox\", \n                    DB = \"ManaManagement\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Boss Fight\\nManaSave\\n(PvE)\", \n                        ruRU = \"Бой с Боссом\\nУправление Маной\\n(PvE)\",\n                    }, \n                    TT = { \n                        enUS = \"Enable to keep small mana save tricks during boss fight\\nMana will keep going to save phase if Boss HP >= our Mana\", \n                        ruRU = \"Включает сохранение малого количества маны с помощью некоторых манипуляций в течении боя против Босса\\nМана будет переходить в фазу сохранения если ХП Босса >= нашей Маны\", \n                    }, \n                    M = {},\n                },             \n                {\n                    E = \"Checkbox\", \n                    DB = \"ManaPotion\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nMana Potion\",\n                        ruRU = \"Использовать\\nЗелье Маны\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"StopCastOverHeal\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Stop Cast\\noverhealing\",\n                        ruRU = \"Stop Cast\\noverhealing\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically stop the current cast to avoid overhealing.\",\n                        ruRU = \"Enable this option to automatically stop the current cast to avoid overhealing.\",\n                    },\n                    M = {},\n                },         \n            },\n            {            \n                {        \n                    E = \"Checkbox\", \n                    DB = \"StartByPreCast\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Begin Combat\\nBy PreCast\",\n                        ruRU = \"Начинать Бой\\nЗаранее произнося\", \n                    },\n                    TT = { \n                        enUS = \"Will start rotation on enemy by available longer\\ncasting spell depended on your spec\",\n                        ruRU = \"Будет начинать ротация на противнике с доступной\\nдлинной произносящейся способности в зависимости от спека\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"SpellKick\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Spell Kick\",\n                        ruRU = \"Spell Kick\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use your kicking spells.\",\n                        ruRU = \"Enable this option to automatically use your kicking spells.\",\n                    },\n                    M = {},\n                },\n            },\n            \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Racials -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"RacialBurstHealing\",                    \n                    DBV = 100,\n                    ONLYON = true,\n                    L = { \n                        ANY = A.GetLocalization()[\"TAB\"][1][\"RACIAL\"] .. \"\\n(Healing HP %)\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"RacialBurstDamaging\",                    \n                    DBV = 100,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetLocalization()[\"TAB\"][1][\"RACIAL\"] .. \"\\n(Damaging HP %)\",                        \n                    },                     \n                    M = {},\n                },\n            },\n            { -- Trinkets\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Trinkets -- \",\n                    },\n                },\n            },    \n            {                 \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"Always\", value = \"Always\" },\n                        { text = \"Burst Synchronized\", value = \"BurstSync\" },                    \n                    },\n                    DB = \"TrinketBurstSyncUP\",\n                    DBV = \"Always\",\n                    L = { \n                        enUS = \"Damager: How to use trinkets\",\n                        ruRU = \"Урон: Как использовать аксессуары\", \n                    },\n                    TT = { \n                        enUS = \"Always: On cooldown\\nBurst Synchronized: By Burst Mode in 'General' tab\",\n                        ruRU = \"Always: По доступности\\nBurst Synchronized: От Режима Бурстов во вкладке 'Общее'\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                            \n                    DB = \"TrinketMana\",\n                    DBV = 85,\n                    ONLYOFF = false,\n                    L = { \n                        enUS = \"Trinket: Mana(%)\",\n                        ruRU = \"Trinket: Mana(%)\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                            \n                    DB = \"TrinketBurstHealing\",\n                    DBV = 75,\n                    ONLYOFF = false,\n                    L = { \n                        enUS = \"Healer: Target Health (%)\",\n                        ruRU = \"Лекарь: Здоровье Цели (%)\", \n                    },\n                    M = {},\n                },        \n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Essences -- \",\n                    },\n                },\n            },    \n            {\n                RowOptions = { margin = { top = 10 } },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"LucidDreamManaPercent\",                    \n                    DBV = 85,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(299374) .. \"\\nMana %\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 10,                            \n                    DB = \"LifeBindersInvocationUnits\",                    \n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(299944) .. \"\\nunits number\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"LifeBindersInvocationHP\",                    \n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(299944) .. \"\\n(%)\",                        \n                    },                     \n                    M = {},\n                },\n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Mythic + -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"MythicPlusLogic\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Smart Mythic+\",\n                        ruRU = \"Smart Mythic+\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to activate critical healing logic depending of the current dungeon.\\nExample:Fulminating Zap in Junkyard\",\n                        ruRU = \"Enable this option to activate critical healing logic depending of the current dungeon.\\nExample:Fulminating Zap in Junkyard\",\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"GrievousWoundsLogic\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Grievous Wounds\\nlogic\",\n                        ruRU = \"Grievous Wounds\\nlogic\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to activate critical healing logic for friendly units that got Grievous Wounds debuff.\",\n                        ruRU = \"Enable this option to activate critical healing logic for friendly units that got Grievous Wounds debuff.\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"GrievousWoundsMinStacks\",                    \n                    DBV = 2,\n                    ONOFF = false,\n                    L = { \n                        ANY = \"Grievous Wounds\\nmin stacks\",                        \n                    },   \n                    TT = { \n                        enUS = \"How many stacks of Grievous Wounds should be up on friendly unit before force targetting on this unit.\\nExample: 2 means friendly unit will be urgently targetted if he got 2 stacks.\", \n                        ruRU = \"How many stacks of Grievous Wounds should be up on friendly unit before force targetting on this unit.\\nExample: 2 means friendly unit will be urgently targetted if he got 2 stacks.\", \n                    },                    \n                    M = {},\n                },                \n                {\n                    E = \"Checkbox\", \n                    DB = \"StopCastQuake\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Stop Cast\\nquaking\",\n                        ruRU = \"Stop Cast\\nquaking\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically stop your current cast before Quake.\",\n                        ruRU = \"Enable this option to automatically stop your current cast before Quake.\",\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 3,                            \n                    DB = \"StopCastQuakeSec\",                    \n                    DBV = 1,\n                    Precision = 1,\n                    ONOFF = false,\n                    L = { \n                        ANY = \"Stop Cast\\nquaking seconds\",                      \n                    },\n                    TT = { \n                        enUS = \"Define the value you want to stop your cast before next Quake hit.\\nValue is in seconds.\\nExample: 1 means you will stop cast at 1sec remaining on Quaking.\",            \n                        ruRU = \"Define the value you want to stop your cast before next Quake hit.\\nValue is in seconds.\\nExample: 1 means you will stop cast at 1sec remaining on Quaking.\",            \n                    },                    \n                    M = {},\n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Utilities -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseGhostWolf\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto \" .. GetSpellInfo(2645), \n                        ruRU = \"Авто \" .. GetSpellInfo(2645), \n                        frFR = \"Auto \" .. GetSpellInfo(2645), \n                    }, \n                    TT = { \n                        enUS = \"Automatically use \" .. GetSpellInfo(2645), \n                        ruRU = \"Автоматически использовать \" .. GetSpellInfo(2645), \n                        frFR = \"Utiliser automatiquement \" .. GetSpellInfo(2645), \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 7,                            \n                    DB = \"GhostWolfTime\",\n                    DBV = 3, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        enUS = GetSpellInfo(2645) .. \" if moving for\",\n                        ruRU = GetSpellInfo(2645) .. \" если переехать\",\n                        frFR = GetSpellInfo(2645) .. \" si vous bougez pendant\",\n                    },\n                    TT = { \n                        enUS = \"If \" .. GetSpellInfo(2645) .. \" is talented and ready, will use it if moving for set value.\", \n                        ruRU = \"Если \" .. GetSpellInfo(2645) .. \" изучен и готов, будет использовать его при переходе на заданное значение.\", \n                        frFR = \"Si \" .. GetSpellInfo(2645) .. \" est prêt, l'utilisera s'il se déplace pour la valeur définie.\", \n                    }, \n                    M = {},\n                },    \n            },            \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Defensives -- \",\n                    },\n                },\n            },            \n            { -- [3] 3rd Row \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"AstralShiftHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(108271) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"AbyssalHealingPotionHP\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(301308) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- HealingTideTotem\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(108280) .. \" -- \",\n                    },\n                }, \n            },\n            {\n                RowOptions = { margin = { top = -10 } },\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Raid -- \",\n                    },\n                },\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Dungeon -- \",\n                    },\n                },\n            },\n            -- HealingTideTotem\n            { -- [3] \n                RowOptions = { margin = { top = 10 } },        \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"HealingTideTotemRaidUnits\",\n                    DBV = 5,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(108280) .. \"\\n(Total Units)\",    \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"HealingTideTotemPartyUnits\",\n                    DBV = 3,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(108280) .. \"\\n(Total Units)\",    \n                    },                     \n                    M = {},\n                },\n            },\n            {\n                RowOptions = { margin = { top = 10 } },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"HealingTideTotemRaidHP\",\n                    DBV = 65,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(108280) .. \"\\n(Per UnitHealth %)\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"HealingTideTotemPartyHP\",\n                    DBV = 60,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(108280) .. \"\\n(Per UnitHealth %)\",                        \n                    },                     \n                    M = {},\n                },                \n            },                            \n            { -- EarthShield\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(974) .. \" -- \",\n                    },\n                }, \n            },\n            {\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"Auto\", value = \"Auto\" },    \n                        { text = \"Tanking Units\", value = \"Tanking Units\" },                    \n                        { text = \"Mostly Inc. Damage\", value = \"Mostly Inc. Damage\" },\n                    },\n                    DB = \"EarthShieldWorkMode\",\n                    DBV = \"Tanking Units\",\n                    L = { \n                        ANY = GetSpellInfo(974) .. \"\\nWork Mode\",\n                    }, \n                    TT = { \n                        enUS = \"These conditions will be skiped if unit will dying in emergency (critical) situation\", \n                        ruRU = \"Эти условия будут пропущены если юнит будет умирать в чрезвычайной (критической) ситуациии\", \n                    },                    \n                    M = {},\n                },\n            },    \n            { -- ChainHeal\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(1064) .. \" -- \",\n                    },\n                }, \n            },\n            {\n                RowOptions = { margin = { top = -10 } },\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Raid -- \",\n                    },\n                },\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Dungeon -- \",\n                    },\n                },\n            },\n            -- ChainHeal\n            { -- [3] \n                RowOptions = { margin = { top = 10 } },        \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"ChainHealRaidUnits\",\n                    DBV = 4,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(1064) .. \"\\n(Total Units)\",    \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"ChainHealPartyUnits\",\n                    DBV = 3,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(1064) .. \"\\n(Total Units)\",    \n                    },                     \n                    M = {},\n                },\n            },\n            {\n                RowOptions = { margin = { top = 10 } },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"ChainHealRaidHP\",\n                    DBV = 92,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(1064) .. \"\\n(Per UnitHealth %)\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"ChainHealPartyHP\",\n                    DBV = 80,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(1064) .. \"\\n(Per UnitHealth %)\",                        \n                    },                     \n                    M = {},\n                },                \n            },    \n            { -- HealingStreamTotem\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(5394) .. \" -- \",\n                    },\n                }, \n            },            \n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"HealingStreamTotemHP\",\n                    DBV = 55,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(5394) .. \"\\n(%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"HealingStreamTotemUnits\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(5394) .. \"\\nunits\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"HealingStreamTotemRefresh\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(5394) .. \"\\nrefresh(sec)\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- HealingRain\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(73920) .. \" -- \",\n                    },\n                }, \n            },            \n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"HealingRainRefresh\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(73920) .. \"\\nrefresh(sec)\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- SpiritWalkersGrace\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(79206) .. \" -- \",\n                    },\n                }, \n            },            \n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseSpiritWalkersGrace\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(79206),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(79206),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(79206),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(79206),\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"SpiritWalkersGraceTime\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(79206) .. \"\\nif moving for\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"SpiritWalkersCatch\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(79206) .. \"\\nonly if rooted\",\n                    }, \n                    M = {},\n                },                \n            },                \n            { -- [6]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Party -- \",\n                    },\n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@party1\", value = 1 },\n                        { text = \"@party2\", value = 2 },\n                    },\n                    MULT = true,\n                    DB = \"PartyUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                    }, \n                    L = { \n                        ANY = \"Party Units\",\n                    }, \n                    TT = { \n                        enUS = \"Enable/Disable relative party passive rotation\", \n                        ruRU = \"Включить/Выключить относительно группы пассивную ротацию\", \n                    }, \n                    M = {},\n                },  \n                {\n                    E = \"Checkbox\", \n                    DB = \"Dispel\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(528),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(528),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(528),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(528),\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"Purje\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(527),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(527),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(527),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(527),\n                    },\n                    M = {},\n                },                \n            },     \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Overlay -- \",\n                    },\n                },\n            },\n            { -- [2] 2nd Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseAnnouncer\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Smart Announcer\", \n                        ruRU = \"Use Smart Announcer\",  \n                        frFR = \"Use Smart Announcer\", \n                    }, \n                    TT = { \n                        enUS = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        ruRU = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        frFR = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AnnouncerInCombatOnly\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Only use in combat\", \n                        ruRU = \"Only use in combat\", \n                        frFR = \"Only use in combat\",\n                    }, \n                    TT = { \n                        enUS = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work with precombat actions if available.\\nFor example : Sap out of combat, pre potion.\", \n                        ruRU = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",\n                        frFR = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",  \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AnnouncerDelay\",\n                    DBV = 2, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Alerts delay (sec)\",\n                    },\n                    TT = { \n                        enUS = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        ruRU = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        frFR = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                    },                     \n                    M = {},\n                },                \n            },    \n            \n        },\n    },\n    -- MSG Actions UI\n    [7] = {\n        [ACTION_CONST_SHAMAN_ENCHANCEMENT] = { \n            -- MSG Action Pet Dispell\n            [\"dispell\"] = { Enabled = true, Key = \"PetDispell\", LUA = [[\n                return     A.DispellMagic:IsReady(unit, true) and \n                        (\n                            ( \n                                not Unit(thisunit):IsEnemy() and \n                                (\n                                    (\n                                        not InPvP() and \n                                        Env.Dispel(unit)\n                                    ) or \n                                    (\n                                        InPvP() and \n                                        EnemyTeam():PlayersInRange(1, 5)\n                                    ) \n                                )\n                            ) or \n                            ( \n                                Unit(thisunit):IsEnemy() and \n                                Unit(thisunit):GetRange() <= 5 and \n                                Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"TotalImun\", \"DeffBuffsMagic\"}, true) \n                            )                \n                        ) \n            ]] },\n            -- MSG Action Pet Kick\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n            -- MSG Action Fear\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n        },\n        [ACTION_CONST_SHAMAN_RESTORATION] = { \n            -- MSG Action Pet Dispell\n            [\"dispell\"] = { Enabled = true, Key = \"PetDispell\", LUA = [[\n                return     A.DispellMagic:IsReady(unit, true) and \n                        (\n                            ( \n                                not Unit(thisunit):IsEnemy() and \n                                (\n                                    (\n                                        not InPvP() and \n                                        Env.Dispel(unit)\n                                    ) or \n                                    (\n                                        InPvP() and \n                                        EnemyTeam():PlayersInRange(1, 5)\n                                    ) \n                                )\n                            ) or \n                            ( \n                                Unit(thisunit):IsEnemy() and \n                                Unit(thisunit):GetRange() <= 5 and \n                                Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"TotalImun\", \"DeffBuffsMagic\"}, true) \n                            )                \n                        ) \n            ]] },\n            -- MSG Action Pet Kick\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n            -- MSG Action Fear\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n        },\n        [ACTION_CONST_SHAMAN_ELEMENTAL] = { \n            -- MSG Action Pet Dispell\n            [\"dispell\"] = { Enabled = true, Key = \"PetDispell\", LUA = [[\n                return     A.DispellMagic:IsReady(unit, true) and \n                        (\n                            ( \n                                not Unit(thisunit):IsEnemy() and \n                                (\n                                    (\n                                        not InPvP() and \n                                        Env.Dispel(unit)\n                                    ) or \n                                    (\n                                        InPvP() and \n                                        EnemyTeam():PlayersInRange(1, 5)\n                                    ) \n                                )\n                            ) or \n                            ( \n                                Unit(thisunit):IsEnemy() and \n                                Unit(thisunit):GetRange() <= 5 and \n                                Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"TotalImun\", \"DeffBuffsMagic\"}, true) \n                            )                \n                        ) \n            ]] },\n            -- MSG Action Pet Kick\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n            -- MSG Action Fear\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n        },\n    },\n}\n\n\n-----------------------------------------\n--                   PvP  \n-----------------------------------------\n\nfunction A.Main_CastBars(unit, list)\n    if not A.IsInitialized or A.IamHealer or (A.Zone ~= \"arena\" and A.Zone ~= \"pvp\") then \n        return false \n    end \n    \n    if A[A.PlayerSpec] and A[A.PlayerSpec].SpearHandStrike and A[A.PlayerSpec].SpearHandStrike:IsReadyP(unit, nil, true) and A[A.PlayerSpec].SpearHandStrike:AbsentImun(unit, {\"KickImun\", \"TotalImun\", \"DamagePhysImun\"}, true) and A.InterruptIsValid(unit, list) then \n        return true         \n    end \nend \n\nfunction A.Second_CastBars(unit)\n    if not A.IsInitialized or (A.Zone ~= \"arena\" and A.Zone ~= \"pvp\") then \n        return false \n    end \n    \n    local Toggle = A.GetToggle(2, \"ParalysisPvP\")    \n    if Toggle and Toggle ~= \"OFF\" and A[A.PlayerSpec] and A[A.PlayerSpec].Paralysis and A[A.PlayerSpec].Paralysis:IsReadyP(unit, nil, true) and A[A.PlayerSpec].Paralysis:AbsentImun(unit, {\"CCTotalImun\", \"TotalImun\", \"DamagePhysImun\"}, true) and Unit(unit):IsControlAble(\"incapacitate\", 0) then \n        if Toggle == \"BOTH\" then \n            return select(2, A.InterruptIsValid(unit, \"Heal\", true)) or select(2, A.InterruptIsValid(unit, \"PvP\", true)) \n        else\n            return select(2, A.InterruptIsValid(unit, Toggle, true))         \n        end \n    end \nend \n\n\n",
				}, -- [1]
				{
					["Order"] = 2,
					["Name"] = "ELEMENTAL",
					["Code"] = "--###################################\n--##### TRIP'S ELEMENTAL SHAMAN #####\n--###################################\n\n--Full credit to Taste\n\nlocal _G, setmetatable                            = _G, setmetatable\nlocal A                                         = _G.Action\nlocal Listener                                    = Action.Listener\nlocal Create                                    = Action.Create\nlocal GetToggle                                    = Action.GetToggle\nlocal SetToggle                                    = Action.SetToggle\nlocal GetGCD                                    = Action.GetGCD\nlocal GetCurrentGCD                                = Action.GetCurrentGCD\nlocal GetPing                                    = Action.GetPing\nlocal ShouldStop                                = Action.ShouldStop\nlocal BurstIsON                                    = Action.BurstIsON\nlocal AuraIsValid                                = Action.AuraIsValid\nlocal InterruptIsValid                            = Action.InterruptIsValid\nlocal FrameHasSpell                                = Action.FrameHasSpell\nlocal Azerite                                    = LibStub(\"AzeriteTraits\")\nlocal Utils                                        = Action.Utils\nlocal TeamCache                                    = Action.TeamCache\nlocal EnemyTeam                                    = Action.EnemyTeam\nlocal FriendlyTeam                                = Action.FriendlyTeam\nlocal LoC                                        = Action.LossOfControl\nlocal Player                                    = Action.Player \nlocal MultiUnits                                = Action.MultiUnits\nlocal UnitCooldown                                = Action.UnitCooldown\nlocal Unit                                        = Action.Unit \nlocal IsUnitEnemy                                = Action.IsUnitEnemy\nlocal IsUnitFriendly                            = Action.IsUnitFriendly\nlocal ActiveUnitPlates                            = MultiUnits:GetActiveUnitPlates()\nlocal IsIndoors, UnitIsUnit                     = IsIndoors, UnitIsUnit\nlocal TR                                        = Action.TasteRotation\nlocal pairs                                     = pairs\nlocal Pet                                       = LibStub(\"PetLibrary\")\n\n--- ============================ CONTENT ===========================\n--- ======= APL LOCALS =======\n-- luacheck: max_line_length 9999\n\n-- Spells\nAction[ACTION_CONST_SHAMAN_ELEMENTAL] = {\n    -- Racial\n    ArcaneTorrent                          = Action.Create({ Type = \"Spell\", ID = 50613     }),\n    BloodFury                              = Action.Create({ Type = \"Spell\", ID = 20572      }),\n    Fireblood                              = Action.Create({ Type = \"Spell\", ID = 265221     }),\n    AncestralCall                          = Action.Create({ Type = \"Spell\", ID = 274738     }),\n    Berserking                             = Action.Create({ Type = \"Spell\", ID = 26297    }),\n    ArcanePulse                            = Action.Create({ Type = \"Spell\", ID = 260364    }),\n    QuakingPalm                            = Action.Create({ Type = \"Spell\", ID = 107079     }),\n    Haymaker                               = Action.Create({ Type = \"Spell\", ID = 287712     }), \n    WarStomp                               = Action.Create({ Type = \"Spell\", ID = 20549     }),\n    BullRush                               = Action.Create({ Type = \"Spell\", ID = 255654     }),  \n    GiftofNaaru                            = Action.Create({ Type = \"Spell\", ID = 59544    }),\n    Shadowmeld                             = Action.Create({ Type = \"Spell\", ID = 58984    }), -- usable in Action Core \n    Stoneform                              = Action.Create({ Type = \"Spell\", ID = 20594    }), \n    BagofTricks                            = Action.Create({ Type = \"Spell\", ID = 312411    }),\n    WilloftheForsaken                      = Action.Create({ Type = \"Spell\", ID = 7744        }), -- not usable in APL but user can Queue it   \n    EscapeArtist                           = Action.Create({ Type = \"Spell\", ID = 20589    }), -- not usable in APL but user can Queue it\n    EveryManforHimself                     = Action.Create({ Type = \"Spell\", ID = 59752    }), -- not usable in APL but user can Queue it\n    -- Generics\n    AncestralGuidance                      = Action.Create({ Type = \"Spell\", ID = 108281 }),\n    StormkeeperBuff                        = Action.Create({ Type = \"Spell\", ID = 191634, Hidden = true     }),\n    Stormkeeper                            = Action.Create({ Type = \"Spell\", ID = 191634 }),\n    FireElemental                          = Action.Create({ Type = \"Spell\", ID = 198067 }),\n    StormElemental                         = Action.Create({ Type = \"Spell\", ID = 192249 }),\n    ElementalBlast                         = Action.Create({ Type = \"Spell\", ID = 117014 }),\n    LavaBurst                              = Action.Create({ Type = \"Spell\", ID = 51505 }),\n    ChainLightning                         = Action.Create({ Type = \"Spell\", ID = 188443 }),\n    FlameShock                             = Action.Create({ Type = \"Spell\", ID = 188389 }),\n    FlameShockDebuff                       = Action.Create({ Type = \"Spell\", ID = 188389, Hidden = true }),\n    WindGustBuff                           = Action.Create({ Type = \"Spell\", ID = 263806, Hidden = true     }),\n    Ascendance                             = Action.Create({ Type = \"Spell\", ID = 114050 }),\n    Icefury                                = Action.Create({ Type = \"Spell\", ID = 210714 }),\n    IcefuryBuff                            = Action.Create({ Type = \"Spell\", ID = 210714, Hidden = true     }),\n    LiquidMagmaTotem                       = Action.Create({ Type = \"Spell\", ID = 192222 }),\n    Earthquake                             = Action.Create({ Type = \"Spell\", ID = 61882 }),\n    MasteroftheElements                    = Action.Create({ Type = \"Spell\", ID = 16166 }),\n    MasteroftheElementsBuff                = Action.Create({ Type = \"Spell\", ID = 260734 , Hidden = true     }),\n    LavaSurgeBuff                          = Action.Create({ Type = \"Spell\", ID = 77762 , Hidden = true     }),\n    AscendanceBuff                         = Action.Create({ Type = \"Spell\", ID = 114050 , Hidden = true     }),\n    FrostShock                             = Action.Create({ Type = \"Spell\", ID = 196840 }),\n    LavaBeam                               = Action.Create({ Type = \"Spell\", ID = 114074 }),\n    IgneousPotential                       = Action.Create({ Type = \"Spell\", ID = 279829 }),\n    SurgeofPowerBuff                       = Action.Create({ Type = \"Spell\", ID = 285514 , Hidden = true     }),\n    NaturalHarmony                         = Action.Create({ Type = \"Spell\", ID = 278697 }),\n    SurgeofPower                           = Action.Create({ Type = \"Spell\", ID = 262303 }),\n    LightningBolt                          = Action.Create({ Type = \"Spell\", ID = 188196 }),\n    LavaShock                              = Action.Create({ Type = \"Spell\", ID = 273448 }),\n    LavaShockBuff                          = Action.Create({ Type = \"Spell\", ID = 273453 , Hidden = true     }),\n    EarthShock                             = Action.Create({ Type = \"Spell\", ID = 8042 }),\n    CalltheThunder                         = Action.Create({ Type = \"Spell\", ID = 260897 }),\n    EchooftheElementals                    = Action.Create({ Type = \"Spell\", ID = 275381 }),\n    EchooftheElements                      = Action.Create({ Type = \"Spell\", ID = 333919 }),\n    ResonanceTotemBuff                     = Action.Create({ Type = \"Spell\", ID = 202192 , Hidden = true     }),\n    TectonicThunder                        = Action.Create({ Type = \"Spell\", ID = 286949 }),\n    TectonicThunderBuff                    = Action.Create({ Type = \"Spell\", ID = 286949 , Hidden = true     }),\n    UnlimitedPower                         = Action.Create({ Type = \"Spell\", ID = 260895}),\n    WindShear                              = Action.Create({ Type = \"Spell\", ID = 57994 }),\n    BloodFury                              = Action.Create({ Type = \"Spell\", ID = 20572 }),\n    Berserking                             = Action.Create({ Type = \"Spell\", ID = 26297 }),\n    Fireblood                              = Action.Create({ Type = \"Spell\", ID = 265221 }),\n    AncestralCall                          = Action.Create({ Type = \"Spell\", ID = 274738 }),\n    EarthElemental                         = Action.Create({ Type = \"Spell\", ID = 198103 }), -- Earth Elemental manual queue\n    EchoingShock                           = Action.Create({ Type = \"Spell\", ID = 320125 }),\n    LightningShield                           = Action.Create({ Type = \"Spell\", ID = 192106 }),\n    StaticDischarge                           = Action.Create({ Type = \"Spell\", ID = 342243 }), \n    -- Utilities\n    LightningLasso                         = Action.Create({ Type = \"Spell\", ID = 305483     }),\n    CapacitorTotem                         = Action.Create({ Type = \"Spell\", ID = 192058     }),\n    Purge                                  = Action.Create({ Type = \"Spell\", ID = 370     }),\n    GhostWolf                              = Action.Create({ Type = \"Spell\", ID = 2645     }),\n    EarthShield                            = Action.Create({ Type = \"Spell\", ID = 974     }),\n    HealingSurge                           = Action.Create({ Type = \"Spell\", ID = 8004     }),\n    PrimalElementalist                     = Action.Create({ Type = \"Spell\", ID = 117013 , Hidden = true     }),\n    GhostWolfBuff                          = Action.Create({ Type = \"Spell\", ID = 2645, Hidden = true     }),    \n    -- Storm Elemental   \n    EyeOfTheStorm                          = Action.Create({ Type = \"Spell\", ID = 157375 , Hidden = true     }), \n    CallLightning                          = Action.Create({ Type = \"Spell\", ID = 157348 , Hidden = true     }),\n    -- Defensive\n    AstralShift                            = Action.Create({ Type = \"Spell\", ID = 108271     }),    \n    ShiverVenomDebuff                      = Action.Create({ Type = \"Spell\", ID = 301624, Hidden = true     }),\n    CleanseSpirit                          = Action.Create({ Type = \"Spell\", ID = 51886     }), -- PartyDispell\n    -- Potions\n    PotionofUnbridledFury                  = Action.Create({ Type = \"Potion\", ID = 169299, QueueForbidden = true }), \n    BattlePotionOfAgility                  = Action.Create({ Type = \"Potion\", ID = 163223, QueueForbidden = true }),  \n    SuperiorPotionofUnbridledFury          = Action.Create({ Type = \"Potion\", ID = 168489, QueueForbidden = true }), \n    SuperiorSteelskinPotion                = Action.Create({ Type = \"Potion\", ID = 168501, QueueForbidden = true }), \n    AbyssalHealingPotion                   = Action.Create({ Type = \"Potion\", ID = 169451, QueueForbidden = true }),     \n    PotionofFocusedResolve                 = Action.Create({ Type = \"Potion\", ID = 168506 }),\n    SuperiorBattlePotionofStrength         = Action.Create({ Type = \"Potion\", ID = 168500 }),\n    PotionofEmpoweredProximity             = Action.Create({ Type = \"Potion\", ID = 168529 }),\n    -- Trinkets\n    AzsharasFontofPower                    = Action.Create({ Type = \"Trinket\", ID = 169314 }),\n    PocketsizedComputationDevice           = Action.Create({ Type = \"Trinket\", ID = 167555 }),\n    RotcrustedVoodooDoll                   = Action.Create({ Type = \"Trinket\", ID = 159624 }),\n    ShiverVenomRelic                       = Action.Create({ Type = \"Trinket\", ID = 168905 }),\n    AquipotentNautilus                     = Action.Create({ Type = \"Trinket\", ID = 169305 }),\n    TidestormCodex                         = Action.Create({ Type = \"Trinket\", ID = 165576 }),\n    VialofStorms                           = Action.Create({ Type = \"Trinket\", ID = 158224 }),\n    GalecallersBoon                        = Action.Create({ Type = \"Trinket\", ID = 159614 }),\n    InvocationOfYulon                      = Action.Create({ Type = \"Trinket\", ID = 165568 }),\n    LustrousGoldenPlumage                  = Action.Create({ Type = \"Trinket\", ID = 159617 }),\n    LurkersInsidiousGift                   = Action.Create({ Type = \"Trinket\", ID = 167866 }),\n    VigorTrinket                           = Action.Create({ Type = \"Trinket\", ID = 165572 }),\n    AshvanesRazorCoral                     = Action.Create({ Type = \"Trinket\", ID = 169311 }),\n    MalformedHeraldsLegwraps               = Action.Create({ Type = \"Trinket\", ID = 167835 }),\n    HyperthreadWristwraps                  = Action.Create({ Type = \"Trinket\", ID = 168989 }),\n    NotoriousAspirantsBadge                = Action.Create({ Type = \"Trinket\", ID = 167528 }),\n    NotoriousGladiatorsBadge               = Action.Create({ Type = \"Trinket\", ID = 167380 }),\n    SinisterGladiatorsBadge                = Action.Create({ Type = \"Trinket\", ID = 165058 }),\n    SinisterAspirantsBadge                 = Action.Create({ Type = \"Trinket\", ID = 165223 }),\n    DreadGladiatorsBadge                   = Action.Create({ Type = \"Trinket\", ID = 161902 }),\n    DreadAspirantsBadge                    = Action.Create({ Type = \"Trinket\", ID = 162966 }),\n    DreadCombatantsInsignia                = Action.Create({ Type = \"Trinket\", ID = 161676 }),\n    NotoriousAspirantsMedallion            = Action.Create({ Type = \"Trinket\", ID = 167525 }),\n    NotoriousGladiatorsMedallion           = Action.Create({ Type = \"Trinket\", ID = 167377 }),\n    SinisterGladiatorsMedallion            = Action.Create({ Type = \"Trinket\", ID = 165055 }),\n    SinisterAspirantsMedallion             = Action.Create({ Type = \"Trinket\", ID = 165220 }),\n    DreadGladiatorsMedallion               = Action.Create({ Type = \"Trinket\", ID = 161674 }),\n    DreadAspirantsMedallion                = Action.Create({ Type = \"Trinket\", ID = 162897 }),\n    DreadCombatantsMedallion               = Action.Create({ Type = \"Trinket\", ID = 161811 }),\n    IgnitionMagesFuse                      = Action.Create({ Type = \"Trinket\", ID = 159615 }),\n    TzanesBarkspines                       = Action.Create({ Type = \"Trinket\", ID = 161411 }),\n    AzurethosSingedPlumage                = Action.Create({ Type = \"Trinket\", ID = 161377 }),\n    AncientKnotofWisdomAlliance            = Action.Create({ Type = \"Trinket\", ID = 161417 }),\n    AncientKnotofWisdomHorde               = Action.Create({ Type = \"Trinket\", ID = 166793 }),\n    ShockbitersFang                        = Action.Create({ Type = \"Trinket\", ID = 169318 }),\n    NeuralSynapseEnhancer                  = Action.Create({ Type = \"Trinket\", ID = 168973 }),\n    BalefireBranch                         = Action.Create({ Type = \"Trinket\", ID = 159630 }),\n    GrongsPrimalRage                       = Action.Create({ Type = \"Trinket\", ID = 165574 }),\n    BygoneBeeAlmanac                       = Action.Create({ Type = \"Trinket\", ID = 163936 }),\n    RampingAmplitudeGigavoltEngine         = Action.Create({ Type = \"Trinket\", ID = 165580 }),\n    VisionofDemise                         = Action.Create({ Type = \"Trinket\", ID = 169307 }),\n    JesHowler                              = Action.Create({ Type = \"Trinket\", ID = 159627 }),\n    GalecallersBeak                        = Action.Create({ Type = \"Trinket\", ID = 161379 }),\n    DribblingInkpod                        = Action.Create({ Type = \"Trinket\", ID = 169319 }),\n    MerekthasFang                          = Action.Create({ Type = \"Trinket\", ID = 158367 }),    \n    GrongsPrimalRage                       = Action.Create({ Type = \"Trinket\", ID = 165574 }),\n    BygoneBeeAlmanac                       = Action.Create({ Type = \"Trinket\", ID = 163936 }),\n    RampingAmplitudeGigavoltEngine         = Action.Create({ Type = \"Trinket\", ID = 165580 }),\n    VisionofDemise                         = Action.Create({ Type = \"Trinket\", ID = 169307 }),\n    JesHowler                              = Action.Create({ Type = \"Trinket\", ID = 159627 }),\n    GalecallersBeak                        = Action.Create({ Type = \"Trinket\", ID = 161379 }),\n    DribblingInkpod                        = Action.Create({ Type = \"Trinket\", ID = 169319 }),\n    RazdunksBigRedButton                   = Action.Create({ Type = \"Trinket\", ID = 159611 }),\n    MerekthasFang                          = Action.Create({ Type = \"Trinket\", ID = 158367 }),\n    KnotofAncientFuryAlliance              = Action.Create({ Type = \"Trinket\", ID = 161413 }),\n    KnotofAncientFuryHorde                 = Action.Create({ Type = \"Trinket\", ID = 166795 }),\n    FirstMatesSpyglass                     = Action.Create({ Type = \"Trinket\", ID = 158163 }),\n    VialofAnimatedBlood                    = Action.Create({ Type = \"Trinket\", ID = 159625 }),\n    -- Misc\n    Channeling                             = Action.Create({ Type = \"Spell\", ID = 209274, Hidden = true     }),    -- Show an icon during channeling\n    TargetEnemy                            = Action.Create({ Type = \"Spell\", ID = 44603, Hidden = true     }),    -- Change Target (Tab button)\n    StopCast                               = Action.Create({ Type = \"Spell\", ID = 61721, Hidden = true     }),        -- spell_magic_polymorphrabbit\n    CyclotronicBlast                       = Action.Create({ Type = \"Spell\", ID = 293491, Hidden = true}),\n    ConcentratedFlameBurn                  = Action.Create({ Type = \"Spell\", ID = 295368, Hidden = true}),\n    RazorCoralDebuff                       = Action.Create({ Type = \"Spell\", ID = 303568, Hidden = true     }),\n    ConductiveInkDebuff                    = Action.Create({ Type = \"Spell\", ID = 302565, Hidden = true     }),\n    -- Hidden Heart of Azeroth\n    -- added all 3 ranks ids in case used by rotation\n    VisionofPerfectionMinor                = Action.Create({ Type = \"Spell\", ID = 296320, Hidden = true}),\n    VisionofPerfectionMinor2               = Action.Create({ Type = \"Spell\", ID = 299367, Hidden = true}),\n    VisionofPerfectionMinor3               = Action.Create({ Type = \"Spell\", ID = 299369, Hidden = true}),\n    UnleashHeartOfAzeroth                  = Action.Create({ Type = \"Spell\", ID = 280431, Hidden = true}),\n    RecklessForceBuff                      = Action.Create({ Type = \"Spell\", ID = 302932, Hidden = true     }),     \n};\n\n-- To create essences use next code:\nAction:CreateEssencesFor(ACTION_CONST_SHAMAN_ELEMENTAL)  -- where PLAYERSPEC is Constance (example: ACTION_CONST_MONK_BM)\nlocal A = setmetatable(Action[ACTION_CONST_SHAMAN_ELEMENTAL], { __index = Action })\n\nlocal function num(val)\n    if val then return 1 else return 0 end\nend\n\nlocal function bool(val)\n    return val ~= 0\nend\n\nlocal player = \"player\"\n\n------------------------------------------\n-------------- COMMON PREAPL -------------\n------------------------------------------\nlocal Temp = {\n    TotalAndPhys                            = {\"TotalImun\", \"DamagePhysImun\"},\n    TotalAndCC                              = {\"TotalImun\", \"CCTotalImun\"},\n    TotalAndPhysKick                        = {\"TotalImun\", \"DamagePhysImun\", \"KickImun\"},\n    TotalAndPhysAndCC                       = {\"TotalImun\", \"DamagePhysImun\", \"CCTotalImun\"},\n    TotalAndPhysAndStun                     = {\"TotalImun\", \"DamagePhysImun\", \"StunImun\"},\n    TotalAndPhysAndCCAndStun                = {\"TotalImun\", \"DamagePhysImun\", \"CCTotalImun\", \"StunImun\"},\n    TotalAndMag                             = {\"TotalImun\", \"DamageMagicImun\"},\n    TotalAndMagKick                         = {\"TotalImun\", \"DamageMagicImun\", \"KickImun\"},\n    DisablePhys                             = {\"TotalImun\", \"DamagePhysImun\", \"Freedom\", \"CCTotalImun\"},\n    DisableMag                              = {\"TotalImun\", \"DamageMagicImun\", \"Freedom\", \"CCTotalImun\"},\n}\n\nlocal IsIndoors, UnitIsUnit, UnitName = IsIndoors, UnitIsUnit, UnitName\n\nlocal function IsSchoolFree()\n    return LoC:IsMissed(\"SILENCE\") and LoC:Get(\"SCHOOL_INTERRUPT\", \"SHADOW\") == 0\nend \n\n-- API - Tracker\n-- Initialize Tracker \nPet:AddTrackers(ACTION_CONST_SHAMAN_ENCHANCEMENT, { -- this template table is the same with what has this library already built-in, just for example\n        [77942] = {\n            name = \"Primal Storm Elemental\",\n            duration = 30,\n        },\n})\n\n-- Function to check for Infernal duration\nlocal function PrimalStormElementalTime()\n    return Pet:GetRemainDuration(77942) or 0\nend \n\nlocal function StormElementalIsActive()\n    if PrimalStormElementalTime() > 0 then\n        return true\n    else\n        return false\n    end\nend\n\nlocal function ResonanceTotemTime()\n    for index = 1, 4 do\n        local _, totemName, startTime, duration = GetTotemInfo(index)\n        if totemName == A.TotemMastery:Info() then\n            return (floor(startTime + duration - TMW.time + 0.5)) or 0\n        end\n    end\n    return 0\nend\n\nlocal function FutureMaelstromPower()\n    local castName, castStartTime, castEndTime, notInterruptable, spellID, isChannel = Unit(\"player\"):IsCasting()\n    local castLeft, _, _, _, notKickAble = Unit(\"player\"):IsCastingRemains()\n    local MaelstromPower = Player:Maelstrom()\n    local overloadChance = Player:MasteryPct() / 100\n    local factor = 1 + 0.75 * overloadChance\n    local resonance = 0\n    \n    if Unit(\"player\"):CombatTime() > 0 then\n        if A.TotemMastery:IsReady(\"player\") then\n            resonance = castLeft\n        end\n        if not castLeft then\n            return MaelstromPower\n        else\n            if spellID == A.LightningBolt.ID then\n                return MaelstromPower + 8 + resonance\n            elseif spellID == A.LavaBurst.ID then\n                return MaelstromPower + 10 + resonance\n            elseif spellID == A.ChainLightning.ID then\n                local enemiesHit = min(MultiUnits:GetActiveEnemies(), 3)\n                return MaelstromPower + 4 * enemiesHit * factor + resonance\n            elseif spellID == A.Icefury.ID then\n                return MaelstromPower + 25 * factor + resonance\n            else\n                return MaelstromPower\n            end\n        end\n    end\nend\n\nlocal function HandleAncestralGuidance()\n    local choice = Action.GetToggle(2, \"AncestralGuidanceSelection\")\n    \n    if choice == \"In Raid\" then\n        if IsInRaid() then\n            return true\n        else\n            return false\n        end\n    elseif choice == \"In Dungeon\" then \n        if IsInGroup() then\n            return true\n        else\n            return false\n        end\n    elseif choice == \"In PvP\" then     \n        if A.IsInPvP then \n            return true\n        else\n            return false\n        end        \n    elseif choice == \"Everywhere\" then \n        return true\n    else\n        return false\n    end\n    --print(choice)\nend\n\n-- Multidot Handler UI --\nlocal function HandleMultidots()\n    local choice = Action.GetToggle(2, \"AutoDotSelection\")\n    \n    if choice == \"In Raid\" then\n        if IsInRaid() then\n            return true\n        else\n            return false\n        end\n    elseif choice == \"In Dungeon\" then \n        if IsInGroup() then\n            return true\n        else\n            return false\n        end\n    elseif choice == \"In PvP\" then     \n        if A.IsInPvP then \n            return true\n        else\n            return false\n        end        \n    elseif choice == \"Everywhere\" then \n        return true\n    else\n        return false\n    end\n    --print(choice)\nend\n\n-- Stormkeeper Handler UI --\nlocal function HandleStormkeeper()\n    local choice = A.GetToggle(2, \"StormkeeperMode\")\n    --print(choice) \n    local unit = \"target\"\n    -- CDs ON\n    if choice[1] then \n        -- also checks AoE\n        if choice[2] then\n            return (A.BurstIsON(unit) and MultiUnits:GetActiveEnemies() > 2 and A.GetToggle(2, \"AoE\")) or false\n        else\n            return (A.BurstIsON(unit)) or false\n        end\n        -- AoE Only\n    elseif choice[2] then\n        -- also checks CDs\n        if choice[1] then\n            return (A.BurstIsON(unit) and MultiUnits:GetActiveEnemies() > 2 and A.GetToggle(2, \"AoE\")) or false\n        else\n            return (MultiUnits:GetActiveEnemies() > 2 and A.GetToggle(2, \"AoE\")) or false\n        end\n        -- Everytime\n    elseif choice[3] then\n        return A.Stormkeeper:IsReady(unit) or false\n    else\n        return false\n    end\n    \nend\n\n--FlameShockTTD\nlocal function HandleFlameShockTTD()\n    local FlameShock = A.GetToggle(2, \"FlameShockTTD\")\n    if     FlameShock >= 0 and \n    (\n        (     -- Auto \n            FlameShock >= 100 and \n            (\n                -- TTD > 15\n                Unit(\"target\"):TimeToDie() > 15\n            ) \n        ) or \n        (    -- Custom\n            FlameShock < 100 and \n            Unit(\"target\"):HealthPercent() > FlameShock\n        )\n    ) \n    then \n        return true\n    end\nend\n\nlocal function ExpectedCombatLength()\n    local BossTTD = 0\n    if not A.IsInPvP then \n        for i = 1, MAX_BOSS_FRAMES do \n            if Unit(\"boss\" .. i):IsExists() and not Unit(\"boss\" .. i):IsDead() then \n                BossTTD = Unit(\"boss\" .. i):TimeToDie()\n            end \n        end \n    end \n    return BossTTD\nend \nExpectedCombatLength = A.MakeFunctionCachedStatic(ExpectedCombatLength)\n\nlocal function SelfDefensives()\n    if Unit(\"player\"):CombatTime() == 0 then \n        return \n    end \n    \n    local unit\n    if A.IsUnitEnemy(\"mouseover\") then \n        unit = \"mouseover\"\n    elseif A.IsUnitEnemy(\"target\") then \n        unit = \"target\"\n    end      \n    \n    -- EarthShieldHP\n    local EarthShield = A.GetToggle(2, \"EarthShieldHP\")\n    if     EarthShield >= 0 and A.EarthShield:IsReady(\"player\") and  \n    (\n        (     -- Auto \n            EarthShield >= 100 and \n            (\n                Unit(\"player\"):HasBuffsStacks(A.EarthShield.ID, true) <= 3 \n                or A.IsInPvP and Unit(\"player\"):HasBuffsStacks(A.EarthShield.ID, true) <= 2\n            ) \n        ) or \n        (    -- Custom\n            EarthShield < 100 and \n            Unit(\"player\"):HasBuffs(A.EarthShield.ID, true) <= 5 and \n            Unit(\"player\"):HealthPercent() <= EarthShield\n        )\n    ) \n    then \n        return A.EarthShield\n    end\n    \n    -- HealingSurgeHP\n    local HealingSurge = A.GetToggle(2, \"HealingSurgeHP\")\n    if     HealingSurge >= 0 and A.HealingSurge:IsReady(\"player\") and \n    (\n        (     -- Auto \n            HealingSurge >= 100 and \n            (\n                -- HP lose per sec >= 40\n                Unit(\"player\"):GetDMG() * 100 / Unit(\"player\"):HealthMax() >= 40 or \n                Unit(\"player\"):GetRealTimeDMG() >= Unit(\"player\"):HealthMax() * 0.40 or \n                -- TTD \n                Unit(\"player\"):TimeToDieX(25) < 5 or \n                (\n                    A.IsInPvP and \n                    (\n                        Unit(\"player\"):UseDeff() or \n                        (\n                            Unit(\"player\", 5):HasFlags() and \n                            Unit(\"player\"):GetRealTimeDMG() > 0 and \n                            Unit(\"player\"):IsFocused() \n                        )\n                    )\n                )\n            ) and \n            Unit(\"player\"):HasBuffs(\"DeffBuffs\", true) == 0\n        ) or \n        (    -- Custom\n            HealingSurge < 100 and \n            Unit(\"player\"):HealthPercent() <= HealingSurge\n        )\n    ) \n    then \n        return A.HealingSurge\n    end\n    \n    -- Abyssal Healing Potion\n    local AbyssalHealingPotion = A.GetToggle(2, \"AbyssalHealingPotionHP\")\n    if     AbyssalHealingPotion >= 0 and A.AbyssalHealingPotion:IsReady(\"player\") and \n    (\n        (     -- Auto \n            AbyssalHealingPotion >= 100 and \n            (\n                -- HP lose per sec >= 25\n                Unit(\"player\"):GetDMG() * 100 / Unit(\"player\"):HealthMax() >= 25 or \n                Unit(\"player\"):GetRealTimeDMG() >= Unit(\"player\"):HealthMax() * 0.25 or \n                -- TTD \n                Unit(\"player\"):TimeToDieX(25) < 5 or \n                (\n                    A.IsInPvP and \n                    (\n                        Unit(\"player\"):UseDeff() or \n                        (\n                            Unit(\"player\", 5):HasFlags() and \n                            Unit(\"player\"):GetRealTimeDMG() > 0 and \n                            Unit(\"player\"):IsFocused() \n                        )\n                    )\n                )\n            ) and \n            Unit(\"player\"):HasBuffs(\"DeffBuffs\", true) == 0\n        ) or \n        (    -- Custom\n            AbyssalHealingPotion < 100 and \n            Unit(\"player\"):HealthPercent() <= AbyssalHealingPotion\n        )\n    ) \n    then \n        return A.AbyssalHealingPotion\n    end  \n    \n    -- AstralShift\n    local AstralShift = A.GetToggle(2, \"AstralShiftHP\")\n    if     AstralShift >= 0 and A.AstralShift:IsReady(\"player\") and \n    (\n        (     -- Auto \n            AstralShift >= 100 and \n            (\n                -- HP lose per sec >= 20\n                Unit(\"player\"):GetDMG() * 100 / Unit(\"player\"):HealthMax() >= 20 or \n                Unit(\"player\"):GetRealTimeDMG() >= Unit(\"player\"):HealthMax() * 0.20 or \n                -- TTD \n                Unit(\"player\"):TimeToDieX(25) < 5 or \n                (\n                    A.IsInPvP and \n                    (\n                        Unit(\"player\"):UseDeff() or \n                        (\n                            Unit(\"player\", 5):HasFlags() and \n                            Unit(\"player\"):GetRealTimeDMG() > 0 and \n                            Unit(\"player\"):IsFocused() \n                        )\n                    )\n                )\n            ) and \n            Unit(\"player\"):HasBuffs(\"DeffBuffs\", true) == 0\n        ) or \n        (    -- Custom\n            AstralShift < 100 and \n            Unit(\"player\"):HealthPercent() <= AstralShift\n        )\n    ) \n    then \n        return A.AstralShift\n    end     \n    -- Stoneform on self dispel (only PvE)\n    if A.Stoneform:IsRacialReady(\"player\", true) and not A.IsInPvP and A.AuraIsValid(\"player\", \"UseDispel\", \"Dispel\") then \n        return A.Stoneform\n    end \nend \nSelfDefensives = A.MakeFunctionCachedStatic(SelfDefensives)\n\n-- Non GCD spell check\nlocal function countInterruptGCD(unit)\n    if not A.WindShear:IsReadyByPassCastGCD(unit) or not A.WindShear:AbsentImun(unit, Temp.TotalAndMagKick) then\n        return true\n    end\nend\n\n-- Interrupts spells\nlocal function Interrupts(unit)\n    if A.GetToggle(2, \"TasteInterruptList\") and (IsInRaid() or A.InstanceInfo.KeyStone > 1) then\n        useKick, useCC, useRacial, notInterruptable, castRemainsTime, castDoneTime = Action.InterruptIsValid(unit, \"TasteBFAContent\", true, countInterruptGCD(unit))\n    else\n        useKick, useCC, useRacial, notInterruptable, castRemainsTime, castDoneTime = Action.InterruptIsValid(unit, nil, nil, countInterruptGCD(unit))\n    end\n    \n    if castRemainsTime >= A.GetLatency() then\n        -- WindShear\n        if useKick and A.WindShear:IsReady(unit) then \n            -- Notification                    \n            Action.SendNotification(\"Wind Shear interrupting on \" .. unit, A.WindShear.ID)\n            return A.WindShear\n        end \n        \n        -- CapacitorTotem\n        if useCC and Action.GetToggle(2, \"UseCapacitorTotem\") and A.WindShear:GetCooldown() > 0 and A.CapacitorTotem:IsReady(player) then \n            -- Notification                    \n            Action.SendNotification(\"Capacitor Totem interrupting\", A.CapacitorTotem.ID)\n            return A.CapacitorTotem\n        end  \n        \n        -- Hex    \n        if useCC and A.Hex:IsReady(unit) and A.Hex:AbsentImun(unit, Temp.TotalAndCC, true) and Unit(unit):IsControlAble(\"incapacitate\", 0) then \n            -- Notification                    \n            Action.SendNotification(\"Hex interrupting\", A.Hex.ID)\n            return A.Hex              \n        end  \n        \n        if useRacial and A.QuakingPalm:AutoRacial(unit) then \n            return A.QuakingPalm\n        end \n        \n        if useRacial and A.Haymaker:AutoRacial(unit) then \n            return A.Haymaker\n        end \n        \n        if useRacial and A.WarStomp:AutoRacial(unit) then \n            return A.WarStomp\n        end \n        \n        if useRacial and A.BullRush:AutoRacial(unit) then \n            return A.BullRush\n        end \n    end\nend\n\n--- ======= ACTION LISTS =======\n-- [3] Single Rotation\nA[3] = function(icon, isMulti)\n    --------------------\n    --- ROTATION VAR ---\n    --------------------\n    local isMoving = Player:IsMoving()\n    local inCombat = Unit(\"player\"):CombatTime() > 0\n    local ShouldStop = Action.ShouldStop()\n    local Pull = Action.BossMods:GetPullTimer()\n    local MaelstromPower = Player:Maelstrom()\n    -- Trinkets vars\n    local Trinket1IsAllowed, Trinket2IsAllowed = TR:TrinketIsAllowed()\n    local TrinketsAoE = GetToggle(2, \"TrinketsAoE\")\n    --local TrinketASAP = GetToggle(2, \"TrinketASAP\")\n    local TrinketsMinTTD = GetToggle(2, \"TrinketsMinTTD\")\n    local TrinketsUnitsRange = GetToggle(2, \"TrinketsUnitsRange\")\n    local TrinketsMinUnits = GetToggle(2, \"TrinketsMinUnits\")\n    ------------------------------------------------------\n    ---------------- ENEMY UNIT ROTATION -----------------\n    ------------------------------------------------------\n    local function EnemyRotation(unit)\n        \n        -- Interrupt\n        local Interrupt = Interrupts(unit)\n        if Interrupt then \n            return Interrupt:Show(icon)\n        end    \n        \n        -- Lightning Shield\n        if Unit(\"player\"):HasBuffs(A.LightningShield.ID, true) == 0 then\n            return A.LightningShield:Show(icon)\n        end            \n        \n        --actions+=/flame_shock,if=!ticking\n        if A.FlameShock:IsReady(unit) and Unit(\"target\"):HasDeBuffs(A.FlameShockDebuff.ID, true) == 0 and Unit(\"target\"):TimeToDie() >= 15 then\n            return A.FlameShock:Show(icon)\n        end\n        \n        --Static Discharge for whatever reason...\n        if A.StaticDischarge:IsReady(unit) then\n            return A.StaticDischarge:Show(icon)\n        end\n        \n        --actions+=/fire_elemental\n        if BurstIsON and A.FireElemental:IsReady(unit) then \n            return A.FireElemental:Show(icon)\n        end\n        \n        --actions+=/storm_elemental\n        if BurstIsON and A.StormElemental:IsReady(unit) then\n            return A.StormElemental:Show(icon)\n        end\n        \n        -- Non SIMC Custom Trinket1\n        if A.Trinket1:IsReady(unit) and Trinket1IsAllowed and CanCast and    \n        (\n            TrinketsAoE and GetByRange(TrinketsMinUnits, TrinketsUnitsRange) and Player:AreaTTD(TrinketsUnitsRange) > TrinketsMinTTD\n            or\n            not TrinketsAoE and Unit(unit):TimeToDie() >= TrinketsMinTTD                     \n        )\n        then \n            return A.Trinket1:Show(icon)\n        end         \n        \n        \n        -- Non SIMC Custom Trinket2\n        if A.Trinket2:IsReady(unit) and Trinket2IsAllowed and CanCast and        \n        (\n            TrinketsAoE and GetByRange(TrinketsMinUnits, TrinketsUnitsRange) and Player:AreaTTD(TrinketsUnitsRange) > TrinketsMinTTD\n            or\n            not TrinketsAoE and Unit(unit):TimeToDie() >= TrinketsMinTTD                     \n        )\n        then\n            return A.Trinket2:Show(icon)     \n        end\n        \n        --actions+=/blood_fury,if=!talent.ascendance.enabled|buff.ascendance.up|cooldown.ascendance.remains>50\n        if A.BloodFury:IsReady(unit) and BurstIsON and AutoRacial and (not A.Ascendance:IsSpellLearned() or Unit(\"player\"):HasBuffs(A.AscendanceBuff.ID) > 0 or A.Ascendance:GetCooldown() > 50) then\n            return A.BloodFury:Show(icon)\n        end\n        \n        --actions+=/berserking,if=!talent.ascendance.enabled|buff.ascendance.up\n        if A.Berserking:IsReady(unit) and BurstIsON and AutoRacial and (not A.Ascendance:IsSpellLearned() or Unit(\"player\"):HasBuffs(A.AscendanceBuff.ID) > 0) then\n            return A.Berserking:Show(icon)\n        end        \n        \n        --actions+=/fireblood,if=!talent.ascendance.enabled|buff.ascendance.up|cooldown.ascendance.remains>50\n        if A.Fireblood:IsReady(unit) and BurstIsON and AutoRacial and (not A.Ascendance:IsSpellLearned() or Unit(\"player\"):HasBuffs(A.AscendanceBuff.ID) > 0 or A.Ascendance:GetCooldown() > 50) then\n            return A.Fireblood:Show(icon)\n        end                \n        \n        --actions+=/ancestral_call,if=!talent.ascendance.enabled|buff.ascendance.up|cooldown.ascendance.remains>50\n        if A.AncestralCall:IsReady(unit) and BurstIsON and AutoRacial and (not A.Ascendance:IsSpellLearned() or Unit(\"player\"):HasBuffs(A.AscendanceBuff.ID) > 0 or A.Ascendance:GetCooldown() > 50) then\n            return A.AncestralCall:Show(icon)\n        end            \n        \n        --actions+=/bag_of_tricks,if=!talent.ascendance.enabled|!buff.ascendance.up\n        if A.BagofTricks:IsReady(unit) and BurstIsON and AutoRacial and (not A.Ascendance:IsSpellLearned() or Unit(\"player\"):HasBuffs(A.AscendanceBuff.ID) == 0) then\n            return A.BagofTricks:Show(icon)\n        end    \n        \n        --[[actions+=/primordial_wave,if=covenant.necrolord\n        if A.PrimordialWave:IsReady() then\n            return A.PrimordialWave:Show(icon)\n        end\n        \n        --actions+=/vesper_totem,if=covenant.kyrian\n        if A.VesperTotem:IsReady() then\n            return A.VesperTotem:Show(icon)\n        end        \n        \n        --actions+=/chain_harvest,if=covenant.venthyr\n        if A.ChainHarvest:IsReady() then\n            return A.ChainHarvest:Show(icon)\n        end        \n        \n        --actions+=/fae_transfusion,if=covenant.night_fae\n        if A.FaeTransfusion:IsReady() then\n            return A.FaeTransfusion:Show(icon)\n        end        ]]\n        \n        --[[actions+=/run_action_list,name=single_target,if=active_enemies<=2\n        if MultiUnits:GetActiveEnemies() <= 2 then\n            return SingleRotation()\n        end]]        \n        \n        local function AoERotation(unit)\n            \n            --actions.aoe=stormkeeper,if=talent.stormkeeper.enabled\n            if A.Stormkeeper:IsReady(unit) then\n                return A.Stormkeeper:Show(icon)\n            end\n            \n            --actions.aoe+=/flame_shock,target_if=refreshable\n            if A.FlameShock:IsReady(unit) and (Unit(\"target\"):HasDeBuffs(A.FlameShockDebuff.ID, true) == 0 or Unit(\"target\"):HasDeBuffs(A.FlameShockDebuff.ID, true) < 4) and Unit(\"target\"):TimeToDie() >= 15 then\n                return A.FlameShock:Show(icon)\n            end\n            \n            --actions.aoe+=/liquid_magma_totem,if=talent.liquid_magma_totem.enabled\n            if A.LiquidMagmaTotem:IsReady(unit) then\n                return A.LiquidMagmaTotem:Show(icon)\n            end\n            \n            --actions.aoe+=/lava_burst,if=talent.master_of_the_elements.enabled&maelstrom>=50&buff.lava_surge.up\n            if A.LavaBurst:IsReady(unit) and A.MasteroftheElements:IsSpellLearned() and Player:Maelstrom() >= 50 and Unit(\"player\"):HasBuffs(A.LavaSurgeBuff.ID, true) > 0 then\n                return A.LavaBurst:Show(icon)\n            end\n            \n            --actions.aoe+=/echoing_shock,if=talent.echoing_shock.enabled\n            if A.EchoingShock:IsReady(unit) then\n                return A.EchoingShock:Show(icon)\n            end    \n            \n            --actions.aoe+=/earthquake\n            if A.Earthquake:IsReady(unit) then\n                return A.Earthquake:Show(icon)\n            end\n            \n            --actions.aoe+=/chain_lightning\n            if A.ChainLightning:IsReady(unit) or A.LavaBeam:IsReady(unit) then\n                return A.ChainLightning:Show(icon)\n            end    \n        end\n        \n        local function SingleRotation(unit)\n            \n            --actions.single_target=flame_shock,target_if=refreshable\n            if A.FlameShock:IsReady(unit) and (Unit(\"target\"):HasDeBuffs(A.FlameShockDebuff.ID, true) == 0 or Unit(\"target\"):HasDeBuffs(A.FlameShockDebuff.ID, true) < 4) and Unit(\"target\"):TimeToDie() >= 15 then\n                return A.FlameShock:Show(icon)\n            end\n            \n            --actions.single_target+=/elemental_blast,if=talent.elemental_blast.enabled\n            if A.ElementalBlast:IsReady(unit) then\n                return A.ElementalBlast:Show(icon)\n            end    \n            \n            --actions.single_target+=/stormkeeper,if=talent.stormkeeper.enabled\n            if A.Stormkeeper:IsReady(unit) then\n                return A.Stormkeeper:Show(icon)\n            end                \n            \n            --actions.single_target+=/liquid_magma_totem,if=talent.liquid_magma_totem.enabled\n            if A.LiquidMagmaTotem:IsReady(unit) then\n                return A.LiquidMagmaTotem:Show(icon)\n            end                \n            \n            --actions.single_target+=/echoing_shock,if=talent.echoing_shock.enabled\n            if A.EchoingShock:IsReady(unit) then\n                return A.EchoingShock:Show(icon)\n            end                    \n            \n            --actions.single_target+=/ascendance,if=talent.ascendance.enabled\n            if A.Ascendance:IsReady(unit) and BurstIsON then\n                return A.Ascendance:Show(icon)\n            end    \n            \n            --actions.single_target+=/lava_burst,if=cooldown_react\n            if A.LavaBurst:IsReady(unit) then\n                return A.LavaBurst:Show(icon)\n            end    \n            \n            --actions.single_target+=/earthquake,if=(spell_targets.chain_lightning>1&!runeforge.echoes_of_great_sundering.equipped|buff.echoes_of_great_sundering.up)\n            --SL legendary condition\n            \n            --actions.single_target+=/earth_shock\n            if A.EarthShock:IsReady(unit) then\n                return A.EarthShock:Show(icon)\n            end    \n            \n            --actions.single_target+=/lightning_lasso\n            if A.LightningLasso:IsReady(unit) then\n                return A.LightningLasso:Show(icon)\n            end    \n            \n            --actions.single_target+=/frost_shock,if=talent.icefury.enabled&buff.icefury.up\n            if A.FrostShock:IsReady(unit) and Unit(\"player\"):HasBuffs(A.IcefuryBuff.ID, true) > 0 then\n                return A.FrostShock:Show(icon)\n            end    \n            \n            --actions.single_target+=/icefury,if=talent.icefury.enabled\n            if A.Icefury:IsReady(unit) then\n                return A.Icefury:Show(icon)\n            end    \n            \n            --actions.single_target+=/lightning_bolt\n            if A.LightningBolt:IsReady(unit) then\n                return A.LightningBolt:Show(icon)\n            end\n            \n        end\n        \n        local function MovingRotation(unit)\n            \n            --actions.single_target+=/flame_shock,moving=1,target_if=refreshable\n            if A.FlameShock:IsReady(unit) and (Unit(\"target\"):HasDeBuffs(A.FlameShockDebuff.ID, true) == 0 or Unit(\"target\"):HasDeBuffs(A.FlameShockDebuff.ID, true) < 4) and Unit(\"target\"):TimeToDie() >= 15 then\n                return A.FlameShock:Show(icon)\n            end                \n            \n            --actions.single_target+=/frost_shock,moving=1            \n            if A.FrostShock:IsReady(unit) then\n                return A.FrostShock:Show(icon)\n            end    \n            \n        end\n        \n        --[[call precombat\n        if not inCombat and Unit(unit):IsExists() then \n            local ShouldReturn = Precombat(unit); if ShouldReturn then return ShouldReturn; end\n        end]]\n        \n        --moving check\n        if isMoving then\n            return MovingRotation()\n        end    \n        \n        --actions+=/run_action_list,name=aoe,if=active_enemies>2&(spell_targets.chain_lightning>2|spell_targets.lava_beam>2)\n        if MultiUnits:GetActiveEnemies() > 2 then\n            return AoERotation()\n        else\n            return SingleRotation()\n        end        \n        \n        -- In Combat\n        if inCombat and Unit(unit):IsExists() then\n            \n            -- Interrupt Handler          \n            local unit = \"target\"\n            local useKick, useCC, useRacial = Action.InterruptIsValid(unit, \"TargetMouseover\")    \n            local Trinket1IsAllowed, Trinket2IsAllowed = TR.TrinketIsAllowed()\n            \n            -- WindShear\n            if useKick and A.WindShear:IsReady(unit) and not ShouldStop then \n                if Unit(unit):CanInterrupt(true, nil, 25, 70) then\n                    return A.WindShear:Show(icon)\n                end \n            end    \n            \n        end\n        \n    end\n    \n    -- End on EnemyRotation()\n    \n    -- Mouseover DPS Rotation\n    -- Only handling mouseover multidots and dots refreshable\n    local function MouseoverRotation(unit)\n        \n        -- Variables\n        inRange = A.ChainLightning:IsInRange(unit)\n        \n        -- Note: Toggles  (\"UseDispel\", \"UsePurge\", \"UseExpelEnrage\")\n        -- Category (\"Dispel\", \"MagicMovement\", \"PurgeFriendly\", \"PurgeHigh\", \"PurgeLow\", \"Enrage\")\n        -- Purge\n        if A.Purge:IsReady(unit) and Action.GetToggle(2, \"mouseover\") and not ShouldStop and Action.AuraIsValid(unit, \"UsePurge\", \"PurgeHigh\") then\n            return A.Purge:Show(icon)\n        end    \n        \n        -- WindShear\n        if useKick and A.WindShear:IsReady(unit) and not ShouldStop then \n            if Unit(unit):CanInterrupt(true, nil, 25, 70) then\n                return A.WindShear:Show(icon)\n            end \n        end                   \n        \n    end\n    \n    -- FriendlyTeam Rotation\n    -- Only handling mouseover multidots and dots refreshable\n    local function FriendlyRotation()\n        -- AncestralGuidance\n        local AncestralGuidance = A.GetToggle(2, \"AncestralGuidanceHP\")\n        if HandleAncestralGuidance() and\n        AncestralGuidance >= 0 and A.AncestralGuidance:IsReady(\"player\") and \n        (\n            (    -- Auto \n                AncestralGuidance >= 100 and \n                (\n                    A.HealingEngine.GetIncomingDMGAVG() >= 35\n                )\n            ) or \n            (    -- Custom\n                AncestralGuidance < 100 and \n                -- HP lose per sec >= 40\n                A.HealingEngine.GetIncomingDMGAVG() >= AncestralGuidance\n            )\n        ) \n        then \n            return A.AncestralGuidance\n        end    \n    end\n    \n    -- Friendly Rotation\n    if FriendlyRotation() then\n        return true\n    end\n    \n    -- Defensive\n    local SelfDefensive = SelfDefensives()\n    if SelfDefensive then \n        return SelfDefensive:Show(icon)\n    end \n    \n    -- Mouseover\n    if A.IsUnitEnemy(\"mouseover\") then\n        unit = \"mouseover\"\n        if EnemyRotation(unit) then \n            return true \n        end \n    end \n    \n    -- Target  \n    if A.IsUnitEnemy(\"target\") then \n        unit = \"target\"\n        if EnemyRotation(unit) then \n            return true\n        end \n        \n    end\nend\n-- Finished\n\n-- [4] AoE Rotation\nA[4] = function(icon)\n    return A[3](icon, true)\nend\n-- [5] Trinket Rotation\n-- No specialization trinket actions \n-- Passive \n--[[\nlocal function FreezingTrapUsedByEnemy()\n    if     UnitCooldown:GetCooldown(\"arena\", 3355) > UnitCooldown:GetMaxDuration(\"arena\", 3355) - 2 and\n    UnitCooldown:IsSpellInFly(\"arena\", 3355) and \n    Unit(\"player\"):GetDR(\"incapacitate\") >= 50 \n    then \n        local Caster = UnitCooldown:GetUnitID(\"arena\", 3355)\n        if Caster and Unit(Caster):GetRange() <= 40 then \n            return true \n        end \n    end \nend \nlocal function ArenaRotation(icon, unit)\n    if A.IsInPvP and (A.Zone == \"pvp\" or A.Zone == \"arena\") and not Player:IsStealthed() and not Player:IsMounted() then\n        -- Note: \"arena1\" is just identification of meta 6\n        if (unit == \"arena1\" or unit == \"arena2\" or unit == \"arena3\") then \n            -- Interrupt\n               local Interrupt = Interrupts(unit)\n              if Interrupt then \n                  return Interrupt:Show(icon)\n              end    \n        end\n    end \nend \nlocal function PartyRotation(unit)\n    if (unit == \"party1\" and not Action.GetToggle(2, \"PartyUnits\")[1]) or (unit == \"party2\" and not Action.GetToggle(2, \"PartyUnits\")[2]) then \n        return false \n    end\n\n      -- CleanseSpirit\n    if A.CleanseSpirit:IsReady(unit) and A.CleanseSpirit:AbsentImun(unit, Temp.TotalAndMag) and Action.AuraIsValid(unit, \"UseDispel\", \"Magic\") and not Unit(unit):InLOS() then\n        return A.CleanseSpirit\n    end\nend \n\nA[6] = function(icon)\n    return ArenaRotation(icon, \"arena1\")\nend\n\nA[7] = function(icon)\n    local Party = PartyRotation(\"party1\") \n    if Party then \n        return Party:Show(icon)\n    end \n    return ArenaRotation(icon, \"arena2\")\nend\n\nA[8] = function(icon)\n    local Party = PartyRotation(\"party2\") \n    if Party then \n        return Party:Show(icon)\n    end     \n    return ArenaRotation(icon, \"arena3\")\nend]]--",
				}, -- [2]
				{
					["Order"] = 2,
					["Name"] = "RESTORATION",
					["Code"] = "--#####################################\n--##### TRIP'S RESTORATION SHAMAN #####\n--#####################################\n\n--Full credit to Taste\n\nlocal _G, setmetatable                            = _G, setmetatable\nlocal TMW                                       = TMW\nlocal CNDT                                      = TMW.CNDT\nlocal Env                                       = CNDT.Env\nlocal A                                         = _G.Action\nlocal Listener                                  = Action.Listener\nlocal Create                                    = Action.Create\nlocal GetSpellInfo                              = Action.GetSpellInfo\nlocal GetToggle                                 = Action.GetToggle\nlocal GetGCD                                    = Action.GetGCD\nlocal GetCurrentGCD                             = Action.GetCurrentGCD\nlocal ShouldStop                                = Action.ShouldStop\nlocal AuraIsValid                               = Action.AuraIsValid\nlocal InterruptIsValid                          = Action.InterruptIsValid\nlocal BurstIsON                                 = Action.BurstIsON\nlocal BossMods_Pulling                          = Action.BossMods_Pulling\nlocal TeamCache                                 = Action.TeamCache\nlocal EnemyTeam                                 = Action.EnemyTeam\nlocal FriendlyTeam                              = Action.FriendlyTeam\nlocal HealingEngine                             = Action.HealingEngine\nlocal LoC                                       = Action.LossOfControl\nlocal Player                                    = Action.Player \nlocal MultiUnits                                = Action.MultiUnits\nlocal UnitCooldown                              = Action.UnitCooldown\nlocal Unit                                      = Action.Unit \nlocal IsUnitEnemy                               = Action.IsUnitEnemy \nlocal IsUnitFriendly                            = Action.IsUnitFriendly \nlocal TeamCacheFriendly                         = TeamCache.Friendly\nlocal HealingEngineMembersALL                   = HealingEngine.GetMembersAll() -- function call!\nlocal HealingEngineGetMinimumUnits              = HealingEngine.GetMinimumUnits\nlocal HealingEngineGetIncomingDMGAVG            = HealingEngine.GetIncomingDMGAVG\nlocal HealingEngineGetIncomingHPSAVG            = HealingEngine.GetIncomingHPSAVG\nlocal TeamCacheFriendlyIndexToPLAYERs           = TeamCacheFriendly.IndexToPLAYERs\nlocal select, math                              = select, math \nlocal ACTION_CONST_STOPCAST                     = _G.ACTION_CONST_STOPCAST\nlocal ACTION_CONST_SPELLID_FREEZING_TRAP        = _G.ACTION_CONST_SPELLID_FREEZING_TRAP\nlocal TR                                        = Action.TasteRotation\nlocal Pet                                       = LibStub(\"PetLibrary\")\nlocal next, pairs, type, print                  = next, pairs, type, print \nlocal math_floor                                = math.floor\nlocal math_ceil                                 = math.ceil\nlocal tinsert                                   = table.insert \nlocal select, unpack, table                     = select, unpack, table \nlocal CombatLogGetCurrentEventInfo              = _G.CombatLogGetCurrentEventInfo\nlocal UnitGUID, UnitIsUnit, UnitDamage, UnitAttackSpeed, UnitAttackPower = UnitGUID, UnitIsUnit, UnitDamage, UnitAttackSpeed, UnitAttackPower\nlocal _G, setmetatable, select, math            = _G, setmetatable, select, math \nlocal huge                                      = math.huge  \nlocal UIParent                                  = _G.UIParent \nlocal CreateFrame                               = _G.CreateFrame\nlocal wipe                                      = _G.wipe\nlocal IsUsableSpell                             = IsUsableSpell\nlocal UnitPowerType                             = UnitPowerType \n\n\n-- Spells\nAction[ACTION_CONST_SHAMAN_RESTORATION] = {\n    -- Racial\n    ArcaneTorrent                          = Action.Create({ Type = \"Spell\", ID = 50613     }),\n    BloodFury                              = Action.Create({ Type = \"Spell\", ID = 20572      }),\n    Fireblood                              = Action.Create({ Type = \"Spell\", ID = 265221     }),\n    AncestralCall                          = Action.Create({ Type = \"Spell\", ID = 274738     }),\n    Berserking                             = Action.Create({ Type = \"Spell\", ID = 26297    }),\n    ArcanePulse                            = Action.Create({ Type = \"Spell\", ID = 260364    }),\n    QuakingPalm                            = Action.Create({ Type = \"Spell\", ID = 107079     }),\n    Haymaker                               = Action.Create({ Type = \"Spell\", ID = 287712     }), \n    WarStomp                               = Action.Create({ Type = \"Spell\", ID = 20549     }),\n    BullRush                               = Action.Create({ Type = \"Spell\", ID = 255654     }),  \n    GiftofNaaru                            = Action.Create({ Type = \"Spell\", ID = 59544    }),\n    Shadowmeld                             = Action.Create({ Type = \"Spell\", ID = 58984    }), -- usable in Action Core \n    Stoneform                              = Action.Create({ Type = \"Spell\", ID = 20594    }), \n    WilloftheForsaken                      = Action.Create({ Type = \"Spell\", ID = 7744        }), -- not usable in APL but user can Queue it   \n    EscapeArtist                           = Action.Create({ Type = \"Spell\", ID = 20589    }), -- not usable in APL but user can Queue it\n    EveryManforHimself                     = Action.Create({ Type = \"Spell\", ID = 59752    }), -- not usable in APL but user can Queue it\n    -- Main Spells\n    Riptide                                = Action.Create({ Type = \"Spell\", ID = 61295, predictName = \"Riptide\"   }),\n    HealingSurge                           = Action.Create({ Type = \"Spell\", ID = 8004, predictName = \"HealingSurge\"   }),\n    HealingWave                            = Action.Create({ Type = \"Spell\", ID = 77472, predictName = \"HealingWave\"   }),    \n    ChainHeal                              = Action.Create({ Type = \"Spell\", ID = 1064, predictName = \"ChainHeal\"   }),\n    HealingRain                            = Action.Create({ Type = \"Spell\", ID = 73920, predictName = \"HealingRain\"   }),\n    HealingStreamTotem                     = Action.Create({ Type = \"Spell\", ID = 5394, predictName = \"HealingStreamTotem\"   }),\n    EarthShield                            = Action.Create({ Type = \"Spell\", ID = 974, predictName = \"EarthShield\"     }),\n    WaterShield                               = Action.Create({ Type = \"Spell\", ID = 52127, }),\n    TidalWaveBuff                          = Action.Create({ Type = \"Spell\", ID = 53390, Hidden = true   }),\n    FlashFloodBuff                         = Action.Create({ Type = \"Spell\", ID = 280615, Hidden = true   }),\n    -- Offensive Abilities\n    FlameShock                             = Action.Create({ Type = \"Spell\", ID = 188389   }),\n    FlameShockDebuff                       = Action.Create({ Type = \"Spell\", ID = 188389, Hidden = true   }),\n    LavaBurst                              = Action.Create({ Type = \"Spell\", ID = 51505   }),\n    LightningBolt                          = Action.Create({ Type = \"Spell\", ID = 188196   }),\n    ChainLightning                         = Action.Create({ Type = \"Spell\", ID = 188443   }),\n    -- Cooldowns\n    HealingTideTotem                       = Action.Create({ Type = \"Spell\", ID = 108280  , predictName = \"HealingTideTotem\" }),\n    SpiritLinkTotem                        = Action.Create({ Type = \"Spell\", ID = 98008   }),\n    SpiritWalkersGrace                     = Action.Create({ Type = \"Spell\", ID = 79206   }),\n    UnleashLife                            = Action.Create({ Type = \"Spell\", ID = 73685, predictName = \"UnleashLife\"   }), -- Increase next direct heal by 35%\n    Ascendance                             = Action.Create({ Type = \"Spell\", ID = 114052   }),\n    -- Totems\n    CloudburstTotem                        = Action.Create({ Type = \"Spell\", ID = 157153   }), -- Talent, replace HealingStreamTotem\n    AncestralProtectionTotem               = Action.Create({ Type = \"Spell\", ID = 207399   }), -- Incoming death on critical unit\n    WindRushTotem                          = Action.Create({ Type = \"Spell\", ID = 192077   }), -- Speed\n    EarthgrabTotem                         = Action.Create({ Type = \"Spell\", ID = 51485   }), -- Rooted\n    EarthenWallTotem                       = Action.Create({ Type = \"Spell\", ID = 198838   }), -- Shield phys\n    EarthbindTotem                         = Action.Create({ Type = \"Spell\", ID = 2484   }), -- Slow\n    CapacitorTotem                         = Action.Create({ Type = \"Spell\", ID = 192058   }), -- Stun\n    TremorTotem                            = Action.Create({ Type = \"Spell\", ID = 8143   }), -- Antifear, charm, sleep\n    SkyfuryTotem                           = Action.Create({ Type = \"Spell\", ID = 204330   }), -- Burst\n    -- Talents\n    HighTide                               = Action.Create({ Type = \"Spell\", ID = 157154, Hidden = true     }),\n    EchooftheElements                      = Action.Create({ Type = \"Spell\", ID = 108283, Hidden = true     }),\n    AncestralVigor                         = Action.Create({ Type = \"Spell\", ID = 207401, Hidden = true     }),\n    FlashFlood                             = Action.Create({ Type = \"Spell\", ID = 280614, Hidden = true     }),\n    Torrent                                = Action.Create({ Type = \"Spell\", ID = 200072, Hidden = true     }),\n    Undulation                             = Action.Create({ Type = \"Spell\", ID = 200071     }),\n    SpiritWolf                             = Action.Create({ Type = \"Spell\", ID = 260878     }),\n    Wellspring                             = Action.Create({ Type = \"Spell\", ID = 197995     }),\n    Downpour                               = Action.Create({ Type = \"Spell\", ID = 207778     }),\n    -- Defensives\n    AstralShift                            = Action.Create({ Type = \"Spell\", ID = 108271   }),\n    -- Utilities\n    AncestralSpirit                        = Action.Create({ Type = \"Spell\", ID = 2008   }),\n    AncestralVision                        = Action.Create({ Type = \"Spell\", ID = 212048   }),\n    AstralRecall                           = Action.Create({ Type = \"Spell\", ID = 556   }),\n    FarSight                               = Action.Create({ Type = \"Spell\", ID = 6196   }),\n    GhostWolf                              = Action.Create({ Type = \"Spell\", ID = 2645   }),\n    Bloodlust                              = Action.Create({ Type = \"Spell\", ID = 2825   }),\n    Heroism                                = Action.Create({ Type = \"Spell\", ID = 32182   }),\n    Hex                                    = Action.Create({ Type = \"Spell\", ID = 51514   }),\n    HexGreen                               = Action.Create({ Type = \"SpellSingleColor\", ID = 51514, Color = \"GREEN\", Desc = \"[1] CC\", Hidden = true,  QueueForbidden = true }),\n    Purge                                  = Action.Create({ Type = \"Spell\", ID = 370   }),\n    PurifySpirit                           = Action.Create({ Type = \"Spell\", ID = 77130   }),\n    WaterWalking                           = Action.Create({ Type = \"Spell\", ID = 546   }),    \n    WindShear                              = Action.Create({ Type = \"Spell\", ID = 57994   }),\n    WindShearAntiFake                      = Action.Create({ Type = \"Spell\", ID = 57994, Desc = \"[2] Kick\", QueueForbidden = true    }),\n    EarthElemental                         = Action.Create({ Type = \"Spell\", ID = 198103   }),\n    LavaSurge                              = Action.Create({ Type = \"Spell\", ID = 77762  }),\n    -- PvP\n    SpiritLink                             = Action.Create({ Type = \"Spell\", ID = 204293   }),\n    Tidebringer                            = Action.Create({ Type = \"Spell\", ID = 236501   }),\n    SpectralRecovery                       = Action.Create({ Type = \"Spell\", ID = 204261   }),\n    CleansingWaters                        = Action.Create({ Type = \"Spell\", ID = 290250   }),\n    AncestralGift                          = Action.Create({ Type = \"Spell\", ID = 290254, Hidden = true}), -- PvP Talent - Silence and interrupt immune\n    SwellingWaves                          = Action.Create({ Type = \"Spell\", ID = 204264   }),\n    VoodooMastery                          = Action.Create({ Type = \"Spell\", ID = 204268   }),\n    Electrocute                            = Action.Create({ Type = \"Spell\", ID = 206642   }),    \n    -- Potions\n    PotionofUnbridledFury                  = Action.Create({ Type = \"Potion\", ID = 169299, Hidden = true,  QueueForbidden = true }), \n    BattlePotionOfAgility                  = Action.Create({ Type = \"Potion\", ID = 163223, Hidden = true,  QueueForbidden = true }), \n    SuperiorBattlePotionOfAgility          = Action.Create({ Type = \"Potion\", ID = 168489, Hidden = true,  QueueForbidden = true }), \n    SuperiorSteelskinPotion                = Action.Create({ Type = \"Potion\", ID = 168501, Hidden = true,  QueueForbidden = true }), \n    AbyssalHealingPotion                   = Action.Create({ Type = \"Potion\", ID = 169451, Hidden = true,  QueueForbidden = true }), \n    PotionTest                             = Action.Create({ Type = \"Potion\", ID = 142117, Hidden = true,  QueueForbidden = true }), \n    -- Trinkets\n    GenericTrinket1                        = Action.Create({ Type = \"Trinket\", ID = 114616, Hidden = true,  QueueForbidden = true }),\n    GenericTrinket2                        = Action.Create({ Type = \"Trinket\", ID = 114081, Hidden = true,  QueueForbidden = true }),\n    TrinketTest                            = Action.Create({ Type = \"Trinket\", ID = 122530, Hidden = true,  QueueForbidden = true }),\n    TrinketTest2                           = Action.Create({ Type = \"Trinket\", ID = 159611, Hidden = true,  QueueForbidden = true }), \n    AzsharasFontofPower                    = Action.Create({ Type = \"Trinket\", ID = 169314, Hidden = true,  QueueForbidden = true }),\n    PocketsizedComputationDevice           = Action.Create({ Type = \"Trinket\", ID = 167555, Hidden = true,  QueueForbidden = true }),\n    RotcrustedVoodooDoll                   = Action.Create({ Type = \"Trinket\", ID = 159624, Hidden = true,  QueueForbidden = true }),\n    ShiverVenomRelic                       = Action.Create({ Type = \"Trinket\", ID = 168905, Hidden = true,  QueueForbidden = true }),\n    AquipotentNautilus                     = Action.Create({ Type = \"Trinket\", ID = 169305, Hidden = true,  QueueForbidden = true }),\n    TidestormCodex                         = Action.Create({ Type = \"Trinket\", ID = 165576, Hidden = true,  QueueForbidden = true }),\n    VialofStorms                           = Action.Create({ Type = \"Trinket\", ID = 158224, Hidden = true,  QueueForbidden = true }),\n    GalecallersBoon                        = Action.Create({ Type = \"Trinket\", ID = 159614, Hidden = true,  QueueForbidden = true }),\n    InvocationOfYulon                      = Action.Create({ Type = \"Trinket\", ID = 165568, Hidden = true,  QueueForbidden = true }),\n    LustrousGoldenPlumage                  = Action.Create({ Type = \"Trinket\", ID = 159617, Hidden = true,  QueueForbidden = true }),\n    ComputationDevice                      = Action.Create({ Type = \"Trinket\", ID = 167555, Hidden = true,  QueueForbidden = true }),\n    VigorTrinket                           = Action.Create({ Type = \"Trinket\", ID = 165572, Hidden = true,  QueueForbidden = true }),\n    FontOfPower                            = Action.Create({ Type = \"Trinket\", ID = 169314, Hidden = true,  QueueForbidden = true }),\n    RazorCoral                             = Action.Create({ Type = \"Trinket\", ID = 169311, Hidden = true,  QueueForbidden = true }),\n    AshvanesRazorCoral                     = Action.Create({ Type = \"Trinket\", ID = 169311, Hidden = true,  QueueForbidden = true }),\n    -- Misc\n    Channeling                             = Action.Create({ Type = \"Spell\", ID = 209274, Hidden = true     }),    -- Show an icon during channeling\n    TargetEnemy                            = Action.Create({ Type = \"Spell\", ID = 44603, Hidden = true     }),    -- Change Target (Tab button)\n    StopCast                               = Action.Create({ Type = \"Spell\", ID = 61721, Hidden = true     }),        -- spell_magic_polymorphrabbit\n    CyclotronicBlast                       = Action.Create({ Type = \"Spell\", ID = 293491, Hidden = true}),\n    ConcentratedFlameBurn                  = Action.Create({ Type = \"Spell\", ID = 295368, Hidden = true}),\n    RazorCoralDebuff                       = Action.Create({ Type = \"Spell\", ID = 303568, Hidden = true     }),\n    ConductiveInkDebuff                    = Action.Create({ Type = \"Spell\", ID = 302565, Hidden = true     }),\n    -- Hidden Heart of Azeroth\n    -- added all 3 ranks ids in case used by rotation\n    VisionofPerfectionMinor                = Action.Create({ Type = \"Spell\", ID = 296320, Hidden = true}),\n    VisionofPerfectionMinor2               = Action.Create({ Type = \"Spell\", ID = 299367, Hidden = true}),\n    VisionofPerfectionMinor3               = Action.Create({ Type = \"Spell\", ID = 299369, Hidden = true}),\n    UnleashHeartOfAzeroth                  = Action.Create({ Type = \"Spell\", ID = 280431, Hidden = true}),\n    RecklessForceBuff                      = Action.Create({ Type = \"Spell\", ID = 302932, Hidden = true     }),    \n    PoolResource                           = Action.Create({ Type = \"Spell\", ID = 209274, Hidden = true     }),\n    --Mythic Plus Spells \n    Quake                                  = Create({ Type = \"Spell\", ID = 240447, Hidden = true     }), -- Quake (Mythic Plus Affix)\n    Burst                                  = Create({ Type = \"Spell\", ID = 240443, Hidden = true     }), -- Bursting (Mythic Plus Affix) Upon death the creature Bursts, inflicting damage equal to (35 / 10)% of maximum health every 1 sec.\n    GrievousWound                          = Create({ Type = \"Spell\", ID = 240559, Hidden = true     }), -- Grievous (Mythic Plus Affix) 2% of a player's maximum health every 3 sec\n    Slow                                   = Create({ Type = \"Spell\", ID = 313255, Hidden = true     }), -- Shadhar slow\n    Fixate                                 = Create({ Type = \"Spell\", ID = 318078, Hidden = true     }), -- Wrathion Fixate\n    Cyclone                                = Create({ Type = \"Spell\", ID = 33786, Hidden = true   }), -- Debuff check\n    Innervate                              = Create({ Type = \"Spell\", ID = 29166, Hidden = true     }),\n};\n\n-- To create essences use next code:\nAction:CreateEssencesFor(ACTION_CONST_SHAMAN_RESTORATION)  -- where PLAYERSPEC is Constance (example: ACTION_CONST_MONK_BM)\nlocal A = setmetatable(Action[ACTION_CONST_SHAMAN_RESTORATION], { __index = Action })\n\n\nlocal player = \"player\"\nlocal targettarget = \"targettarget\"\nlocal target = \"target\"\nlocal mouseover = \"mouseover\"\n\nlocal Temp                                  = {\n    TotalAndPhys                            = {\"TotalImun\", \"DamagePhysImun\"},\n    TotalAndPhysKick                        = {\"TotalImun\", \"DamagePhysImun\", \"KickImun\"},\n    TotalAndPhysAndCC                       = {\"TotalImun\", \"DamagePhysImun\", \"CCTotalImun\"},\n    TotalAndPhysAndStun                     = {\"TotalImun\", \"DamagePhysImun\", \"StunImun\"},\n    TotalAndPhysAndCCAndStun                = {\"TotalImun\", \"DamagePhysImun\", \"CCTotalImun\", \"StunImun\"},\n    TotalAndMag                             = {\"TotalImun\", \"DamageMagicImun\"},\n}\n\nlocal GetTotemInfo, IsMouseButtonDown, UnitIsUnit = \nGetTotemInfo, IsMouseButtonDown, UnitIsUnit\n\nlocal function IsSchoolFree()\n    return LoC:IsMissed(\"SILENCE\") and LoC:Get(\"SCHOOL_INTERRUPT\", \"NATURE\") == 0\nend \n\n-- Call to avoid lua limit of 60upvalues \n-- Call RotationsVariables in each function that need these vars\nlocal function RotationsVariables()\n    combatTime = Unit(player):CombatTime()\n    inCombat = Unit(player):CombatTime() > 0\n    UseDBM = GetToggle(1 ,\"DBM\") -- Don't call it DBM else it broke all the global DBM var used by another addons\n    Potion = GetToggle(1, \"Potion\")\n    Racial = GetToggle(1, \"Racial\")\n    HeartOfAzeroth = GetToggle(1, \"HeartOfAzeroth\")\n    MouseOver = GetToggle(2, \"mouseover\")\n    StartByPreCast = GetToggle(2, \"StartByPreCast\")\n    TrinketMana = GetToggle(2, \"TrinketMana\")\n    MythicPlusLogic = GetToggle(2, \"MythicPlusLogic\")\n    StopCastOverHeal = GetToggle(2, \"StopCastOverHeal\")\n    StopCastQuake = GetToggle(2, \"StopCastQuake\")\n    StopCastQuakeSec = GetToggle(2, \"StopCastQuakeSec\")\n    GrievousWoundsLogic = GetToggle(2, \"GrievousWoundsLogic\")\n    GrievousWoundsMinStacks = GetToggle(2, \"GrievousWoundsMinStacks\")\n    HealingStreamTotemRefresh = GetToggle(2, \"HealingStreamTotemRefresh\")\n    HealingRainRefresh = GetToggle(2, \"HealingRainRefresh\")\n    AoEON = GetToggle(2, \"AoE\")\n    EarthShieldWorkMode = GetToggle(2, \"EarthShieldWorkMode\")\n    UseSpiritWalkersGrace = GetToggle(2, \"UseSpiritWalkersGrace\")\n    SpiritWalkersGraceTime = GetToggle(2, \"SpiritWalkersGraceTime\")\n    SpiritWalkersCatch = GetToggle(2, \"SpiritWalkersGraceTime\")\n    HealingTideTotemRaidUnits = GetToggle(2, \"HealingTideTotemRaidUnits\")\n    HealingTideTotemPartyUnits = GetToggle(2, \"HealingTideTotemPartyUnits\")\n    HealingTideTotemRaidHP = GetToggle(2, \"HealingTideTotemRaidHP\")\n    HealingTideTotemPartyHP = GetToggle(2, \"HealingTideTotemPartyHP\")\n    ChainHealRaidUnits = GetToggle(2, \"ChainHealRaidUnits\")\n    ChainHealPartyUnits = GetToggle(2, \"ChainHealPartyUnits\")\n    ChainHealRaidHP = GetToggle(2, \"ChainHealRaidHP\")\n    ChainHealPartyHP = GetToggle(2, \"ChainHealPartyHP\")\n    UseGhostWolf = GetToggle(2, \"UseGhostWolf\")\n    GhostWolfTime = GetToggle(2, \"GhostWolfTime\")\n    \nend\n\n-- [1] CC AntiFake Rotation\nlocal function AntiFakeStun(unit) \n    return \n    IsUnitEnemy(unit) and \n    Unit(unit):IsControlAble(\"incapacitate\", 0) and \n    A.HexGreen:AbsentImun(unit, Temp.TotalAndPhysAndCC, true)          \nend \nA[1] = function(icon)    \n    if     A.HexGreen:IsReady(nil, nil, nil, true) and \n    (\n        AntiFakeStun(\"mouseover\") or \n        AntiFakeStun(\"target\") or \n        AntiFakeStun(\"targettarget\") or \n        (\n            not IsUnitEnemy(\"mouseover\") and \n            not IsUnitEnemy(\"target\") and             \n            not IsUnitEnemy(\"targettarget\") \n        )\n    )\n    then \n        return A.HexGreen:Show(icon)         \n    end                                                                     \nend\n\n-- [2] Kick AntiFake Rotation\nA[2] = function(icon)        \n    local unit\n    if IsUnitEnemy(\"mouseover\") then \n        unit = \"mouseover\"\n    elseif IsUnitEnemy(\"target\") then \n        unit = \"target\"\n    elseif IsUnitEnemy(\"targettarget\") then \n        unit = \"targettarget\"\n    end \n    \n    if unit then         \n        local total, sleft, _, _, _, notKickAble = Unit(unit):CastTime()\n        if sleft > 0 then                                     \n            if A.WindShearAntiFake:IsReady(unit) and A.WindShearAntiFake:AbsentImun(unit, Temp.TotalAndPhysAndCC, true) then\n                return A.WindShearAntiFake:Show(icon)                  \n            end \n            \n            -- Racials \n            if A.QuakingPalm:IsRacialReadyP(unit, nil, nil, true) then \n                return A.QuakingPalm:Show(icon)\n            end \n            \n            if A.Haymaker:IsRacialReadyP(unit, nil, nil, true) then \n                return A.Haymaker:Show(icon)\n            end \n            \n            if A.WarStomp:IsRacialReadyP(unit, nil, nil, true) then \n                return A.WarStomp:Show(icon)\n            end \n            \n            if A.BullRush:IsRacialReadyP(unit, nil, nil, true) then \n                return A.BullRush:Show(icon)\n            end                         \n        end \n    end                                                                                 \nend\n\n-----------------------------------------\n--                 ROTATION  \n-----------------------------------------\n\nlocal function IsEnoughHPS(unit)\n    return Unit(player):GetHPS() > Unit(unit):GetDMG()\nend \n\nlocal function IsSaveManaPhase()\n    if not A.IsInPvP and GetToggle(2, \"ManaManagement\") and Unit(player):HasBuffs(A.Innervate.ID) == 0 then \n        local bossID\n        for i = 1, MAX_BOSS_FRAMES do \n            bossID = \"boss\" .. i\n            if Unit(bossID):IsExists() and not Unit(bossID):IsDead() and Unit(player):PowerPercent() < Unit(bossID):HealthPercent() then \n                return true \n            end \n        end \n    end \n    return Unit(player):PowerPercent() < 20 \nend \nIsSaveManaPhase = A.MakeFunctionCachedStatic(IsSaveManaPhase)        \n\nlocal function HealingRainDuration()\n    for i = 1, 5 do\n        local active, totemName, startTime, duration, textureId  = GetTotemInfo(i)\n        if active == true and textureId == 136037 then\n            return startTime + duration - GetTime()\n        end\n    end\n    return 0\nend\nHealingRainDuration = A.MakeFunctionCachedStatic(HealingRainDuration)\n\nlocal function HealingStreamTotemDuration()\n    for i = 1, 5 do\n        local active, totemName, startTime, duration, textureId  = GetTotemInfo(i)\n        if active == true and textureId == 5394 then\n            return startTime + duration - GetTime()\n        end\n    end\n    return 0\nend\nHealingStreamTotemDuration = A.MakeFunctionCachedStatic(HealingStreamTotemDuration)\n\nlocal function CloudburstTotemDuration()\n    for i = 1, 5 do\n        local active, totemName, startTime, duration, textureId  = GetTotemInfo(i)\n        if active == true and textureId == 157153 then\n            return startTime + duration - GetTime()\n        end\n    end\n    return 0\nend\nCloudburstTotemDuration = A.MakeFunctionCachedStatic(CloudburstTotemDuration)\n\n-- Cached parts \n-- PvP: Balance Solar Interrupt \nUnitCooldown:Register(\"arena\", 78675, 60) \n-- PvP: Mage Counterspell\nUnitCooldown:Register(\"arena\", 2139, 24)\n-- SpiritWalkersGrace with AncestralGift talent to give player silence and interrupt immunities\nlocal function CanSpiritWalkersGrace(mode)\n    if A.IsInPvP and A.SpiritWalkersGrace:IsReady(\"player\") and Unit(player):HasBuffs(A.SpiritWalkersGrace.ID, true) == 0 and A.AncestralGift:IsSpellLearned() then \n        -- If melee is around (doesn't tracking their kick but anyway)\n        if not mode and EnemyTeam(\"DAMAGER_MELEE\"):GetUnitID(15) ~= \"none\" then \n            return true \n        end \n        \n        -- Catch Balance Interrupt if enemy in burst or while rooted\n        if UnitCooldown:GetCooldown(\"arena\", 78675) == 0 then \n            local UnitBalance = EnemyTeam(\"DAMAGER_RANGE\"):GetUnitID(40, 102)         \n            if UnitBalance ~= \"none\" and Unit(UnitBalance):InCC() == 0 and Unit(player):HasBuffs(\"Reflect\") == 0 then\n                -- If rooted \n                if mode == \"CATCH\" and LoC:Get(\"ROOT\") > 0 then \n                    return true   \n                end \n                -- If bursting \n                if not mode and (EnemyTeam(\"DAMAGER\"):GetBuffs(\"DamageBuffs\", 40) > 0 or FriendlyTeam():GetTTD(1, 8)) then \n                    return true \n                end \n            end \n        end \n        \n        -- Catch Mage Interrupt if enemy in burst or through Blink / Shrimmer \n        if not mode and UnitCooldown:GetCooldown(\"arena\", 2139) == 0 then \n            local UnitMage = EnemyTeam(\"DAMAGER_RANGE\"):GetUnitID(60, {62, 63, 64})\n            if UnitMage ~= \"none\" and Unit(UnitMage):InCC() == 0 and Unit(player):HasBuffs(\"Reflect\") == 0 then\n                -- If Blink / Shrimmer  \n                if Unit(UnitMage):GetRange() > 40 and Unit(UnitMage):GetBlinkOrShrimmer() <= 1.5 then \n                    return true   \n                end \n                -- If bursting \n                if EnemyTeam(\"DAMAGER\"):GetBuffs(\"DamageBuffs\", 40) > 0 or FriendlyTeam():GetTTD(1, 8) then \n                    return true \n                end \n            end \n        end \n    end \n    return false \nend \nCanSpiritWalkersGrace = A.MakeFunctionCachedDynamic(CanSpiritWalkersGrace)\n\nlocal function SelfDefensives()\n    if Unit(player):CombatTime() == 0 then \n        return \n    end \n    \n    -- Abyssal Healing Potion\n    local AbyssalHealingPotion = A.GetToggle(2, \"AbyssalHealingPotionHP\")\n    if     AbyssalHealingPotion >= 0 and A.AbyssalHealingPotion:IsReady(\"player\") and \n    (\n        (     -- Auto \n            AbyssalHealingPotion >= 100 and \n            (\n                -- HP lose per sec >= 25\n                Unit(\"player\"):GetDMG() * 100 / Unit(\"player\"):HealthMax() >= 25 or \n                Unit(\"player\"):GetRealTimeDMG() >= Unit(\"player\"):HealthMax() * 0.25 or \n                -- TTD \n                Unit(\"player\"):TimeToDieX(25) < 5 or \n                (\n                    A.IsInPvP and \n                    (\n                        Unit(\"player\"):UseDeff() or \n                        (\n                            Unit(\"player\", 5):HasFlags() and \n                            Unit(\"player\"):GetRealTimeDMG() > 0 and \n                            Unit(\"player\"):IsFocused() \n                        )\n                    )\n                )\n            ) and \n            Unit(\"player\"):HasBuffs(\"DeffBuffs\", true) == 0\n        ) or \n        (    -- Custom\n            AbyssalHealingPotion < 100 and \n            Unit(\"player\"):HealthPercent() <= AbyssalHealingPotion\n        )\n    ) \n    then \n        return A.AbyssalHealingPotion\n    end  \n    \n    -- AstralShift\n    local AstralShift = A.GetToggle(2, \"AstralShiftHP\")\n    if     AstralShift >= 0 and A.AstralShift:IsReady(\"player\") and \n    (\n        (     -- Auto \n            AstralShift >= 100 and \n            (\n                -- HP lose per sec >= 20\n                Unit(\"player\"):GetDMG() * 100 / Unit(\"player\"):HealthMax() >= 20 or \n                Unit(\"player\"):GetRealTimeDMG() >= Unit(\"player\"):HealthMax() * 0.20 or \n                -- TTD \n                Unit(\"player\"):TimeToDieX(15) < 3 or \n                (\n                    A.IsInPvP and \n                    (\n                        Unit(\"player\"):UseDeff() or \n                        (\n                            Unit(\"player\", 5):HasFlags() and \n                            Unit(\"player\"):GetRealTimeDMG() > 0 and \n                            Unit(\"player\"):IsFocused() \n                        ) or\n                        Unit(player):IsExecuted()\n                    )\n                )\n            ) and \n            Unit(\"player\"):HasBuffs(\"DeffBuffs\", true) == 0\n        ) or \n        (    -- Custom\n            AstralShift < 100 and \n            Unit(\"player\"):HealthPercent() <= AstralShift\n        )\n    ) \n    then \n        return A.AstralShift\n    end   \n    \n    -- Stoneform on self dispel (only PvE)\n    if A.Stoneform:IsRacialReady(\"player\", true) and not A.IsInPvP and A.AuraIsValid(\"player\", \"UseDispel\", \"Dispel\") then \n        return A.Stoneform\n    end \nend \n\n-- Non GCD spell check\nlocal function countInterruptGCD(unit)\n    if not A.WindShear:IsReadyByPassCastGCD(unit) or not A.WindShear:AbsentImun(unit, Temp.TotalAndMagKick) then\n        return true\n    end\nend\n\n-- Interrupts spells\nlocal function Interrupts(unit)\n    if A.GetToggle(2, \"TasteInterruptList\") and (IsInRaid() or A.InstanceInfo.KeyStone > 1) then\n        useKick, useCC, useRacial, notInterruptable, castRemainsTime, castDoneTime = Action.InterruptIsValid(unit, \"TasteBFAContent\", true, countInterruptGCD(unit))\n    else\n        useKick, useCC, useRacial, notInterruptable, castRemainsTime, castDoneTime = Action.InterruptIsValid(unit, nil, nil, countInterruptGCD(unit))\n    end\n    \n    if castRemainsTime >= A.GetLatency() then\n        -- WindShear\n        if useKick and A.WindShear:IsReady(unit) then \n            -- Notification                    \n            Action.SendNotification(\"Wind Shear interrupting on \" .. unit, A.WindShear.ID)\n            return A.WindShear\n        end \n        \n        -- CapacitorTotem\n        if useCC and Action.GetToggle(2, \"UseCapacitorTotem\") and A.WindShear:GetCooldown() > 0 and A.CapacitorTotem:IsReady(player) then \n            -- Notification                    \n            Action.SendNotification(\"Capacitor Totem interrupting\", A.CapacitorTotem.ID)\n            return A.CapacitorTotem\n        end  \n        \n        -- Hex    \n        if useCC and A.Hex:IsReady(unit) and A.Hex:AbsentImun(unit, Temp.TotalAndCC, true) and Unit(unit):IsControlAble(\"incapacitate\", 0) then \n            -- Notification                    \n            Action.SendNotification(\"Hex interrupting\", A.Hex.ID)\n            return A.Hex              \n        end  \n        \n        if useRacial and A.QuakingPalm:AutoRacial(unit) then \n            return A.QuakingPalm\n        end \n        \n        if useRacial and A.Haymaker:AutoRacial(unit) then \n            return A.Haymaker\n        end \n        \n        if useRacial and A.WarStomp:AutoRacial(unit) then \n            return A.WarStomp\n        end \n        \n        if useRacial and A.BullRush:AutoRacial(unit) then \n            return A.BullRush\n        end \n    end\nend\nInterrupts = A.MakeFunctionCachedDynamic(Interrupts)\n\nlocal function CanHealingStreamTotem()\n    if A.HealingStreamTotem:IsReady(unit, true, nil, nil) and IsSchoolFree() then \n        local HealingStreamTotemHP = GetToggle(2, \"HealingStreamTotemHP\")\n        local HealingStreamTotemUnits = GetToggle(2, \"HealingStreamTotemUnits\") \n        \n        -- Auto Counter\n        if HealingStreamTotemUnits >= 5 then \n            HealingStreamTotemUnits = HealingEngineGetMinimumUnits(1)\n            -- Reduce size in raid by 35%\n            if HealingStreamTotemUnits > 5 then \n                HealingStreamTotemUnits = HealingStreamTotemUnits - (#HealingEngineMembersALL * 0.35)\n            end \n            -- If user typed counter higher than max available members \n        elseif HealingStreamTotemUnits >= TeamCacheFriendly.Size then \n            HealingStreamTotemUnits = TeamCacheFriendly.Size\n        end \n        \n        if HealingStreamTotemUnits < 3 and not A.IsInPvP then \n            return false \n        end \n        \n        local counter = 0 \n        for i = 1, #HealingEngineMembersALL do \n            -- Auto HP \n            if HealingStreamTotemHP >= 100 and A.HealingStreamTotem:PredictHeal(HealingEngineMembersALL[i].Unit, 1500) then \n                counter = counter + 1\n            end \n            \n            -- Custom HP \n            if HealingStreamTotemHP < 100 and HealingEngineMembersALL[i].HP <= HealingStreamTotemHP then \n                counter = counter + 1\n            end \n            \n            if counter >= HealingStreamTotemUnits then \n                return true \n            end \n        end \n    end \n    return false \nend \nCanHealingStreamTotem = A.MakeFunctionCachedStatic(CanHealingStreamTotem)\n\nlocal function UrgentMythicPlusTargetting()\n    \n    local getmembersAll = HealingEngine.GetMembersAll()\n    local BleedFriendCount = 0\n    local BleedStack = 0\n    RotationsVariables()\n    \n    if MythicPlusLogic then\n        \n        -- Junkyard\n        if inCombat and select(8, GetInstanceInfo()) == 2097 then\n            for i = 1, #getmembersAll do\n                if Unit(getmembersAll[i].Unit):HasDeBuffs(302274, true) ~= 0 --Fulminating Zap\n                and Unit(getmembersAll[i].Unit):HealthPercent() < 80 \n                then\n                    HealingEngine.SetTarget(getmembersAll[i].Unit, 0.5)\n                end\n            end\n        end\n        \n        -- Waycrest Manor\n        if inCombat and select(8, GetInstanceInfo()) == 1862 then\n            for i = 1, #getmembersAll do\n                if Unit(getmembersAll[i].Unit):HasDeBuffs(260741, true) ~= 0 --Jagged Nettles\n                and Unit(getmembersAll[i].Unit):HealthPercent() < 95 \n                then\n                    HealingEngine.SetTarget(getmembersAll[i].Unit, 0.5)\n                end\n            end\n        end\n        \n        --Kings Rest\n        if inCombat and select(8, GetInstanceInfo()) == 1762 then\n            for i = 1, #getmembersAll do\n                if Unit(getmembersAll[i].Unit):HasDeBuffs(267626, true) ~= 0 -- Dessication\n                or Unit(getmembersAll[i].Unit):HasDeBuffs(267618, true) ~= 0 -- Drain Fluids\n                or Unit(getmembersAll[i].Unit):HasDeBuffs(266231, true) ~= 0 -- Severing axe from axe lady in council\n                or Unit(getmembersAll[i].Unit):HasDeBuffs(272388, true) ~= 0 -- shadow barrage\n                or Unit(getmembersAll[i].Unit):HasDeBuffs(265773, true) > 1 -- spit-gold\n                or (Unit(getmembersAll[i].Unit):HasDeBuffs(270487, true) ~= 0 and Unit(getmembersAll[i].Unit):HasDeBuffsStacks(270487, true) > 1) -- severing-blade\n                and Unit(getmembersAll[i].Unit):HealthPercent() < 95 \n                then\n                    HealingEngine.SetTarget(getmembersAll[i].Unit, 0.5)\n                end\n            end\n        end\n        \n        -- Grievous Wounds\n        -- Only check on minimum Mythic +7\n        if Action.InstanceInfo.KeyStone >= 7 and GrievousWoundsLogic then\n            for i = 1, #getmembersAll do\n                if Unit(getmembersAll[i].Unit):HealthPercent() < 100 and Unit(getmembersAll[i].Unit):GetRange() <= 40 or UnitIsUnit(getmembersAll[i].Unit, \"player\") then\n                    local CurrentBleedstack = Unit(getmembersAll[i].Unit):HasDeBuffsStacks(A.GrievousWound.ID, true)\n                    if CurrentBleedstack >= GrievousWoundsMinStacks then\n                        HealingEngine.SetTarget(getmembersAll[i].Unit) -- default 2sec delay to stay on target\n                    end\n                    \n                end\n            end\n        end            \n        \n    end     \nend\n\n\nfunction FriendlyTeam:GetLastTimeDMGX(x, range)\n    -- @return number, number, number\n    -- [1] Average received damage latest 'x' seconds \n    -- [2] Summary received damage latest 'x' seconds \n    -- [3] Count of members valid for conditions\n    -- Nill-able: range\n    local ROLE                            = self.ROLE\n    local lastDMG, members                = 0, 0\n    local member\n    \n    if TeamCacheFriendly.Size <= 1 then \n        if Unit(player):Role(ROLE) then  \n            lastDMG = Unit(player):GetLastTimeDMGX(x)\n            return lastDMG, 1     \n        end \n        \n        return lastDMG, members\n    end         \n    \n    if ROLE and TeamCacheFriendly[ROLE] then \n        for member in pairs(TeamCacheFriendly[ROLE]) do\n            if Unit(member):InRange() and (not range or Unit(member):GetRange() <= range) then\n                lastDMG = lastDMG + Unit(member):GetLastTimeDMGX(x)   \n                members = members + 1\n            end             \n        end             \n    else\n        for i = 1, TeamCacheFriendly.MaxSize do\n            member = TeamCacheFriendlyIndexToPLAYERs[i]                \n            if member and Unit(member):InRange() and (not range or Unit(member):GetRange() <= range) then\n                lastDMG = lastDMG + Unit(member):GetLastTimeDMGX(x)   \n                members = members + 1\n            end \n        end  \n        \n        if TeamCacheFriendly.Type ~= \"raid\" then\n            lastDMG = lastDMG + Unit(player):GetLastTimeDMGX(x)  \n            members = members + 1\n        end \n    end      \n    \n    if lastDMG == 0 and members == 0 then \n        return 0, lastDMG, members\n    else \n        return lastDMG / members, lastDMG, members\n    end \nend\n\nlocal function noDamageCheck(unit)\n    if isChecked(\"Dont DPS spotter\") and GetObjectID(unit) == 135263 then\n        return true\n    end\n    if isCC(unit) then\n        return true\n    end\n    if isCasting(302415, unit) then\n        -- emmisary teleporting home\n        return true\n    end\n    \n    if hasBuff(263246, unit) then\n        -- shields on first boss in temple\n        return true\n    end\n    if hasBuff(260189, unit) then\n        -- shields on last boss in MOTHERLODE\n        return true\n    end\n    if hasBuff(261264, unit) or hasBuff(261265, unit) or hasBuff(261266, unit) then\n        -- shields on witches in wm\n        return true\n    end\n    \n    if GetObjectID(thisUnit) == 155432 then\n        --emmisaries to punt, dealt with seperately\n        return true\n    end\n    return false --catchall\nend\nnoDamageCheck = Action.MakeFunctionCachedDynamic(noDamageCheck)\n\nlocal StunsBlackList = {\n    -- Atal'Dazar\n    [87318] = \"Dazar'ai Colossus\",\n    [122984] = \"Dazar'ai Colossus\",\n    [128455] = \"T'lonja\",\n    [129553] = \"Dinomancer Kish'o\",\n    [129552] = \"Monzumi\",\n    -- Freehold\n    [129602] = \"Irontide Enforcer\",\n    [130400] = \"Irontide Crusher\",\n    -- King's Rest\n    [133935] = \"Animated Guardian\",\n    [134174] = \"Shadow-Borne Witch Doctor\",\n    [134158] = \"Shadow-Borne Champion\",\n    [137474] = \"King Timalji\",\n    [137478] = \"Queen Wasi\",\n    [137486] = \"Queen Patlaa\",\n    [137487] = \"Skeletal Hunting Raptor\",\n    [134251] = \"Seneschal M'bara\",\n    [134331] = \"King Rahu'ai\",\n    [137484] = \"King A'akul\",\n    [134739] = \"Purification Construct\",\n    [137969] = \"Interment Construct\",\n    [135231] = \"Spectral Brute\",\n    [138489] = \"Shadow of Zul\",\n    -- Shrine of the Storm\n    [134144] = \"Living Current\",\n    [136214] = \"Windspeaker Heldis\",\n    [134150] = \"Runecarver Sorn\",\n    [136249] = \"Guardian Elemental\",\n    [134417] = \"Deepsea Ritualist\",\n    [136353] = \"Colossal Tentacle\",\n    [136295] = \"Sunken Denizen\",\n    [136297] = \"Forgotten Denizen\",\n    -- Siege of Boralus\n    [129369] = \"Irontide Raider\",\n    [129373] = \"Dockhound Packmaster\",\n    [128969] = \"Ashvane Commander\",\n    [138255] = \"Ashvane Spotter\",\n    [138465] = \"Ashvane Cannoneer\",\n    [135245] = \"Bilge Rat Demolisher\",\n    -- Temple of Sethraliss\n    [134991] = \"Sandfury Stonefist\",\n    [139422] = \"Scaled Krolusk Tamer\",\n    [136076] = \"Agitated Nimbus\",\n    [134691] = \"Static-charged Dervish\",\n    [139110] = \"Spark Channeler\",\n    [136250] = \"Hoodoo Hexer\",\n    [139946] = \"Heart Guardian\",\n    -- MOTHERLODE!!\n    [130485] = \"Mechanized Peacekeeper\",\n    [136139] = \"Mechanized Peacekeeper\",\n    [136643] = \"Azerite Extractor\",\n    [134012] = \"Taskmaster Askari\",\n    [133430] = \"Venture Co. Mastermind\",\n    [133463] = \"Venture Co. War Machine\",\n    [133436] = \"Venture Co. Skyscorcher\",\n    [133482] = \"Crawler Mine\",\n    -- Underrot\n    [131436] = \"Chosen Blood Matron\",\n    [133912] = \"Bloodsworn Defiler\",\n    [138281] = \"Faceless Corruptor\",\n    -- Tol Dagor\n    [130025] = \"Irontide Thug\",\n    -- Waycrest Manor\n    [131677] = \"Heartsbane Runeweaver\",\n    [135329] = \"Matron Bryndle\",\n    [131812] = \"Heartsbane Soulcharmer\",\n    [131670] = \"Heartsbane Vinetwister\",\n    [135365] = \"Matron Alma\",\n}\n\nlocal precast_spell_list = {\n    --spell_id    , precast_time    ,    spell_name\n    { 214652, 5, 'Acidic Fragments' },\n    { 205862, 5, 'Slam' },\n    { 259832, 1.5, 'Massive Glaive - Stormbound Conqueror (Warport Wastari, Zuldazar, for testing purpose only)' },\n    { 218774, 5, 'Summon Plasma Spheres' },\n    { 206949, 5, 'Frigid Nova' },\n    { 206517, 5, 'Fel Nova' },\n    { 207720, 5, 'Witness the Void' },\n    { 206219, 5, 'Liquid Hellfire' },\n    { 211439, 5, 'Will of the Demon Within' },\n    { 209270, 5, 'Eye of Guldan' },\n    { 227071, 5, 'Flame Crash' },\n    { 233279, 5, 'Shattering Star' },\n    { 233441, 5, 'Bone Saw' },\n    { 235230, 5, 'Fel Squall' },\n    { 231854, 5, 'Unchecked Rage' },\n    { 232174, 5, 'Frosty Discharge' },\n    { 230139, 5, 'Hydra Shot' },\n    { 233264, 5, 'Embrace of the Eclipse' },\n    { 236542, 5, 'Sundering Doom' },\n    { 236544, 5, 'Doomed Sundering' },\n    { 235059, 5, 'Rupturing Singularity' },\n    { 288693, 3, 'Tormented Soul - Grave Bolt (Reaping affix)' },\n    { 262347, 5, 'Static Pulse' },\n    { 302420, 5, 'Queen\\'s Decree: Hide' },\n    { 260333, 7, 'Tantrum - Underrot 2nd boss' },\n    { 255577, 5, 'Transfusion' }, -- https://www.wowhead.com/spell=255577/transfusion\n    { 259732, 5, 'Festering Harvest' }, --https://www.wowhead.com/spell=259732/festering-harvest\n    { 285388, 5, 'Vent Jets' }, --https://www.wowhead.com/spell=285388/vent-jets\n    { 291626, 3, 'Cutting Beam' }, --https://www.wowhead.com/spell=291626/cutting-beam\n    { 300207, 3, 'shock-coil' }, -- https://www.wowhead.com/spell=300207/shock-coil\n    { 297261, 5, 'rumble' }, -- https://www.wowhead.com/spell=297261/rumble\n    { 262347, 5, 'pulse' }, --https://www.wowhead.com/spell=262347/static-pulse\n}\n--end of dbm list\n\nlocal DebuffSniperList = {\n    \n    --junkyard\n    { spellID = 298669, stacks = 0, secs = 1 }, -- Taze\n    -- Uldir\n    { spellID = 262313, stacks = 0, secs = 5 }, -- Malodorous Miasma\n    { spellID = 262314, stacks = 0, secs = 3 }, -- Putrid Paroxysm\n    { spellID = 264382, stacks = 0, secs = 1 }, -- Eye Beam\n    { spellID = 264210, stacks = 0, secs = 5 }, -- Jagged Mandible\n    { spellID = 265360, stacks = 0, secs = 5 }, -- Roiling Deceit\n    { spellID = 265129, stacks = 0, secs = 5 }, -- Omega Vector\n    { spellID = 266948, stacks = 0, secs = 5 }, -- Plague Bomb\n    { spellID = 274358, stacks = 0, secs = 5 }, -- Rupturing Blood\n    { spellID = 274019, stacks = 0, secs = 1 }, -- Mind Flay\n    { spellID = 272018, stacks = 0, secs = 1 }, -- Absorbed in Darkness\n    { spellID = 273359, stacks = 0, secs = 5 }, -- Shadow Barrage\n    -- Freehold\n    { spellID = 257437, stacks = 0, secs = 5 }, -- Poisoning Strike\n    { spellID = 267523, stacks = 0, secs = 5 }, -- Cutting Surge\n    { spellID = 256363, stacks = 0, secs = 5 }, -- Ripper Punch\n    -- Shrine of the Storm\n    { spellID = 264526, stacks = 0, secs = 5 }, -- Grasp from the Depths\n    { spellID = 264166, stacks = 0, secs = 1 }, -- Undertow\n    { spellID = 268214, stacks = 0, secs = 1 }, -- Carve Flesh\n    { spellID = 276297, stacks = 0, secs = 5 }, -- Void Seed\n    { spellID = 268322, stacks = 0, secs = 5 }, -- Touch of the Drowned\n    -- Siege of Boralus\n    { spellID = 256897, stacks = 0, secs = 5 }, -- Clamping Jaws\n    { spellID = 273470, stacks = 0, secs = 3 }, -- Gut Shot\n    { spellID = 275014, stacks = 0, secs = 5 }, -- Putrid Waters\n    -- Tol Dagor\n    { spellID = 258058, stacks = 0, secs = 1 }, -- Squeeze\n    { spellID = 260016, stacks = 0, secs = 3 }, -- Itchy Bite\n    { spellID = 260067, stacks = 0, secs = 5 }, -- Vicious Mauling\n    { spellID = 258864, stacks = 0, secs = 5 }, -- Suppression Fire\n    { spellID = 258917, stacks = 0, secs = 3 }, -- Righteous Flames\n    { spellID = 256198, stacks = 0, secs = 5 }, -- Azerite Rounds: Incendiary\n    { spellID = 256105, stacks = 0, secs = 1 }, -- Explosive Burst\n    -- Waycrest Manor\n    { spellID = 266035, stacks = 0, secs = 1 }, -- Bone Splinter\n    { spellID = 260703, stacks = 0, secs = 1 }, -- Unstable Runic Mark\n    { spellID = 260741, stacks = 0, secs = 1 }, -- Jagged Nettles\n    { spellID = 264050, stacks = 0, secs = 3 }, -- Infected Thorn\n    { spellID = 264556, stacks = 0, secs = 2 }, -- Tearing Strike\n    { spellID = 264150, stacks = 0, secs = 1 }, -- Shatter\n    { spellID = 265761, stacks = 0, secs = 1 }, -- Thorned Barrage\n    { spellID = 263905, stacks = 0, secs = 1 }, -- Marking Cleave\n    { spellID = 264153, stacks = 0, secs = 3 }, -- Spit\n    { spellID = 278456, stacks = 0, secs = 3 }, -- Infest\n    { spellID = 271178, stacks = 0, secs = 3 }, -- Ravaging Leap\n    { spellID = 265880, stacks = 0, secs = 1 }, -- Dread Mark\n    { spellID = 265882, stacks = 0, secs = 1 }, -- Lingering Dread\n    { spellID = 264378, stacks = 0, secs = 5 }, -- Fragment Soul\n    { spellID = 261438, stacks = 0, secs = 1 }, -- Wasting Strike\n    { spellID = 261440, stacks = 0, secs = 1 }, -- Virulent Pathogen\n    { spellID = 268202, stacks = 0, secs = 1 }, -- Death Lens\n    -- Atal'Dazar\n    { spellID = 253562, stacks = 0, secs = 3 }, -- Wildfire\n    { spellID = 254959, stacks = 0, secs = 2 }, -- Soulburn\n    { spellID = 255558, stacks = 0, secs = 5 }, -- Tainted Blood\n    { spellID = 255814, stacks = 0, secs = 5 }, -- Rending Maul\n    { spellID = 250372, stacks = 0, secs = 5 }, -- Lingering Nausea\n    { spellID = 250096, stacks = 0, secs = 1 }, -- Wracking Pain\n    { spellID = 256577, stacks = 0, secs = 5 }, -- Soulfeast\n    -- King's Rest\n    { spellID = 269932, stacks = 0, secs = 3 }, -- Gust Slash\n    { spellID = 265773, stacks = 0, secs = 4 }, -- Spit Gold\n    { spellID = 270084, stacks = 0, secs = 3 }, -- Axe Barrage\n    { spellID = 270865, stacks = 0, secs = 3 }, -- Hidden Blade\n    { spellID = 270289, stacks = 0, secs = 3 }, -- Purification Beam\n    { spellID = 271564, stacks = 0, secs = 3 }, -- Embalming\n    { spellID = 267618, stacks = 0, secs = 3 }, -- Drain Fluids\n    { spellID = 270487, stacks = 0, secs = 3 }, -- Severing Blade\n    { spellID = 270507, stacks = 0, secs = 5 }, -- Poison Barrage\n    { spellID = 266231, stacks = 0, secs = 3 }, -- Severing Axe\n    { spellID = 267273, stacks = 0, secs = 3 }, -- Poison Nova\n    { spellID = 268419, stacks = 0, secs = 3 }, -- Gale Slash\n    -- MOTHERLODE!!\n    { spellID = 269298, stacks = 0, secs = 1 }, -- Widowmaker\n    { spellID = 262347, stacks = 0, secs = 1 }, -- Static Pulse\n    { spellID = 263074, stacks = 0, secs = 3 }, -- Festering Bite\n    { spellID = 262270, stacks = 0, secs = 1 }, -- Caustic Compound\n    { spellID = 262794, stacks = 0, secs = 1 }, -- Energy Lash\n    { spellID = 259853, stacks = 0, secs = 3 }, -- Chemical Burn\n    { spellID = 269092, stacks = 0, secs = 1 }, -- Artillery Barrage\n    { spellID = 262348, stacks = 0, secs = 1 }, -- Mine Blast\n    { spellID = 260838, stacks = 0, secs = 1 }, -- Homing Missile\n    -- Temple of Sethraliss\n    { spellID = 263371, stacks = 0, secs = 1 }, -- Conduction\n    { spellID = 272657, stacks = 0, secs = 3 }, -- Noxious Breath\n    { spellID = 267027, stacks = 0, secs = 1 }, -- Cytotoxin\n    { spellID = 272699, stacks = 0, secs = 3 }, -- Venomous Spit\n    { spellID = 268013, stacks = 0, secs = 5 }, -- Flame Shock\n    -- Underrot\n    { spellID = 265019, stacks = 0, secs = 1 }, -- Savage Cleave\n    { spellID = 265568, stacks = 0, secs = 1 }, -- Dark Omen\n    { spellID = 260685, stacks = 0, secs = 5 }, -- Taint of G'huun\n    { spellID = 278961, stacks = 0, secs = 5 }, -- Decaying Mind\n    { spellID = 260455, stacks = 0, secs = 1 }, -- Serrated Fangs\n    { spellID = 273226, stacks = 0, secs = 1 }, -- Decaying Spores\n    { spellID = 269301, stacks = 0, secs = 5 }, -- Putrid Blood\n    -- all\n    { spellID = 302421, stacks = 0, secs = 5 }, -- Queen's Decree\n}\n\nlocal NeedSnipe = false\nlocal function SetFriendlyToSnipe()\n    local getmembersAll = A.HealingEngine.GetMembersAll()\n    for i = 1, #getmembersAll do\n        if Unit(getmembersAll[i].Unit):GetRange() <= 40 then\n            for k, v in pairs(DebuffSniperList) do\n                if Unit(getmembersAll[i].Unit):HasDeBuffs(v.spellID, true) > v.secs and \n                --Unit(getmembersAll[i].Unit):HasDeBuffsStacks(v.spellID, true) >= v.stacks and \n                Unit(getmembersAll[i].Unit):HasBuffs(A.Rejuvenation.ID, player, true) > 0 and\n                -- Germination\n                (\n                    A.Germination:IsSpellLearned() and \n                    Unit(getmembersAll[i].Unit):HasBuffs(A.RejuvenationGermimation.ID, player, true) > 0 \n                    or \n                    not A.Germination:IsSpellLearned()\n                )                    \n                then\n                    -- Notification                    \n                    Action.SendNotification(\"Healing snipe on \" .. UnitName(getmembersAll[i].Unit), A.Regrowth.ID)\n                    -- Global var\n                    NeedSnipe = true\n                    -- Force target\n                    A.HealingEngine.SetTarget(getmembersAll[i].Unit)\n                end\n            end\n        end\n    end\nend\nSetFriendlyToSnipe = Action.MakeFunctionCachedDynamic(SetFriendlyToSnipe)\n\nlocal pre_hot_list = {   --snipe list\n    --Battle of Dazar'alor\n    [283572] = { targeted = true }, --\"Sacred Blade\"\n    [284578] = { targeted = true }, --\"Penance\"\n    [286988] = { targeted = true }, --Divine Burst\"\n    [282036] = { targeted = true }, --\"Fireball\"\n    [282182] = { targeted = false }, --\"Buster Cannon\"\n    --Uldir\n    [279669] = { targeted = false }, --\"Bacterial Outbreak\"\n    [279660] = { targeted = false }, --\"Endemic Virus\"\n    [274262] = { targeted = false }, --\"Explosive Corruption\"\n    --Reaping\n    [288693] = { targeted = true }, --\"Grave Bolt\",\n    --Atal'Dazar\n    [250096] = { targeted = true }, --\"Wracking Pain\"\n    [253562] = { targeted = true }, --\"Wildfire\"\n    [252781] = { targeted = true }, --\"Unstable Hex\"\n    [252923] = { targeted = true }, --\"Venom Blast\"\n    [253239] = { targeted = true }, -- Dazarai Juggernaut - Merciless Assault },\n    [256846] = { targeted = true }, --'Dinomancer Kisho - Deadeye Aim'},\n    [257407] = { targeted = true }, -- Rezan - Pursuit},\n    --Kings Rest\n    [267618] = { targeted = true }, --\"Drain Fluids\"\n    [267308] = { targeted = true }, --\"Lighting Bolt\"\n    [270493] = { targeted = true }, --\"Spectral Bolt\"\n    [269973] = { targeted = true }, --\"Deathly Chill\"\n    [270923] = { targeted = true }, --\"Shadow Bolt\"\n    [272388] = { targeted = true }, --\"Shadow Barrage\"\n    [266231] = { targeted = true }, -- Kula the Butcher - Severing Axe},\n    [270507] = { targeted = true }, --  Spectral Beastmaster - Poison Barrage},\n    [265773] = { targeted = true }, -- The Golden Serpent - Spit Gold},\n    [270506] = { targeted = true }, -- Spectral Beastmaster - Deadeye Shot},\n    [265773] = { targeted = true }, -- https://www.wowhead.com/spell=270487/severing-blade\n    [268586] = { targeted = true }, -- https://www.wowhead.com/spell=268586/blade-combo\n    --Free Hold\n    [259092] = { targeted = true }, --\"Lightning Bolt\"\n    [281420] = { targeted = true }, --\"Water Bolt\"\n    [257267] = { targeted = false }, --\"Swiftwind Saber\"\n    [257739] = { targeted = true }, -- Blacktooth Scrapper - Blind Rage},\n    [258338] = { targeted = true }, -- Captain Raoul - Blackout Barrel},\n    [256979] = { targeted = true }, -- Captain Eudora - Powder Shot},\n    --Siege of Boralus\n    [272588] = { targeted = true }, --\"Rotting Wounds\"\n    [272827] = { targeted = false }, --\"Viscous Slobber\"\n    [272581] = { targeted = true }, -- \"Water Spray\"\n    [257883] = { targeted = false }, -- \"Break Water\"\n    [257063] = { targeted = true }, --\"Brackish Bolt\"\n    [272571] = { targeted = true }, --\"Choking Waters\"\n    [257641] = { targeted = true }, -- Kul Tiran Marksman - Molten Slug},\n    [272874] = { targeted = true }, -- Ashvane Commander - Trample},\n    [272581] = { targeted = true }, -- Bilge Rat Tempest - Water Spray},\n    [272528] = { targeted = true }, -- Ashvane Sniper - Shoot},\n    [272542] = { targeted = true }, -- Ashvane Sniper - Ricochet},\n    -- Temple of Sethraliss\n    [263775] = { targeted = true }, --\"Gust\"\n    [268061] = { targeted = true }, --\"Chain Lightning\"\n    [272820] = { targeted = true }, --\"Shock\"\n    [263365] = { targeted = true }, --\"https://www.wowhead.com/spell=263365/a-peal-of-thunder\"\n    [268013] = { targeted = true }, --\"Flame Shock\"\n    [274642] = { targeted = true }, --\"Lava Burst\"\n    [268703] = { targeted = true }, --\"Lightning Bolt\"\n    [272699] = { targeted = true }, --\"Venomous Spit\"\n    [268703] = { targeted = true }, -- Charged Dust Devil - Lightning Bolt},\n    [272670] = { targeted = true }, -- Sandswept Marksman - Shoot},\n    [267278] = { targeted = true }, -- Static-charged Dervish - Electrocute},\n    [272820] = { targeted = true }, -- Spark Channeler - Shock},\n    [274642] = { targeted = true }, -- Hoodoo Hexer - Lava Burst},\n    [268061] = { targeted = true }, -- Plague Doctor - Chain Lightning},\n    --Shrine of the Storm\n    [265001] = { targeted = true }, --\"Sea Blast\"\n    [268347] = { targeted = true }, --\"Void Bolt\"\n    [267969] = { targeted = true }, --\"Water Blast\"\n    [268233] = { targeted = true }, --\"Electrifying Shock\"\n    [268315] = { targeted = true }, --\"Lash\"\n    [268177] = { targeted = true }, --\"Windblast\"\n    [268273] = { targeted = true }, --\"Deep Smash\"\n    [268317] = { targeted = true }, --\"Rip Mind\"\n    [265001] = { targeted = true }, --\"Sea Blast\"\n    [274703] = { targeted = true }, --\"Void Bolt\"\n    [268214] = { targeted = true }, --\"Carve Flesh\"\n    [264166] = { targeted = true }, -- Aqusirr - Undertow},\n    [268214] = { targeted = true }, -- Runecarver Sorn - Carve Flesh},\n    --Motherlode\n    [259856] = { targeted = true }, --\"Chemical Burn\"\n    [260318] = { targeted = true }, --\"Alpha Cannon\"\n    [262794] = { targeted = true }, --\"Energy Lash\"\n    [263202] = { targeted = true }, --\"Rock Lance\"\n    [262268] = { targeted = true }, --\"Caustic Compound\"\n    [263262] = { targeted = true }, --\"Shale Spit\"\n    [263628] = { targeted = true }, --\"Charged Claw\"\n    [268185] = { targeted = true }, -- Refreshment Vendor, Iced Spritzer},\n    [258674] = { targeted = true }, -- Off-Duty Laborer - Throw Wrench},\n    [276304] = { targeted = true }, -- Rowdy Reveler - Penny For Your Thoughts},\n    [263209] = { targeted = true }, -- Mine Rat - Throw Rock},\n    [263202] = { targeted = true }, -- Venture Co. Earthshaper - Rock Lance},\n    [262794] = { targeted = true }, -- Venture Co. Mastermind - Energy Lash},\n    [260669] = { targeted = true }, -- Rixxa Fluxflame - Propellant Blast},\n    [271456] = { targeted = true }, -- https://www.wowhead.com/spell=271456/drill-smash},\n    --Underrot\n    [260879] = { targeted = true }, --\"Blood Bolt\"\n    [265084] = { targeted = true }, --\"Blood Bolt\"\n    [259732] = { targeted = false }, --\"Festering Harvest\"\n    [266209] = { targeted = false }, --\"Wicked Frenzy\"\n    [265376] = { targeted = true }, -- Fanatical Headhunter - Barbed Spear},\n    [265625] = { targeted = true }, -- Befouled Spirit - Dark Omen},\n    --Tol Dagor\n    [257777] = { targeted = true }, --\"Crippling Shiv\"\n    [258150] = { targeted = true }, --\"Salt Blast\"\n    [258869] = { targeted = true }, --\"Blaze\"\n    [256039] = { targeted = true }, -- Overseer Korgus - Deadeye},\n    [185857] = { targeted = true }, -- Ashvane Spotter - Shoot},\n    \n    --work shop_\n    [294195] = { targeted = true }, --https://www.wowhead.com/spell=294195/arcing-zap\n    [293827] = { targeted = true }, --https://www.wowhead.com/spell=293827/giga-wallop\n    [292264] = { targeted = true }, -- https://www.wowhead.com/spell=292264/giga-zap\n    --junk yard\n    [300650] = { targeted = true }, --https://www.wowhead.com/spell=300650/suffocating-smog\n    [299438] = { targeted = true }, --https://www.wowhead.com/spell=299438/sledgehammer\n    [300188] = { targeted = true }, -- https://www.wowhead.com/spell=300188/scrap-cannon#used-by-npc\n    [302682] = { targeted = true }, --https://www.wowhead.com/spell=302682/mega-taze\n    \n    --Waycrest Manor\n    [260701] = { targeted = true }, --\"Bramble Bolt\"\n    [260700] = { targeted = true }, --\"Ruinous Bolt\"\n    [260699] = { targeted = true }, --\"Soul Bolt\"\n    [261438] = { targeted = true }, --\"Wasting Strike\"\n    [266225] = { targeted = true }, --Darkened Lightning\"\n    [273653] = { targeted = true }, --\"Shadow Claw\"\n    [265881] = { targeted = true }, --\"Decaying Touch\"\n    [264153] = { targeted = true }, --\"Spit\"\n    [278444] = { targeted = true }, --\"Infest\"\n    [167385] = { targeted = true }, --\"Infest\"\n    [263891] = { targeted = true }, -- Heartsbane Vinetwister - Grasping Thorns},\n    [264510] = { targeted = true }, -- Crazed Marksman - Shoot},\n    [260699] = { targeted = true }, -- Coven Diviner - Soul Bolt},\n    [260551] = { targeted = true }, -- Soulbound Goliath - Soul Thorns},\n    [260741] = { targeted = true }, -- Heartsbane Triad - Jagged Nettles},\n    [268202] = { targeted = true } -- Gorak Tul - Death Lens},\n}\nlocal CC_CreatureTypeList = { \"Beast\", \"Dragonkin\" }\nlocal StunsBlackList = {\n    -- Atal'Dazar\n    [87318] = \"Dazar'ai Colossus\",\n    [122984] = \"Dazar'ai Colossus\",\n    [128455] = \"T'lonja\",\n    [129553] = \"Dinomancer Kish'o\",\n    [129552] = \"Monzumi\",\n    -- Freehold\n    [129602] = \"Irontide Enforcer\",\n    [130400] = \"Irontide Crusher\",\n    -- King's Rest\n    [133935] = \"Animated Guardian\",\n    [134174] = \"Shadow-Borne Witch Doctor\",\n    [134158] = \"Shadow-Borne Champion\",\n    [137474] = \"King Timalji\",\n    [137478] = \"Queen Wasi\",\n    [137486] = \"Queen Patlaa\",\n    [137487] = \"Skeletal Hunting Raptor\",\n    [134251] = \"Seneschal M'bara\",\n    [134331] = \"King Rahu'ai\",\n    [137484] = \"King A'akul\",\n    [134739] = \"Purification Construct\",\n    [137969] = \"Interment Construct\",\n    [135231] = \"Spectral Brute\",\n    [138489] = \"Shadow of Zul\",\n    -- Shrine of the Storm\n    [134144] = \"Living Current\",\n    [136214] = \"Windspeaker Heldis\",\n    [134150] = \"Runecarver Sorn\",\n    [136249] = \"Guardian Elemental\",\n    [134417] = \"Deepsea Ritualist\",\n    [136353] = \"Colossal Tentacle\",\n    [136295] = \"Sunken Denizen\",\n    [136297] = \"Forgotten Denizen\",\n    -- Siege of Boralus\n    [129369] = \"Irontide Raider\",\n    [129373] = \"Dockhound Packmaster\",\n    [128969] = \"Ashvane Commander\",\n    [138255] = \"Ashvane Spotter\",\n    [138465] = \"Ashvane Cannoneer\",\n    [135245] = \"Bilge Rat Demolisher\",\n    -- Temple of Sethraliss\n    [134991] = \"Sandfury Stonefist\",\n    [139422] = \"Scaled Krolusk Tamer\",\n    [136076] = \"Agitated Nimbus\",\n    [134691] = \"Static-charged Dervish\",\n    [139110] = \"Spark Channeler\",\n    [136250] = \"Hoodoo Hexer\",\n    [139946] = \"Heart Guardian\",\n    -- MOTHERLODE!!\n    [130485] = \"Mechanized Peacekeeper\",\n    [136139] = \"Mechanized Peacekeeper\",\n    [136643] = \"Azerite Extractor\",\n    [134012] = \"Taskmaster Askari\",\n    [133430] = \"Venture Co. Mastermind\",\n    [133463] = \"Venture Co. War Machine\",\n    [133436] = \"Venture Co. Skyscorcher\",\n    [133482] = \"Crawler Mine\",\n    -- Underrot\n    [131436] = \"Chosen Blood Matron\",\n    [133912] = \"Bloodsworn Defiler\",\n    [138281] = \"Faceless Corruptor\",\n    -- Tol Dagor\n    [130025] = \"Irontide Thug\",\n    -- Waycrest Manor\n    [131677] = \"Heartsbane Runeweaver\",\n    [135329] = \"Matron Bryndle\",\n    [131812] = \"Heartsbane Soulcharmer\",\n    [131670] = \"Heartsbane Vinetwister\",\n    [135365] = \"Matron Alma\",\n    --mini bosses\n    [161241] = \"Voidweaver Mal'thir\",\n}\n\nlocal DispelSpell = {\n    -- DeBuffs Poison and Disease\n    [\"Slow\"] = {\n        3408, -- Crippling Poison\n        58180, -- Infected Wounds\n        197091, -- Neurotoxin\n        -- 55095б -- Frost DK dot (no reason spend gcd for that)\n    },\n}\n\nlocal function Dispel(unit)    \n    return \n    (\n        -- SELF \n        (\n            UnitIsUnit(unit, player) and \n            (\n                (          \n                    A.PurifySpirit:IsReady(unit) and \n                    A.LastPlayerCastID ~= A.PurifySpirit.ID\n                )\n            ) and \n            Unit(unit):HasDeBuffs(DispelSpell[\"Slow\"], true) > 2 and \n            Unit(unit):GetCurrentSpeed() > 0 and\n            Unit(unit):GetCurrentSpeed() < 100 \n        ) or \n        -- PvE: ANOTHER UNIT   \n        (\n            -- Useable conditions\n            not A.IsInPvP and\n            Unit(unit):IsExists() and\n            --not UnitIsUnit(unit, player) and \n            Unit(unit):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n            AuraIsValid(unit, \"UseDispel\", \"Dispel\")            \n        ) or\n        -- PvP: ANOTHER UNIT   \n        (\n            -- Useable conditions\n            A.IsInPvP and\n            Unit(unit):IsExists() and\n            --not UnitIsUnit(unit, player) and \n            Unit(unit):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n            (\n                (\n                    A.PurifySpirit:IsReady(unit) and \n                    A.LastPlayerCastID ~= A.PurifySpirit.ID and\n                    A.PurifySpirit:IsInRange(unit)\n                )\n            ) and \n            -- Dispel types \n            (\n                -- Poison CC \n                Unit(unit):HasDeBuffs(\"Curse\") > 2 or\n                (\n                    (\n                        Unit(unit):HasDeBuffs(\"Magic\") > 2 or \n                        -- Magic Rooted (if not available Tremor)\n                        (                            \n                            (\n                                not A.TremorTotem:IsReady(player) -- Tremor\n                            ) and \n                            select(2, UnitClass(unit)) ~= \"DRUID\" and\n                            Unit(unit):HasDeBuffs(\"MagicRooted\") > 3 and \n                            Unit(unit):IsMelee() and\n                            Unit(unit):GetRealTimeDMG() <= Unit(unit):HealthMax() * 0.1 \n                        )\n                    )\n                )\n            )\n        )\n    ) and\n    -- Check another CC types     \n    Unit(unit):HasDeBuffs(\"Physical\") <= GetCurrentGCD() and \n    -- Hex\n    Unit(unit):HasDeBuffs(51514, true) <= GetCurrentGCD()\nend\n\n-- Custom RSham Offensive Dispell handler\nlocal function ShouldPurge(unit)\n    -- Do not dispel these spells\n    local blacklist = {\n        33786,\n        131736,\n        30108,\n        124465,\n        34914\n    }\n    -- Dispell Types\n    local dispelTypes = {\n        \"Magic\"\n    }\n    \n    for i = 1, 40 do\n        for x = 1, #dispelTypes do\n            local name, rank, icon, count, buffType = UnitBuff(unit, i) \n            if buffType == dispelTypes[x] then\n                for i = 1, #blacklist do\n                    if Unit(unit):HasBuffs(blacklist[i], true) then\n                        return false\n                    end\n                end\n                return true\n            end\n        end\n    end\n    return false\nend\nShouldPurge = A.MakeFunctionCachedDynamic(ShouldPurge)\n\n-- Return total active Beacon of Light Buff for player only\nlocal function ActiveEarthShield()\n    return HealingEngine.GetBuffsCount(A.EarthShield.ID, 0, player, true)\nend\n\n-- Return total active Beacon of Light Buff for tank only\nlocal function ActiveEarthShieldOnTank()\n    local CurrentTanks = HealingEngine.GetMembersByMode(\"TANK\")\n    local total = 0\n    -- Iterate through current tanks\n    for i = 1, #CurrentTanks do \n        if Unit(CurrentTanks[i].Unit):HasBuffs(A.EarthShield.ID, player, true) > 0 then\n            total = total + 1\n        end\n    end\n    return total\nend\n\nlocal StopCast = false \n\n-- Return boolean\n-- Current Group HPS > Incoming damage\nlocal function IsGroupEnoughHPS()\n    return ((HealingEngine.GetIncomingHPSAVG() > HealingEngine.GetIncomingDMGAVG()) or (not IsInRaid() and not IsInGroup()))\nend\n\n-- Return valid members that can be healed\n--@parameter IsPlayer : return only members that are real players\nlocal function GetValidMembers(IsPlayer)\n    local HealingEngineMembersALL = A.HealingEngine.GetMembersAll()\n    if not IsPlayer then \n        return #HealingEngineMembersALL\n    else \n        local total = 0 \n        if #HealingEngineMembersALL > 0 then \n            for i = 1, #HealingEngineMembersALL do\n                if Unit(HealingEngineMembersALL[i].Unit):IsPlayer() then\n                    total = total + 1\n                end\n            end \n        end \n        return total \n    end \nend\n\n-- [3] Single Rotation\nA[3] = function(icon, isMulti)\n    \n    local inCombat = Unit(player):CombatTime() > 0\n    local isMoving = Player:IsMoving()\n    local isMovingFor = A.Player:IsMovingTime()\n    local combatTime = Unit(player):CombatTime()    \n    local ShouldStop = Action.ShouldStop()\n    local Pull = Action.BossMods:GetPullTimer()\n    -- Healing Engine vars\n    local ReceivedLast5sec = FriendlyTeam(\"ALL\"):GetLastTimeDMGX(5) --Unit(player):GetLastTimeDMGX(5) -- LastIncDMG(player, 5)\n    local AVG_DMG = HealingEngine.GetIncomingDMGAVG()\n    local AVG_HPS = HealingEngine.GetIncomingHPSAVG()\n    local TeamCacheEnemySize = TeamCache.Enemy.Size\n    local TeamCacheFriendlySize = TeamCache.Friendly.Size\n    local TeamCacheFriendlyType = TeamCache.Friendly.Type or \"none\" \n    RotationsVariables()    \n    \n    \n    \n    --------------------\n    --- DPS ROTATION ---\n    --------------------    \n    local function DamageRotation(unit)\n        \n        -- Purge\n        if A.ArcaneTorrent:IsRacialReady(unit) then \n            return A.ArcaneTorrent:Show(icon)\n        end             \n        \n        -- Purge\n        if A.Purge:IsReady(unit) and inCombat and \n        (\n            ShouldPurge(unit) \n            or \n            AuraIsValid(unit, \"UsePurge\", \"PurgeHigh\") \n        )\n        then \n            return A.Purge:Show(icon)\n        end   \n        \n        -- Interrupts\n        local Interrupt = Interrupts(unit)\n        if Interrupt then \n            return Interrupt:Show(icon)\n        end         \n        \n        -- PvP CrownControl (Enemy Healer)\n        if A.IsInPvP then \n            local EnemyHealerUnitID = EnemyTeam(\"HEALER\"):GetUnitID(40)\n            \n            if EnemyHealerUnitID ~= \"none\" and A.Hex:IsReady(EnemyHealerUnitID, true, nil, nil) and A.Hex:AbsentImun(EnemyHealerUnitID, Temp.TotalAndPhysAndCCAndStun, true) and Unit(EnemyHealerUnitID):IsControlAble(\"incapacitate\", 0) and Unit(EnemyHealerUnitID):InCC() <= GetCurrentGCD() then\n                return A.Hex:Show(icon)     \n            end \n        end \n        \n        -- \n        \n        -- Bursting \n        if BurstIsON(unit) and A.AbsentImun(nil, unit, Temp.TotalAndPhys) then \n            \n            if Unit(unit):HealthPercent() <= GetToggle(2, \"RacialBurstDamaging\") then \n                if A.BloodFury:AutoRacial(unit) then \n                    return A.BloodFury:Show(icon)\n                end \n                \n                if A.Fireblood:AutoRacial(unit) then \n                    return A.Fireblood:Show(icon)\n                end \n                \n                if A.AncestralCall:AutoRacial(unit) then \n                    return A.AncestralCall:Show(icon)\n                end \n                \n                if A.Berserking:AutoRacial(unit) then \n                    return A.Berserking:Show(icon)\n                end \n            end \n        end\n        \n        -- Trinkets \n        if inMelee and A.AbsentImun(nil, unit, Temp.TotalAndPhys) and Unit(unit):HealthPercent() <= GetToggle(2, \"TrinketBurstDamaging\") then \n            if A.Trinket1:IsReady(unit) and A.Trinket1:GetItemCategory() ~= \"DEFF\" then \n                return A.Trinket1:Show(icon)\n            end \n            \n            if A.Trinket2:IsReady(unit) and A.Trinket2:GetItemCategory() ~= \"DEFF\" then \n                return A.Trinket2:Show(icon)\n            end     \n        end     \n        \n        -- Damage Rotation \n        \n        -- LavaBurst\n        if A.LavaBurst:IsReady(unit) and \n        A.LavaBurst:AbsentImun(unit, Temp.TotalAndMag) and \n        Unit(unit):HasDeBuffs(A.FlameShock.ID, true) > 0 and \n        (\n            Unit(\"player\"):HasBuffs(A.LavaSurge.ID, true) > 0 \n            or\n            A.EchooftheElements:IsSpellLearned() and A.LavaBurst:GetSpellCharges() > 1\n        )\n        then \n            return A.LavaBurst:Show(icon)\n        end \n        \n        -- FlameShock\n        if A.FlameShock:IsReady(unit) and A.FlameShock:AbsentImun(unit, Temp.TotalAndMag) and Unit(unit):HasDeBuffs(A.FlameShock.ID, true) < 3 then \n            return A.FlameShock:Show(icon)\n        end \n        \n        -- ChainLightning\n        if A.ChainLightning:IsReady(unit) and A.GetToggle(2, \"AoE\") and A.ChainLightning:AbsentImun(unit, Temp.TotalAndMag) and Unit(unit):HasDeBuffs(A.FlameShock.ID, true) > 0 and MultiUnits:GetByRange(30) > 2 then \n            return A.ChainLightning:Show(icon)\n        end \n        \n        -- LightningBolt\n        if A.LightningBolt:IsReady(unit) and A.LightningBolt:AbsentImun(unit, Temp.TotalAndMag) and Unit(unit):HasDeBuffs(A.FlameShock.ID, true) > 0 then \n            return A.LightningBolt:Show(icon)\n        end \n        \n        -- Azerite Essence \n        if A.ConcentratedFlame:AutoHeartOfAzeroth(unit) then \n            return A.ConcentratedFlame:Show(icon)\n        end \n        \n        if     (isMulti or GetToggle(2, \"AoE\")) and A.RippleinSpace:AutoHeartOfAzeroth(unit) and A.RippleinSpace:AbsentImun(unit, Temp.TotalAndMag) and MultiUnits:GetByRange(25, 3) >= 3 and \n        (\n            not A.IsInPvP or \n            not EnemyTeam(\"HEALER\"):IsBreakAble(25)    \n        ) \n        then \n            return A.RippleinSpace:Show(icon)\n        end \n        \n        -- To COntinue ? \n        \n    end \n    \n    ---------------------\n    --- HEAL ROTATION ---\n    ---------------------  \n    local function HealingRotation(unit)\n        \n        local TidalWave = Unit(player):HasBuffs(A.TidalWaveBuff.ID, true)\n        local FlashFlood = Unit(player):HasBuffs(A.FlashFloodBuff.ID, true)\n        local HWcast_t = Unit(player):CastTime(A.HealingWave.ID)\n        local HScast_t = Unit(player):CastTime(A.HealingSurge.ID)\n        \n        if Unit(player):HasBuffs(A.WaterShield.ID, true) == 0\n        then\n            return A.WaterShield:Show(icon)\n        end\n        \n        -- RESS ALL PEOPLE\n        if A.AncestralVision:IsReady(player) and\n        Unit(player):CombatTime()==0 and\n        Unit(player):GetCurrentSpeed()==0 and\n        (\n            -- MouseOver\n            (\n                A.GetToggle(2, \"mouseover\") and\n                Unit(\"mouseover\"):IsExists() and        \n                Unit(\"mouseover\"):IsDead() and\n                Unit(\"mouseover\"):IsPlayer() and        \n                (UnitInRaid(\"mouseover\") or UnitInParty(\"mouseover\")) and\n                A.MouseHasFrame() and\n                Unit(\"mouseover\"):GetRange()<=100\n            ) or \n            (\n                (\n                    not A.GetToggle(2, \"mouseover\") or \n                    not Unit(\"mouseover\"):IsExists() or \n                    IsUnitEnemy(\"mouseover\")\n                ) and\n                Unit(\"target\"):IsDead() and\n                Unit(\"target\"):IsPlayer() and\n                (UnitInRaid(\"target\") or UnitInParty(\"target\")) and\n                Unit(\"target\"):GetRange()<=100\n            )\n        )\n        then\n            return A.AncestralVision:Show(icon)\n        end\n        \n        -- RESS Single\n        if A.AncestralSpirit:IsReady(unit) and\n        Unit(player):CombatTime()==0 and\n        Unit(player):GetCurrentSpeed()==0 and\n        (\n            -- MouseOver\n            (\n                A.GetToggle(2, \"mouseover\") and\n                Unit(\"mouseover\"):IsExists() and        \n                Unit(\"mouseover\"):IsDead() and\n                Unit(\"mouseover\"):IsPlayer() and        \n                not IsUnitEnemy(\"mouseover\") and  \n                A.MouseHasFrame() and\n                A.AncestralSpirit:IsSpellInRange(\"mouseover\")\n            ) or \n            (\n                (\n                    not A.GetToggle(2, \"mouseover\") or \n                    not Unit(\"mouseover\"):IsExists() or \n                    IsUnitEnemy(\"mouseover\")\n                ) and\n                Unit(\"target\"):IsDead() and\n                Unit(\"target\"):IsPlayer() and\n                not IsUnitEnemy(\"target\") and\n                A.AncestralSpirit:IsSpellInRange(\"target\")\n            )\n        )\n        then\n            return A.AncestralSpirit:Show(icon)\n        end\n        \n        -- TremorTotem\n        if A.TremorTotem:IsReady(player) and inCombat and \n        (\n            FriendlyTeam():GetDeBuffs(\"Sleep\", 30) > 0 or\n            FriendlyTeam():GetDeBuffs(\"Fear\", 30) > 0 --or\n            -- Do we got charm check anywhere ?\n            --FriendlyTeam():IsCharmed()\n        )\n        then \n            return A.TremorTotem:Show(icon)\n        end   \n        \n        -- ArcaneTorrent\n        if A.ArcaneTorrent:IsRacialReady(unit) and inCombat then \n            return A.ArcaneTorrent:Show(icon)\n        end      \n        \n        -- Interrupts (@targettarget)\n        if unit == \"target\" and IsUnitEnemy(\"targettarget\")  and inCombat then \n            local Interrupt = Interrupts(\"targettarget\")\n            if Interrupt then \n                return Interrupt:Show(icon)\n            end \n        end    \n        \n        -- Special Mythic + logic - Critical Healing required\n        -- Return specific units to target depending on current dungeon logic triggers\n        -- Also contain specific Affixes logic\n        if UrgentMythicPlusTargetting() and inCombat and A.IsInInstance and not A.IsInPvP then\n            return true\n        end    \n        \n        -- Priority Earth Shield on tanks\n        local CurrentTanks = A.HealingEngine.GetMembersByMode(\"TANK\")\n        if not A.IsInPvP and A.EarthShield:IsReady() and EarthShieldWorkMode == \"Tanking Units\" and A.LastPlayerCastID ~= A.EarthShield.ID and ActiveEarthShieldOnTank() == 0 then\n            for i = 1, #CurrentTanks do \n                if Unit(CurrentTanks[i].Unit):GetRange() <= 40 then \n                    if Unit(CurrentTanks[i].Unit):IsPlayer() and Unit(CurrentTanks[i].Unit):HasBuffsStacks(A.EarthShield.ID, true) < 2 then    \n                        -- Notification                    \n                        Action.SendNotification(\"Placing \" .. A.GetSpellInfo(A.EarthShield.ID) .. \" on \" .. UnitName(CurrentTanks[i].Unit), A.EarthShield.ID)\n                        HealingEngine.SetTarget(CurrentTanks[i].Unit)    -- Add 1sec delay in case of emergency switch                         \n                        return A.EarthShield:Show(icon)                        \n                    end                    \n                end                \n            end    \n        end\n        \n        -- EarthShield force on MostlyIncDMG\n        if inCombat and \n        A.EarthShield:IsReady()  \n        then  \n            if EarthShieldWorkMode == \"Mostly Inc. Damage\"  then\n                HealingEngine.SetTargetMostlyIncDMG(1)   -- Add 1sec delay in case of emergency switch                 \n                -- Notification\n                if Unit(unit):HasBuffsStacks(A.EarthShield.ID, true) <= 2 then \n                    Action.SendNotification(\"Refreshing \" .. A.GetSpellInfo(A.EarthShield.ID) .. \" on : \" .. UnitName(unit), A.EarthShield.ID)            \n                    return A.EarthShield:Show(icon)    \n                end                    \n            end\n        end\n        \n        -- Priority Earth Shield\n        if CanCast and A.EarthShield:IsReady(unit) and \n        EarthShieldWorkMode == \"Auto\" and \n        (\n            -- MouseOver\n            (\n                A.GetToggle(2, \"mouseover\") and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and\n                not Unit(mouseover):IsDead() and                \n                not IsUnitEnemy(mouseover) and                 \n                A.EarthShield:IsSpellInRange(mouseover) and\n                --A.EarthShield:PredictHeal(\"EarthShield\", \"mouseover\") and\n                Unit(mouseover):HasBuffs(A.EarthShield.ID, player, true) == 0 and\n                (\n                    (\n                        HealingEngine.IsMostlyIncDMG(mouseover) and\n                        Unit(mouseover):GetRealTimeDMG() > 0\n                    ) or\n                    Unit(mouseover):Role(\"TANK\") or\n                    combatTime == 0 or\n                    -- EarthShield Tracker (is not applied for any one unit)\n                    A.HealingEngine.GetBuffsCount(A.EarthShield.ID, 0, player, true) == 0 \n                )\n            ) or \n            (\n                (\n                    not A.GetToggle(2, \"mouseover\") or \n                    not Unit(mouseover):IsExists() or \n                    IsUnitEnemy(mouseover)\n                ) and\n                not Unit(target):IsDead() and\n                not IsUnitEnemy(target) and\n                A.EarthShield:IsSpellInRange(target) and\n                --A.EarthShield:PredictHeal(\"EarthShield\", \"target\") and\n                Unit(target):HasBuffs(A.EarthShield.ID, player, true) == 0 and\n                (\n                    (\n                        HealingEngine.IsMostlyIncDMG(target) and\n                        Unit(target):GetRealTimeDMG() > 0\n                    ) or\n                    Unit(target):Role(\"TANK\") or\n                    combatTime == 0 or\n                    -- EarthShield Tracker (is not applied for any one unit)\n                    A.HealingEngine.GetBuffsCount(A.EarthShield.ID, 0, player, true) == 0 \n                )\n            )\n        )\n        then \n            return A.EarthShield:Show(icon)\n        end\n        \n        -- #1 RPvE Dispel\n        if A.PurifySpirit:IsReady(unit) and \n        (\n            -- MouseOver\n            (\n                MouseOver and        \n                A.MouseHasFrame() and                      \n                not IsUnitEnemy(mouseover) and                 \n                Unit(mouseover):IsPlayer() and  \n                Unit(mouseover):TimeToDie() >= 6 and\n                Dispel(mouseover)\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and       \n                not IsUnitEnemy(target) and\n                Unit(target):IsPlayer() and  \n                Unit(target):TimeToDie() >= 6 and\n                Dispel(target)\n            )\n        )\n        then\n            return A.PurifySpirit:Show(icon)\n        end\n        \n        -- #5 Bursting Essences                \n        -- #5.1 Life Binders Invocation\n        if A.LifeBindersInvocation:AutoHeartOfAzeroth(unit, true) and A.BurstIsON(unit) and HealingEngine.GetBelowHealthPercentUnits(LifeBindersInvocationHP, 40) >= LifeBindersInvocationUnits then\n            -- Notification                    \n            Action.SendNotification(\"Burst \" .. A.GetSpellInfo(A.LifeBindersInvocation.ID), A.LifeBindersInvocation.ID)            \n            return A.LifeBindersInvocation:Show(icon)\n        end\n        \n        -- #5.2 Overcharge Mana\n        if A.OverchargeMana:AutoHeartOfAzeroth(unit, true) then\n            return A.OverchargeMana:Show(icon)\n        end\n        \n        -- #5.3 MemoryofLucidDreams if less than 85% mana left\n        if A.MemoryofLucidDreams:AutoHeartOfAzeroth(unit, true) and Player:Mana() < Player:ManaMax() * (LucidDreamManaPercent / 100) then\n            return A.MemoryofLucidDreams:Show(icon)\n        end\n        \n        -- #5.4 Concentrated Flame Heal\n        if A.ConcentratedFlame:AutoHeartOfAzeroth(unit, true) then\n            return A.ConcentratedFlame:Show(icon)\n        end\n        \n        -- #5.5 Vitality Conduit\n        if (isMulti or AoEON) then \n            if A.VitalityConduit:AutoHeartOfAzeroth(unit, true) then \n                return A.VitalityConduit:Show(icon)\n            end\n            -- OverchargeMana    \n            if A.OverchargeMana:AutoHeartOfAzeroth(unit, true) and (not IsEnoughHPS(unit) or HealingEngine.GetIncomingDMGAVG() > HealingEngine.GetIncomingHPSAVG() + 10) then \n                return A.OverchargeMana:Show(icon)\n            end \n        end         \n        \n        -- #9 Burst Cooldowns\n        \n        -- #9.1 Ascendance\n        if A.Ascendance:IsReady(player) and A.Ascendance:IsSpellLearned() and A.BurstIsON(unit) and\n        (       \n            -- HealingEngine conditions for burst raid/party heal\n            (\n                AoEON and\n                (\n                    (\n                        not MouseOver or\n                        not A.MouseHasFrame() or\n                        not IsUnitEnemy(mouseover)\n                    ) and\n                    not IsUnitEnemy(target) \n                ) and\n                (            \n                    (\n                        TeamCacheFriendlySize > 1 and \n                        (\n                            AVG_DMG and\n                            ReceivedLast5sec and \n                            AVG_HPS and\n                            (\n                                ReceivedLast5sec > AVG_DMG + AVG_HPS or\n                                AVG_DMG >= AVG_HPS * 3\n                            ) \n                        ) and\n                        (\n                            HealingEngine.GetTimeToDieUnits(5) >= GetValidMembers(true) * 0.5 or\n                            HealingEngine.GetBelowHealthPercentUnits(60) >= GetValidMembers(true) * 0.5\n                        )\n                    ) or        \n                    (\n                        TeamCacheFriendlyType == \"party\" and\n                        HealingEngine.GetBelowHealthPercentUnits(20) >= 3  \n                    ) or \n                    (\n                        TeamCacheFriendlyType == \"raid\" and\n                        HealingEngine.GetBelowHealthPercentUnits(30) >= 5               \n                    )\n                )\n            ) or\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and               \n                not IsUnitEnemy(mouseover) and                 \n                Unit(mouseover):IsPlayer() and\n                Unit(mouseover):GetRange() <= 40 and\n                --Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) <= GetCurrentGCD() + GetGCD() and\n                Unit(mouseover):Health() <= Unit(mouseover):HealthMax() * 0.7 and\n                Unit(mouseover):GetRealTimeDMG() > 0 and\n                (                          \n                    Unit(mouseover):GetDMG() > Unit(mouseover):HealthMax()*0.2 or\n                    Unit(mouseover):GetDMG() > Unit(mouseover):GetHEAL() * 1.2 or\n                    Unit(mouseover):Health() <= Unit(mouseover):HealthMax()*0.25\n                ) and\n                Unit(mouseover):TimeToDie() > 3\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and       \n                not IsUnitEnemy(target) and\n                Unit(target):IsPlayer() and\n                Unit(target):GetRange() <= 40 and \n                --Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) <= GetCurrentGCD() + GetGCD() and\n                Unit(target):Health() <= Unit(target):HealthMax() * 0.7 and\n                Unit(target):GetRealTimeDMG() > 0 and\n                (                        \n                    Unit(target):GetDMG() > Unit(target):HealthMax() * 0.2 or\n                    Unit(target):GetDMG() > Unit(target):GetHEAL() * 1.2 or            \n                    Unit(target):Health() <= Unit(target):HealthMax() * 0.25\n                ) and        \n                Unit(target):TimeToDie() > 3\n            ) \n        )        \n        then\n            -- Notification                    \n            Action.SendNotification(\"Burst \" .. A.GetSpellInfo(A.Ascendance.ID), A.Ascendance.ID)\n            return A.Ascendance:Show(icon)\n        end        \n        \n        -- Spirit Link Totem\n        if A.SpiritLinkTotem:IsReady(player) and \n        A.BurstIsON(unit) and \n        combatTime > 5 and\n        (            \n            (\n                TeamCacheFriendlySize > 1 and \n                (\n                    AVG_DMG and\n                    ReceivedLast5sec and \n                    AVG_HPS and\n                    (\n                        ReceivedLast5sec > (AVG_DMG + AVG_HPS) * 2 or\n                        AVG_DMG >= AVG_HPS * 5\n                    ) \n                ) and\n                (\n                    HealingEngine.GetTimeToDieUnits(5) >= GetValidMembers(true) * 0.5 or\n                    HealingEngine.GetBelowHealthPercentUnits(25) >= GetValidMembers(true) * 0.5\n                )\n            ) or        \n            (\n                TeamCacheFriendlyType == \"party\" and\n                HealingEngine.GetBelowHealthPercentUnits(15) >= 3  \n            ) or \n            (\n                TeamCacheFriendlyType == \"raid\" and\n                HealingEngine.GetBelowHealthPercentUnits(15) >= 5               \n            ) or\n            A.HealingEngine.GetTimeToFullDie() < 3\n        )\n        then\n            -- Notification                    \n            Action.SendNotification(\"Burst \" .. A.GetSpellInfo(A.SpiritLinkTotem.ID), A.SpiritLinkTotem.ID)                \n            return A.SpiritLinkTotem:Show(icon)\n        end\n        \n        -- #9.3 HealingTideTotem            \n        if A.HealingTideTotem:IsReady(player) and\n        A.BurstIsON(unit) and \n        combatTime > 5 and \n        (        \n            (\n                TeamCache.Friendly.Size <= 2 and\n                HealingEngine.GetBelowHealthPercentUnits(45) >= 2\n            ) or\n            (\n                TeamCache.Friendly.Size <= 5 and\n                HealingEngine.GetBelowHealthPercentUnits(HealingTideTotemPartyHP) >= HealingTideTotemPartyUnits\n            ) or\n            (\n                TeamCache.Friendly.Size > 5 and      \n                HealingEngine.GetBelowHealthPercentUnits(HealingTideTotemRaidHP) >= HealingTideTotemRaidUnits\n            ) or     \n            HealingEngine.GetHealthFrequency(GetGCD()*2) > 35\n            or\n            A.HealingEngine.GetTimeToFullDie() < 4\n        )          \n        then\n            -- Notification                    \n            Action.SendNotification(\"Burst \" .. A.GetSpellInfo(A.HealingTideTotem.ID), A.HealingTideTotem.ID)                \n            return A.HealingTideTotem:Show(icon)\n        end\n        \n        -- RPvE #1 Riptide (HPS)\n        if A.Riptide:IsReadyByPassCastGCD(unit) and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.Riptide:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                A.Riptide:PredictHeal(mouseover) and\n                (\n                    (\n                        Action.InstanceInfo.KeyStone > 0 and\n                        Action.InstanceInfo.GroupSize <= 5\n                    ) \n                    or \n                    Unit(mouseover):TimeToDie() <= GetGCD() * 2.5 or\n                    (\n                        (\n                            -- Ascendance\n                            Unit(player):HasBuffs(A.Ascendance.ID, true) < GetCurrentGCD() + GetGCD() or\n                            -- CloudburstTotem snipe \n                            (\n                                CloudburstTotemDuration() > 0 and\n                                CloudburstTotemDuration() < GetCurrentGCD() + GetGCD()\n                            )\n                        ) and \n                        (                                   \n                            -- Tidal Wave Buff                          \n                            Unit(player):HasBuffs(A.TidalWaveBuff.ID, true) <= Unit(player):CastTime(A.ChainHeal.ID) + GetCurrentGCD() + 0.3 or                    \n                            Unit(player):GetCurrentSpeed() ~= 0 \n                        )\n                    )\n                )        \n            ) \n            or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.Riptide:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                A.Riptide:PredictHeal(target) and\n                (\n                    (\n                        Action.InstanceInfo.KeyStone > 0 and\n                        Action.InstanceInfo.GroupSize <= 5\n                    ) \n                    or \n                    Unit(target):TimeToDie() <= GetGCD() * 2.5 or\n                    (\n                        (\n                            -- Ascendance\n                            Unit(player):HasBuffs(A.Ascendance.ID, true) < GetCurrentGCD() + GetGCD() or\n                            -- CloudburstTotem snipe \n                            (\n                                CloudburstTotemDuration() > 0 and\n                                CloudburstTotemDuration() < GetCurrentGCD() + GetGCD() * 2\n                            )\n                        ) and \n                        (                                   \n                            -- Tidal Wave Buff                          \n                            Unit(player):HasBuffs(A.TidalWaveBuff.ID, true) <= Unit(player):CastTime(A.ChainHeal.ID) + GetCurrentGCD() + 0.3 or                    \n                            Unit(player):GetCurrentSpeed() ~= 0 \n                        )\n                    )\n                )           \n            ) \n        ) and\n        A.LastPlayerCastID ~= A.Riptide.ID      \n        then\n            return A.Riptide:Show(icon)\n        end\n        \n        -- RPvE #1 Healing Stream Totem Maintain\n        --if we have 3+ melee units which can be healed or while run \n        if A.HealingStreamTotem:IsReady(player) and\n        not A.CloudburstTotem:IsSpellLearned() and\n        HealingStreamTotemDuration() < GetGCD() + 0.1 and \n        A.GetToggle(2, \"AoE\") and\n        -- Mana Check\n        (\n            not IsSaveManaPhase() or\n            Unit(player):HasBuffs(29166, player, true) > GetCurrentGCD() + 0.2 \n        ) and\n        (\n            -- MouseOver\n            (\n                A.GetToggle(2, \"mouseover\") and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and\n                not Unit(mouseover):IsDead() and                \n                not IsUnitEnemy(mouseover) and  \n                Unit(\"mouseover\"):IsPlayer() and\n                Unit(mouseover):CanInterract(40) and\n                (\n                    Unit(player):GetCurrentSpeed() > 0 or\n                    HealingStreamTotemDuration() <= HealingStreamTotemRefresh  \n                ) and\n                A.HealingStreamTotem:PredictHeal(\"mouseover\")        \n            ) or \n            (\n                (\n                    not A.GetToggle(2, \"mouseover\") or \n                    not Unit(mouseover):IsExists() or \n                    IsUnitEnemy(mouseover)\n                ) and\n                not Unit(target):IsDead() and\n                not IsUnitEnemy(target) and\n                Unit(\"target\"):IsPlayer() and\n                Unit(target):CanInterract(40) and\n                (\n                    Unit(player):GetCurrentSpeed() > 0 or\n                    HealingStreamTotemDuration() <= HealingStreamTotemRefresh                    \n                ) and\n                A.HealingStreamTotem:PredictHeal(\"target\") \n            ) or\n            HealingEngine.HealingByRange(40, nil, A.Riptide, true) >= 3\n            or     \n            HealingEngine.GetHealthFrequency(GetGCD()*2) > 15\n        ) and\n        A.LastPlayerCastID ~= A.HealingStreamTotem.ID\n        then \n            return A.HealingStreamTotem:Show(icon)\n        end    \n        \n        -- RPvE #1 Cloudburst Totem Recall in the 0 - 5sec range remain\n        if A.CloudburstTotem:IsSpellLearned() and A.CloudburstTotem:IsReady(player) and\n        CloudburstTotemDuration() > 0 and\n        CloudburstTotemDuration() < 5 and\n        A.CloudburstTotem:GetSpellTimeSinceLastCast() > 10 and\n        combatTime > 3 and\n        (        \n            (\n                TeamCache.Friendly.Size <= 2 and\n                HealingEngine.GetBelowHealthPercentUnits(85) >= 2\n            ) or\n            (\n                TeamCache.Friendly.Size <= 5 and\n                HealingEngine.GetBelowHealthPercentUnits(85) >= 3\n            ) or\n            (\n                TeamCache.Friendly.Size > 5 and      \n                HealingEngine.GetBelowHealthPercentUnits(85) >= 5\n            ) or     \n            -- Big damage\n            HealingEngine.GetHealthFrequency(GetGCD()*2) > 25\n            or\n            HealingEngine.GetHealthAVG() < 92\n        ) and\n        A.LastPlayerCastID ~= A.CloudburstTotem.ID\n        then \n            return A.CloudburstTotem:Show(icon)\n        end         \n        \n        -- RPvE #2 Cloudburst Totem Call\n        if A.CloudburstTotem:IsSpellLearned() and A.CloudburstTotem:IsReady(player) and\n        CloudburstTotemDuration() <= 0 and\n        combatTime > 2  and\n        (        \n            (\n                TeamCache.Friendly.Size <= 2 and\n                HealingEngine.GetBelowHealthPercentUnits(95) >= 2\n            ) or\n            (\n                TeamCache.Friendly.Size <= 5 and\n                HealingEngine.GetBelowHealthPercentUnits(92) >= 3\n            ) or\n            (\n                TeamCache.Friendly.Size > 5 and      \n                HealingEngine.GetBelowHealthPercentUnits(94) >= 5\n            ) or\n            HealingEngine.GetHealthFrequency(GetGCD()*2) > 5\n            or\n            HealingEngine.GetHealthAVG() < 95\n        )    and\n        A.LastPlayerCastID ~= A.CloudburstTotem.ID\n        then \n            return A.CloudburstTotem:Show(icon)\n        end         \n        \n        -- RPvE #1 UnleashLife\n        if A.UnleashLife:IsReady(unit) and\n        -- Unleash Life buff\n        Unit(player):HasBuffs(73685, player, true) == 0 and\n        (\n            -- MouseOver\n            (\n                A.GetToggle(2, \"mouseover\") and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and\n                not Unit(mouseover):IsDead() and                \n                not IsUnitEnemy(mouseover) and                 \n                A.UnleashLife:IsSpellInRange(mouseover) and\n                A.UnleashLife:PredictHeal(\"mouseover\") and\n                (\n                    Unit(mouseover):Health() <= Unit(mouseover):HealthMax()*0.95\n                )\n            ) or \n            (\n                (\n                    not A.GetToggle(2, \"mouseover\") or \n                    not Unit(mouseover):IsExists() or \n                    IsUnitEnemy(mouseover)\n                ) and\n                not Unit(target):IsDead() and\n                not IsUnitEnemy(target) and\n                A.UnleashLife:IsSpellInRange(target) and\n                A.UnleashLife:PredictHeal(\"target\") and\n                (\n                    Unit(target):Health() <= Unit(target):HealthMax()*0.95\n                )\n            )\n        ) and\n        A.LastPlayerCastID ~= A.UnleashLife.ID\n        then \n            return A.UnleashLife:Show(icon)\n        end \n        \n        -- SpiritWalkersGrace\n        if A.SpiritWalkersGrace:IsReady(player) and\n        isMoving and\n        UseSpiritWalkersGrace and\n        isMovingFor >= SpiritWalkersGraceTime and\n        (\n            (\n                TeamCacheFriendlyType == \"party\" and\n                HealingEngine.GetBelowHealthPercentUnits(25) >= 3  \n            ) or \n            (\n                TeamCacheFriendlyType == \"raid\" and\n                HealingEngine.GetBelowHealthPercentUnits(35) >= 4               \n            ) or\n            A.IsInPvP and Unit(player):IsFocused(\"MELEE\") and\n            (\n                CanSpiritWalkersGrace(\"CATCH\") and SpiritWalkersCatch\n                or \n                CanSpiritWalkersGrace()\n                or\n                Unit(player):HasBuffs(A.Ascendance.ID, true) > 3\n            )\n        )\n        then \n            return A.SpiritWalkersGrace:Show(icon)\n        end     \n        \n        -- RPvE #1 Chain Heal\n        if A.ChainHeal:IsReady(unit) and\n        (\n            not A.IsInPvP \n            or \n            A.Tidebringer:IsSpellLearned() and Unit(player):HasBuffsStacks(236502, true) > 0\n        ) and\n        A.GetToggle(2, \"AoE\") and\n        TeamCache.Friendly.Size > 2 and\n        -- UnleashLife\n        (\n            A.UnleashLife:IsSpellLearned() and \n            (    \n                Unit(player):HasBuffs(A.UnleashLife.ID, true) > 0 or\n                A.UnleashLife:GetCooldown() > 10 \n            ) or\n            not A.UnleashLife:IsSpellLearned()\n        ) and        \n        (        \n            (\n                TeamCache.Friendly.Size <= 5 and\n                HealingEngine.GetBelowHealthPercentUnits(ChainHealPartyHP) >= ChainHealPartyUnits and\n                Unit(player):HasBuffs(A.TidalWaveBuff.ID, true) == 0\n            ) or\n            (\n                TeamCache.Friendly.Size > 5 and      \n                HealingEngine.GetBelowHealthPercentUnits(ChainHealRaidHP) >= ChainHealRaidUnits \n            ) or     \n            HealingEngine.GetHealthFrequency(GetGCD()*2) > 10\n        )\n        then \n            return A.ChainHeal:Show(icon)\n        end \n        \n        -- HPvE #1 HealingSurge Critical Dungeon        \n        if A.HealingSurge:IsReady(unit) and \n        -- TidalWave\n        TidalWave > 0 and\n        TidalWave > HScast_t + GetCurrentGCD() + 0.1 and\n        (\n            Unit(player):GetCurrentSpeed() == 0 \n            or \n            Unit(player):HasBuffs(A.SpiritWalkersGrace.ID, true) > HScast_t + GetCurrentGCD() + 0.1 \n        )and \n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.HealingSurge:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) < HScast_t + GetCurrentGCD() and\n                A.HealingSurge:PredictHeal(mouseover) and\n                Unit(mouseover):TimeToDie() > HScast_t + GetCurrentGCD() + 2 and\n                (\n                    Unit(mouseover):IsTank() or\n                    HealingEngine.IsMostlyIncDMG(mouseover) or\n                    Unit(mouseover):Health() < Unit(mouseover):HealthMax() * 0.8 --or\n                    --Unit(mouseover):HealthPercent() < FlashofLightHP or\n                    --Unit(mouseover):TimeToDieX(3) < FlashofLightTTD    \n                )\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.HealingSurge:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) < HScast_t + GetCurrentGCD() and\n                A.HealingSurge:PredictHeal(target) and\n                Unit(target):TimeToDie() > HScast_t + GetCurrentGCD() + 2 and\n                (\n                    Unit(target):IsTank() or\n                    HealingEngine.IsMostlyIncDMG(target) or\n                    Unit(target):Health() < Unit(target):HealthMax() * 0.8 --or\n                    --Unit(target):HealthPercent() < FlashofLightHP or\n                    --Unit(target):TimeToDieX(5) < FlashofLightTTD                \n                )\n            ) or\n            -- Save us\n            (\n                Unit(player):HealthPercent() < 60 or\n                Unit(player):TimeToDieX(5) < 2    \n            )            \n        )\n        then\n            return A.HealingSurge:Show(icon)\n        end\n        \n        -- HPvE #1 HealingWave - Low to Moderate Dungeon\n        if A.HealingWave:IsReady(unit) and         \n        (\n            Unit(player):GetCurrentSpeed() == 0 \n            or \n            Unit(player):HasBuffs(A.SpiritWalkersGrace.ID, true) > HScast_t + GetCurrentGCD() + 0.1 \n        )and \n        (\n            TidalWave > 0 and TidalWave > HWcast_t + GetCurrentGCD() + 0.1\n            or \n            A.FlashFlood:IsSpellLearned() and FlashFlood > 0 and FlashFlood > HWcast_t + GetCurrentGCD() + 0.1\n        ) and \n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.HealingWave:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) < HWcast_t + GetCurrentGCD() and\n                A.HealingWave:PredictHeal(mouseover) and\n                Unit(mouseover):TimeToDie() > HWcast_t + GetCurrentGCD() + 1\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() or \n                    IsUnitEnemy(mouseover)\n                ) and        \n                not IsUnitEnemy(target) and\n                A.HealingWave:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) < HWcast_t + GetCurrentGCD() and\n                A.HealingWave:PredictHeal(target) and\n                Unit(target):TimeToDie() > HWcast_t + GetCurrentGCD() + 1\n            )   \n        )\n        then\n            return A.HealingWave:Show(icon)\n        end    \n        \n        \n        -- RPvE #1 HealingRain \n        if A.HealingRain:IsReady(player) and\n        not A.IsInPvP and\n        Unit(player):GetCurrentSpeed() == 0 and\n        Player:IsStayingTime() > 3 and\n        A.GetToggle(2, \"AoE\") and\n        HealingRainDuration() <= HealingRainRefresh and\n        -- Mana Check\n        (\n            not IsSaveManaPhase() or\n            Unit(player):HasBuffs(29166, player, true) > GetCurrentGCD() + 0.2 \n        ) and\n        (        \n            (\n                TeamCache.Friendly.Size <= 2 and\n                HealingEngine.GetBelowHealthPercentUnits(95) >= 2\n            ) or\n            (\n                TeamCache.Friendly.Size <= 5 and\n                HealingEngine.GetBelowHealthPercentUnits(95) >= 3\n            ) or\n            (\n                TeamCache.Friendly.Size > 5 and      \n                HealingEngine.GetBelowHealthPercentUnits(90) >= 5\n            ) or     \n            HealingEngine.GetHealthFrequency(GetGCD()*4) > 10\n        )\n        then \n            return A.HealingRain:Show(icon)\n        end     \n        \n        -- RPvE #1 Earthen Wall Totem \n        if A.EarthenWallTotem:IsReady(player) and\n        (        \n            (\n                TeamCache.Friendly.Size <= 2 and\n                HealingEngine.GetBelowHealthPercentUnits(95) >= 2\n            ) or\n            (\n                TeamCache.Friendly.Size <= 5 and\n                HealingEngine.GetBelowHealthPercentUnits(95) >= 3\n            ) or\n            (\n                TeamCache.Friendly.Size > 5 and      \n                HealingEngine.GetBelowHealthPercentUnits(90) >= 5\n            ) or     \n            HealingEngine.GetHealthFrequency(GetGCD()*4) > 10\n        )\n        then \n            return A.EarthenWallTotem:Show(icon)\n        end \n        \n        -- RPvE #1 Wellspring\n        if A.Wellspring:IsReady(unit) and\n        A.GetToggle(2, \"AoE\") and\n        TeamCache.Friendly.Size > 2 and        \n        (        \n            (\n                TeamCache.Friendly.Size <= 5 and\n                HealingEngine.GetBelowHealthPercentUnits(70) >= 4\n            ) or\n            (\n                TeamCache.Friendly.Size > 5 and      \n                HealingEngine.GetBelowHealthPercentUnits(90) >= 4\n            ) or     \n            HealingEngine.GetHealthFrequency(GetGCD()*4) > 20\n        )\n        then \n            return A.Wellspring:Show(icon)\n        end \n        \n        -- HPvE #2 HealingSurge Critical Raid\n        if A.HealingSurge:IsReady(unit) and \n        (\n            Unit(player):GetCurrentSpeed() == 0 \n            or \n            Unit(player):HasBuffs(A.SpiritWalkersGrace.ID, true) > HScast_t + GetCurrentGCD() + 0.1 \n        )and \n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.HealingSurge:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) < HScast_t + GetCurrentGCD() and\n                A.HealingSurge:PredictHeal(mouseover) and\n                Unit(mouseover):TimeToDie() > HScast_t + GetCurrentGCD() + 2 and\n                (\n                    Unit(mouseover):IsTank() or\n                    HealingEngine.IsMostlyIncDMG(mouseover) or\n                    Unit(mouseover):Health() < Unit(mouseover):HealthMax() * 0.8 --or\n                    --Unit(mouseover):HealthPercent() < FlashofLightHP or\n                    --Unit(mouseover):TimeToDieX(3) < FlashofLightTTD    \n                )\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.HealingSurge:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) < HScast_t + GetCurrentGCD() and\n                A.HealingSurge:PredictHeal(target) and\n                Unit(target):TimeToDie() > HScast_t + GetCurrentGCD() + 2 and\n                (\n                    Unit(target):IsTank() or\n                    HealingEngine.IsMostlyIncDMG(target) or\n                    Unit(target):Health() < Unit(target):HealthMax() * 0.8 --or\n                    --Unit(target):HealthPercent() < FlashofLightHP or\n                    --Unit(target):TimeToDieX(5) < FlashofLightTTD                \n                )\n            ) or\n            -- Save us\n            (\n                Unit(player):HealthPercent() < 60 or\n                Unit(player):TimeToDieX(5) < 2    \n            )            \n        )\n        then\n            return A.HealingSurge:Show(icon)\n        end\n        \n        -- HPvE #2 HealingWave - Low to Moderate Raid        \n        if A.HealingWave:IsReady(unit) and         \n        (\n            Unit(player):GetCurrentSpeed() == 0 \n            or \n            Unit(player):HasBuffs(A.SpiritWalkersGrace.ID, true) > HScast_t + GetCurrentGCD() + 0.1 \n        )and  \n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.HealingWave:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) < HWcast_t + GetCurrentGCD() and\n                A.HealingWave:PredictHeal(mouseover) and\n                Unit(mouseover):TimeToDie() > HWcast_t + GetCurrentGCD() + 1\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() or \n                    IsUnitEnemy(mouseover)\n                ) and        \n                not IsUnitEnemy(target) and\n                A.HealingWave:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) < HWcast_t + GetCurrentGCD() and\n                A.HealingWave:PredictHeal(target) and\n                Unit(target):TimeToDie() > HWcast_t + GetCurrentGCD() + 1\n            )\n            or\n            -- Save us\n            (\n                Unit(player):HealthPercent() < 91 or\n                Unit(player):TimeToDieX(15) < 5    \n            )    \n        )\n        then\n            return A.HealingWave:Show(icon)\n        end    \n    end \n    \n    -- GhostWolf if out of range \n    if A.GhostWolf:IsReady(player) and A.GhostWolf:GetSpellTimeSinceLastCast() > 2 and not A.LastPlayerCastID == A.GhostWolf.ID and UseGhostWolf and Unit(player):HasBuffs(A.GhostWolf.ID, true) == 0 and \n    (\n        isMovingFor > GhostWolfTime  \n        or\n        -- Defensives\n        Unit(\"player\"):IsFocused(\"MELEE\", true) and Unit(\"player\"):HealthPercent() < 90 and A.IsInPvP and A.SpiritWolf:IsSpellLearned()\n    )\n    then\n        return A.GhostWolf:Show(icon)\n    end    \n    if A.IsInPvP and Unit(player):HasBuffs(A.GhostWolf.ID, true) > 0 and A.SpiritWolf:IsSpellLearned() then        \n        return A.PoolResource:Show(icon)\n    end        \n    \n    -- Defensive\n    local SelfDefensive = SelfDefensives()\n    if SelfDefensive then \n        return SelfDefensive:Show(icon)\n    end \n    \n    -- Friendly Mouseover\n    if A.IsUnitFriendly(mouseover) then \n        unit = mouseover  \n        \n        if HealingRotation(unit) then \n            return true \n        end             \n    end\n    \n    -- Heal Target \n    if A.IsUnitFriendly(target) then \n        unit = target \n        \n        if HealingRotation(unit) then \n            return true \n        end \n    end    \n    \n    -- Enemy Mouseover \n    if A.IsUnitEnemy(mouseover) then \n        unit = mouseover    \n        \n        if DamageRotation(unit) then \n            return true \n        end \n    end \n    \n    -- DPS Target     \n    if A.IsUnitEnemy(target) then \n        unit = target\n        \n        if DamageRotation(unit) then \n            return true \n        end \n    end \n    \n    -- DPS targettarget     \n    if A.IsUnitEnemy(targettarget) then \n        unit = targettarget\n        \n        if DamageRotation(unit) then \n            return true \n        end \n    end \n    \nend \n\n-- [4] AoE Rotation\nA[4] = function(icon)\n    return A[3](icon, true)\nend \n\n-- [5] Trinket Rotation\n-- No specialization trinket actions \nA[5] = nil \n\nlocal function ArenaRotation(icon, unit)\n    if A.IsInPvP and (Action.Zone == \"pvp\" or Action.Zone == \"arena\") and not Player:IsStealthed() and not Player:IsMounted() then\n        -- Note: \"arena1\" is just identification of meta 6\n        if (unit == \"arena1\" or unit == \"arena2\" or unit == \"arena3\") and (Unit(player):GetDMG() == 0 or not Unit(player):IsFocused(\"DAMAGER\")) then \n            \n            -- Interrupt\n            local Interrupt = Interrupts(unit)\n            if Interrupt then \n                return Interrupt:Show(icon)\n            end    \n            \n            -- Hex BreakAble CC\n            if A.Hex:IsReady(unit) and EnemyTeam():IsCastingBreakAble(0.25) then \n                return A.Hex\n            end \n        end\n    end \nend \n\nlocal function PartyRotation(unit)\n    if (unit == \"party1\" and not A.GetToggle(2, \"PartyUnits\")[1]) or (unit == \"party2\" and not A.GetToggle(2, \"PartyUnits\")[2]) then \n        return false \n    end\n    \n    -- TremorTotem\n    if A.TremorTotem:IsReady(player) and Unit(unit):HasDeBuffs(\"Fear\") > 0 then\n        return A.TremorTotem\n    end\n    \n    -- Purify Spirit\n    if A.PurifySpirit:IsReady(unit) and      \n    (\n        Unit(unit):IsPlayer() and  \n        Unit(unit):TimeToDie() >= 6 and\n        AuraIsValid(unit, \"UseDispel\", \"Dispel\")    \n    )\n    then\n        return A.PurifySpirit\n    end\n    \nend \n\nA[6] = function(icon)\n    -- Call rotations variables\n    RotationsVariables()\n    \n    -- StopCast OverHeal\n    -- if Temp.LastPrimaryUnitID and CanStopCastingOverHeal() and StopCastOverHeal then \n    --     return A:Show(icon, ACTION_CONST_STOPCAST)\n    --  end\n    \n    -- Stop Cast M+ Quake Affix\n    if Unit(player):IsCastingRemains() > 0 and StopCastQuake and Unit(player):HasDeBuffs(A.Quake.ID) <= StopCastQuakeSec and Unit(player):HasDeBuffs(A.Quake.ID) > 0 then\n        return A:Show(icon, ACTION_CONST_STOPCAST)\n    end\n    \n    --if RotationPassive(icon) then \n    --    return true \n    --end \n    \n    local Arena = ArenaRotation(\"arena1\")\n    if Arena then \n        return Arena:Show(icon)\n    end \nend\n\nA[7] = function(icon)\n    --if RotationPassive(icon) then \n    --    return true \n    --end \n    \n    local Party = PartyRotation(\"party1\") \n    if Party then \n        return Party:Show(icon)\n    end   \n    \n    local Arena = ArenaRotation(\"arena2\")\n    if Arena then \n        return Arena:Show(icon)\n    end \nend\n\nA[8] = function(icon)\n    --if RotationPassive(icon) then \n    --    return true \n    --end \n    \n    local Party = PartyRotation(\"party2\") \n    if Party then \n        return Party:Show(icon)\n    end     \n    \n    local Arena = ArenaRotation(\"arena3\")\n    if Arena then \n        return Arena:Show(icon)\n    end \nend",
				}, -- [3]
				{
					["Name"] = "Prediction Healing",
					["Code"] = "local _G, math, error                = _G, math, error\nlocal math_ceil                        = math.ceil\nlocal math_max                        = math.max\n\nlocal TMW                             = _G.TMW\n\nlocal A                             = _G.Action\nlocal CONST                         = A.Const\nlocal HealingEngine                    = Action.HealingEngine\nlocal Unit                             = A.Unit \nlocal GetCurrentGCD                    = A.GetCurrentGCD\nlocal GetSpellDescription            = A.GetSpellDescription\nlocal GetToggle                        = A.GetToggle\nlocal GetLatency                    = A.GetLatency\n\nlocal HealingEngineIsManaSave        = HealingEngine.IsManaSave\n\nlocal RESTO                         = A[CONST.SHAMAN_RESTORATION]\n\nlocal UnitIsUnit                    = _G.UnitIsUnit\n\n\n-- Resto Shaman Mastery Calculate Deep Healing    \nlocal function GetHealingModifier(unitID)\n    local extraHealModifier = 1\n    \n    if A.IamHealer then           \n        local total, mastery = 0, 1\n        local deephealing = 0\n        local UnitHP = Unit(unitID):HealthPercent() / 100 or 0    \n        local bonus = GetMasteryEffect()        \n        mastery = bonus / 100\n        extraHealModifier = (1 + mastery * (1 - UnitHP))\n    end \n    \n    return extraHealModifier\nend \n\nfunction A:PredictHeal(unitID, variation)  \n    -- @usage obj:PredictHeal(unitID[, variation]) \n    -- @return boolean, number \n    -- Returns:\n    -- [1] true if action can be used\n    -- [2] total amount of predicted missed health \n    -- Any healing spell can be applied     \n    if Unit(unitID):IsPenalty() then\n        return true, 0\n    end     \n    \n    local PO = GetToggle(8, \"PredictOptions\")\n    -- PO[1] incHeal\n    -- PO[2] incDMG\n    -- PO[3] threat -- not usable in prediction\n    -- PO[4] HoTs\n    -- PO[5] absorbPossitive\n    -- PO[6] absorbNegative\n    local defaultVariation, isManaSave\n    local variation = variation or 1\n    if A.IamHealer and HealingEngineIsManaSave(unitID) then \n        isManaSave = true \n        defaultVariation = variation\n        variation = math_max(variation - 1 + GetToggle(8, \"ManaManagementPredictVariation\"), 1)        \n    end \n    \n    -- Healing Surge\n    if self.predictName == \"HealingSurge\" then        \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total           \n    end \n    \n    -- Healing Wave\n    if self.predictName == \"HealingWave\" then        \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total          \n    end\n    \n    -- Riptide \n    if self.predictName == \"Riptide\" then    \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        -- Get back variation if we have buff up ThunderFocusTea\n        if isManaSave and Unit(\"player\"):HasBuffs(MK.ThunderFocusTea.ID, true) > 0 then \n            variation = defaultVariation\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = (desc[1] * variation * extraHealModifier) + (desc[2] * variation * 1.7)\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total   \n        \n    end \n    \n    -- UnleashLife\n    if self.predictName == \"UnleashLife\" then    \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total   \n    end \n    \n    -- HealingStreamTotem\n    if self.predictName == \"HealingStreamTotem\" then\n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        -- Get back variation if we have buff up ThunderFocusTea\n        if isManaSave and Unit(\"player\"):HasBuffs(MK.ThunderFocusTea.ID, true) > 0 then \n            variation = defaultVariation\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = (desc[1] * variation * extraHealModifier) + (desc[2] * variation * 1.7)\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end    \n    \n    -- HealingTideTotem\n    if self.predictName == \"HealingTideTotem\" then\n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        -- Get back variation if we have buff up ThunderFocusTea\n        if isManaSave and Unit(\"player\"):HasBuffs(MK.ThunderFocusTea.ID, true) > 0 then \n            variation = defaultVariation\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = (desc[1] * variation * extraHealModifier) + (desc[2] * variation * 1.7)\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- EarthShield    \n    if self.predictName == \"EarthShield\" then  \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        -- Get back variation if we have buff up ThunderFocusTea\n        if isManaSave and Unit(\"player\"):HasBuffs(MK.ThunderFocusTea.ID, true) > 0 then \n            variation = defaultVariation\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = (desc[1] * variation * extraHealModifier) + (desc[2] * variation * 1.7)\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end\n    \n    -- Debug \n    if not self.predictName then \n        error((self:GetKeyName() or \"Unknown action name\") .. \" doesn't contain predictName\")        \n    end \n    \n    return false, 0\n    \nend\n\n\n",
				}, -- [4]
				["n"] = 4,
			},
			["ForceNoBlizzCC"] = true,
			["Groups"] = {
				{
					["GUID"] = "TMW:group:1Rhh0xLqd4g8",
					["Point"] = {
						["y"] = 12,
						["x"] = -29,
						["point"] = "TOPLEFT",
						["relativePoint"] = "TOPLEFT",
					},
					["Scale"] = 0.600000023841858,
					["TimerBar_CompleteColor"] = "ff000000",
					["Name"] = "Shown Main",
					["TimerBar_StartColor"] = "ff000000",
					["Locked"] = true,
					["Columns"] = 8,
					["Icons"] = {
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0KeNg=IDQd", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0KeNh2uwMT", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["GUID"] = "TMW:icon:1T0MjrGnynSL",
							["Icons"] = {
								"TMW:icon:1T0Kg0ZzHksM", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["GUID"] = "TMW:icon:1T0NdouSxYDb",
							["Icons"] = {
								"TMW:icon:1T0Kg0a1tFci", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0a6eYf9", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aBPYen", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aG1oeM", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aKbPUI", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
					["TimerBar_MiddleColor"] = "ff000000",
				}, -- [1]
				{
					["GUID"] = "TMW:group:1T0KXe2TsCkW",
					["Point"] = {
						["y"] = 50,
						["x"] = -29.0000038146973,
						["point"] = "TOPLEFT",
						["relativePoint"] = "TOPLEFT",
					},
					["Scale"] = 0.600000023841858,
					["TimerBar_CompleteColor"] = "ff000000",
					["Name"] = "Hidden APL",
					["TimerBar_StartColor"] = "ff000000",
					["Locked"] = true,
					["Columns"] = 8,
					["Icons"] = {
						{
							["GUID"] = "TMW:icon:1T0KeNg=IDQd",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["GUID"] = "TMW:icon:1T0KeNh2uwMT",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["GUID"] = "TMW:icon:1T0Kg0ZzHksM",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["GUID"] = "TMW:icon:1T0Kg0a1tFci",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["GUID"] = "TMW:icon:1T0Kg0a6eYf9",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["GUID"] = "TMW:icon:1T0Kg0aBPYen",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["GUID"] = "TMW:icon:1T0Kg0aG1oeM",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["GUID"] = "TMW:icon:1T0Kg0aKbPUI",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
					["TimerBar_MiddleColor"] = "ff000000",
				}, -- [2]
				{
					["GUID"] = "TMW:group:1P3cu8AAtSYM",
					["Locked"] = true,
					["Columns"] = 1,
					["Name"] = "Visible APL",
					["Scale"] = 2.5,
					["Conditions"] = {
						{
							["Name"] = "return not GetToggle(1, \"DisableRotationDisplay\")",
							["Type"] = "LUA",
						}, -- [1]
						["n"] = 1,
					},
					["Icons"] = {
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Events"] = {
								{
									["OnlyShown"] = true,
									["Type"] = "Lua",
									["Lua"] = "Action.ToggleMainUI()",
									["Event"] = "OnRightClick",
								}, -- [1]
								["n"] = 1,
							},
							["GUID"] = "TMW:icon:1T0MjsTsMtq6",
							["Icons"] = {
								"TMW:icon:1T0MjrGnynSL", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [121]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [122]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [123]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [124]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [125]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [126]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [127]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [128]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [129]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [130]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [131]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [132]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [133]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [134]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [135]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [136]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [137]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [138]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [139]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [140]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [141]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [142]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [143]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [144]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [145]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [146]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [147]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [148]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [149]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [150]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [151]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [152]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [153]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [154]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [155]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [156]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [157]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [158]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [159]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [160]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [161]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [162]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [163]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [164]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [165]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [166]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [167]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [168]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [169]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [170]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [171]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [172]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [173]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [174]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [175]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [176]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [177]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [178]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [179]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [180]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [181]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [182]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [183]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [184]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [185]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [186]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [187]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [188]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [189]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [190]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [191]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [192]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [193]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [194]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [195]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [196]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [197]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [198]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [199]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [200]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [201]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [202]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [203]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [204]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [205]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [206]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [207]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [208]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [209]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [210]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [211]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [212]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [213]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [214]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [215]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [216]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [217]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [218]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [219]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [220]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [221]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [222]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [223]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [224]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [225]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [226]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [227]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [228]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [229]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [230]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [231]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [232]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [233]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [234]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [235]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [236]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [237]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [238]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [239]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [240]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [241]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [242]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [243]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [244]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [245]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [246]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [247]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [248]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [249]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [250]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [251]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [252]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [253]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [254]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [255]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [256]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [257]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [258]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [259]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [260]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [261]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [262]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [263]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [264]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [265]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [266]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [267]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [268]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [269]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [270]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [271]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [272]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [273]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [274]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [275]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [276]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [277]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [278]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [279]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [280]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [281]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [282]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [283]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [284]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [285]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [286]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [287]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [288]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [289]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [290]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [291]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [292]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [293]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [294]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [295]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [296]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [297]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [298]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [299]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [300]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [301]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [302]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [303]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [304]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [305]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [306]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [307]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [308]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [309]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [310]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [311]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [312]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [313]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [314]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [315]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [316]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [317]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [318]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [319]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [320]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [321]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [322]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [323]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [324]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [325]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [326]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [327]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [328]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [329]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [330]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [331]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [332]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [333]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [334]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [335]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [336]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [337]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [338]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [339]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [340]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [341]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [342]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [343]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [344]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [345]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [346]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [347]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [348]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [349]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [350]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [351]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [352]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [353]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [354]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [355]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [356]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [357]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [358]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [359]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [360]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [361]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [362]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [363]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [364]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [365]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [366]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [367]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [368]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [369]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [370]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [371]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [372]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [373]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [374]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [375]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [376]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [377]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [378]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [379]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [380]
					},
					["Point"] = {
						["y"] = -3.0517578125e-05,
						["relativeTo"] = "TMW:group:1TMvhh5X05mC",
						["x"] = -0.000244140625,
					},
				}, -- [3]
				{
					["GUID"] = "TMW:group:1TMvhh5X05mC",
					["Columns"] = 1,
					["Point"] = {
						["y"] = -69.99996926784478,
						["x"] = 0.0001739541688950889,
					},
					["Level"] = 11,
					["Scale"] = 2.5,
					["Conditions"] = {
						{
							["Name"] = "return not GetToggle(1, \"DisableRotationDisplay\") and not GetToggle(1, \"DisableRotationModes\")",
							["Type"] = "LUA",
						}, -- [1]
						["n"] = 1,
					},
					["Icons"] = {
						{
							["Enabled"] = true,
							["Type"] = "conditionicon",
							["Events"] = {
								{
									["OnlyShown"] = true,
									["Type"] = "Lua",
									["Lua"] = "if IsShiftKeyDown() then\n    Action.ToggleBurst()\nelseif IsControlKeyDown() then\n    Action.ToggleMode()\nelseif IsAltKeyDown() then\n    Action.ToggleAoE()\nelse\n    Action.PrintHelpToggle()\nend",
									["Event"] = "OnLeftClick",
								}, -- [1]
								{
									["OnlyShown"] = true,
									["Type"] = "Lua",
									["Lua"] = "Action.ToggleMainUI()",
									["Event"] = "OnRightClick",
								}, -- [2]
								["n"] = 2,
							},
							["SettingsPerView"] = {
								["icon"] = {
									["TextLayout"] = "TMW:textlayout:1TMvg5InaYOw",
									["Texts"] = {
										"[ActionBurst]", -- [1]
									},
								},
							},
							["CustomTex"] = "NONE",
							["States"] = {
								{
								}, -- [1]
								{
									["Alpha"] = 1,
								}, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [121]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [122]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [123]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [124]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [125]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [126]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [127]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [128]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [129]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [130]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [131]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [132]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [133]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [134]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [135]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [136]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [137]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [138]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [139]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [140]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [141]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [142]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [143]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [144]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [145]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [146]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [147]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [148]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [149]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [150]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [151]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [152]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [153]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [154]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [155]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [156]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [157]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [158]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [159]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [160]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [161]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [162]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [163]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [164]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [165]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [166]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [167]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [168]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [169]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [170]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [171]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [172]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [173]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [174]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [175]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [176]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [177]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [178]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [179]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [180]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [181]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [182]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [183]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [184]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [185]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [186]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [187]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [188]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [189]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [190]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [191]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [192]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [193]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [194]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [195]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [196]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [197]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [198]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [199]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [200]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [201]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [202]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [203]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [204]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [205]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [206]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [207]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [208]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [209]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [210]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [211]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [212]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [213]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [214]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [215]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [216]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [217]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [218]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [219]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [220]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [221]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [222]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [223]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [224]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [225]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [226]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [227]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [228]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [229]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [230]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [231]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [232]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [233]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [234]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [235]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [236]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [237]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [238]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [239]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [240]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [241]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [242]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [243]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [244]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [245]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [246]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [247]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [248]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [249]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [250]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [251]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [252]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [253]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [254]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [255]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [256]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [257]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [258]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [259]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [260]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [261]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [262]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [263]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [264]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [265]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [266]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [267]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [268]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [269]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [270]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [271]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [272]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [273]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [274]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [275]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [276]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [277]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [278]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [279]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [280]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [281]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [282]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [283]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [284]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [285]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [286]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [287]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [288]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [289]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [290]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [291]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [292]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [293]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [294]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [295]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [296]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [297]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [298]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [299]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [300]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [301]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [302]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [303]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [304]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [305]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [306]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [307]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [308]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [309]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [310]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [311]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [312]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [313]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [314]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [315]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [316]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [317]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [318]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [319]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [320]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [321]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [322]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [323]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [324]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [325]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [326]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [327]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [328]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [329]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [330]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [331]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [332]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [333]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [334]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [335]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [336]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [337]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [338]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [339]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [340]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [341]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [342]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [343]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [344]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [345]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [346]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [347]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [348]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [349]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [350]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [351]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [352]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [353]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [354]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [355]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [356]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [357]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [358]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [359]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [360]
					},
					["Name"] = "Visible APL Layout",
				}, -- [4]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
				}, -- [5]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
					},
				}, -- [6]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
					},
				}, -- [7]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [8]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
					},
				}, -- [9]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
					},
				}, -- [10]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
					},
				}, -- [11]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [12]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
					},
				}, -- [13]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
					},
				}, -- [14]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [15]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
					},
				}, -- [16]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
					},
				}, -- [17]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
					},
				}, -- [18]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
					},
				}, -- [19]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
					},
				}, -- [20]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
					},
				}, -- [21]
			},
			["Version"] = 90201,
			["Locked"] = true,
			["NumGroups"] = 4,
			["TextureName"] = "Flat",
		},
		["[Trip] Paladin"] = {
			["ForceNoBlizzCC"] = true,
			["Version"] = 90201,
			["NumGroups"] = 4,
			["TextureName"] = "Flat",
			["CodeSnippets"] = {
				{
					["Name"] = "ProfileUI",
					["Code"] = "--############################\n--##### TRIP'S PALADINUI #####\n--############################\n\n-- Full credit to Taste\n\nlocal TMW                                            = TMW \nlocal CNDT                                            = TMW.CNDT\nlocal Env                                            = CNDT.Env\n\nlocal A                                                = Action\nlocal GetToggle                                        = A.GetToggle\nlocal InterruptIsValid                                = A.InterruptIsValid\n\nlocal UnitCooldown                                    = A.UnitCooldown\nlocal Unit                                            = A.Unit \nlocal Player                                        = A.Player \nlocal Pet                                            = A.Pet\nlocal LoC                                            = A.LossOfControl\nlocal MultiUnits                                    = A.MultiUnits\nlocal EnemyTeam                                        = A.EnemyTeam\nlocal FriendlyTeam                                    = A.FriendlyTeam\nlocal TeamCache                                        = A.TeamCache\nlocal InstanceInfo                                    = A.InstanceInfo\nlocal TR                                            = Action.TasteRotation\nlocal select, setmetatable                            = select, setmetatable\n\nA.Data.ProfileEnabled[Action.CurrentProfile] = true\nA.Data.ProfileUI = {      \n    DateTime = \"v1 (28 Oct 2020)\",\n    -- Class settings\n    [2] = {        \n        [ACTION_CONST_PALADIN_RETRIBUTION] = {          \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- General -- \",\n                    },\n                },\n            },            \n            { -- [1] 1st Row        \n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use @mouseover\", \n                        ruRU = \"Использовать @mouseover\", \n                        frFR = \"Utiliser les fonctions @mouseover\",\n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                        ruRU = \"Разблокирует использование действий для @mouseover юнитов\\nНапример: Воскрешение, Хилинг\", \n                        frFR = \"Activera les actions via @mouseover\\n Exemple: Ressusciter, Soigner\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use AoE\", \n                        ruRU = \"Использовать AoE\", \n                        frFR = \"Utiliser l'AoE\",\n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                        ruRU = \"Включает действия для нескольких целей\", \n                        frFR = \"Activer les actions multi-unités\",\n                    }, \n                    M = {\n                        Custom = \"/run Action.AoEToggleMode()\",\n                        -- It does call func CraftMacro(L[CL], macro above, 1) -- 1 means perCharacter tab in MacroUI, if nil then will be used allCharacters tab in MacroUI\n                        Value = value or nil, \n                        -- Very Very Optional, no idea why it will be need however.. \n                        TabN = '@number' or nil,                                \n                        Print = '@string' or nil,\n                    },\n                }, \n                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },                    \n                {\n                    E = \"Checkbox\", \n                    DB = \"AllowDelayedAW\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Allow Delayed Avenging Wrath\", \n                        ruRU = \"Разрешить отсроченный гнев отомстить\", \n                        frFR = \"Autoriser Avenging Wrath en différé\",\n                    }, \n                    TT = { \n                        enUS = \"Enable this to allow Templar's Verdict to be suggested while delaying use of Avenging Wrath/Crusade/Execution Sentence.\", \n                        ruRU = \"Включите этот параметр, чтобы разрешить вынесение вердикта тамплиеров при задержке использования приговора «Мстительный гнев / Крестовый поход / Исполнение».\", \n                        frFR = \"Activez cette option pour permettre au verdict du templier d'être suggéré tout en retardant l'utilisation de Avenging Wrath / Crusade / Execution Sentence.\",\n                    }, \n                    M = {},\n                },                \n            },     \n            { -- [7] Spell Status Frame\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Spell Status Frame -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E         = \"Button\",\n                    H         = 35,\n                    OnClick = function(self, button, down)     \n                        if button == \"LeftButton\" then \n                            TR.ToggleStatusFrame() \n                        else                \n                            Action.CraftMacro(\"Status Frame\", [[/run Action.TasteRotation.ToggleStatusFrame()]], 1, true, true)   \n                        end \n                    end, \n                    L = { \n                        ANY = \"Status Frame\\nMacro Creator\",\n                    }, \n                    TT = { \n                        enUS = \"Click this button to create the special status frame macro.\\nStatus Frame is a new windows that allow user to track blocked spells during fight. So you don't have to check your chat anymore.\", \n                        ruRU = \"Нажмите эту кнопку, чтобы создать специальный макрос статуса.\\nStatus Frame - это новые окна, которые позволяют пользователю отслеживать заблокированные заклинания во время боя. Так что вам больше не нужно проверять свой чат.\",  \n                        frFR = \"Cliquez sur ce bouton pour créer la macro de cadre d'état spécial.\\nLe cadre d'état est une nouvelle fenêtre qui permet à l'utilisateur de suivre les sorts bloqués pendant le combat. Vous n'avez donc plus besoin de vérifier votre chat.\", \n                    },                           \n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"ChangelogOnStartup\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Changelog On Startup\", \n                        ruRU = \"Журнал изменений при запуске\", \n                        frFR = \"Journal des modifications au démarrage\",\n                    }, \n                    TT = { \n                        enUS = \"Will show latest changelog of the current rotation when you enter in game.\\nDisable this option to block the popup when you enter the game.\", \n                        ruRU = \"При входе в игру будет отображаться последний список изменений текущего вращения.\\nОтключить эту опцию, чтобы заблокировать всплывающее окно при входе в игру.\", \n                        frFR = \"Affiche le dernier journal des modifications de la rotation actuelle lorsque vous entrez dans le jeu.\\nDésactivez cette option pour bloquer la fenêtre contextuelle lorsque vous entrez dans le jeu..\", \n                    }, \n                    M = {},\n                }, \n            },    \n            { -- [7]  Azerite Beam settings\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(295258) .. \" -- \",\n                    },\n                },\n            },\n            { -- [3] 3rd Row                 \n        \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 3, \n                    MAX = 50,                            \n                    DB = \"FocusedAzeriteBeamTTD\",\n                    DBV = 10, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(295258) .. \" TTD\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum Time To Die for a unit before using \" .. A.GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Установите минимальное время смерти для отряда перед использованием \" .. A.GetSpellInfo(295258) .. \" \\nНе применимо к боссу.\", \n                        frFR = \"Définissez le temps minimum pour mourir pour une unité avant d'utiliser \" .. A.GetSpellInfo(295258) .. \" \\nNe s'applique pas aux boss.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"FocusedAzeriteBeamUnits\",\n                    DBV = 3, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(295258) .. \" units\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum number of units around before using \" .. A.GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Set the minimum number of units around before using \" .. A.GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\",\n                        frFR = \"Set the minimum number of units around before using \" .. A.GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\",\n                    },                     \n                    M = {},\n                },                 \n            },\n            { -- [6]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Potion Selection -- \",\n                    },\n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"UNBRIDLEDFURY\", value = \"UNBRIDLEDFURY\" },\n                        { text = \"FOCUSEDRESOLVE\", value = \"FOCUSEDRESOLVE\" },\n                        { text = \"BATTLEPOTIONOFSTRENGTH\", value = \"BATTLEPOTIONOFSTRENGTH\" },\n                        { text = \"EMPOWEREDPROXIMITY\", value = \"EMPOWEREDPROXIMITY\" },\n                    },\n                    MULT = false,\n                    DB = \"PotionSelection\",\n                    DBV = \"UNBRIDLEDFURY\", \n                    L = { \n                        ANY = \"Select Potion\",\n                    }, \n                    TT = { \n                        enUS = \"Select here the potion that will be used with rotation.\\nYou need the potion in bag for it to works.\", \n                        ruRU = \"Select here the potion that will be used with rotation.\\nYou need the potion in bag for it to works.\", \n                        frFR = \"Select here the potion that will be used with rotation.\\nYou need the potion in bag for it to works.\", \n                    }, \n                    M = {},\n                },           \n            }, \n            { -- [7] UnbridledFury \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(300714) .. \" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryAuto\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Burst Potion\", \n                        ruRU = \"Burst Potion\",\n                        frFR = \"Burst Potion\",\n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots depending of the settings of this section\", \n                        ruRU = \"If activated, will auto re pots depending of the settings of this section\", \n                        frFR = \"If activated, will auto re pots depending of the settings of this section\", \n                    }, \n                    M = {},\n                }, \n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryWithExecute\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Sync execute phase\", \n                        ruRU = \"Sync execute phase\",\n                        frFR = \"Sync execute phase\",   \n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                        ruRU = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                        frFR = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                    }, \n                    M = {},\n                }, \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 40,                          \n                    DB = \"UnbridledFuryTTD\",\n                    DBV = 40, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(300714) .. \" TTD\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum Time To Die for a unit before using \" .. A.GetSpellInfo(300714) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Установите минимальное время смерти для отряда перед использованием \" .. A.GetSpellInfo(300714) .. \" \\nНе применимо к боссу.\", \n                        frFR = \"Définissez le temps minimum pour mourir pour une unité avant d'utiliser \" .. A.GetSpellInfo(300714) .. \" \\nNe s'applique pas aux boss.\", \n                    },                     \n                    M = {},\n                },                \n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryWithBloodlust\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Sync Bloodlust\", \n                        ruRU = \"Sync Bloodlust\", \n                        frFR = \"Sync Bloodlust\",  \n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots as soon as Bloodlust is detected.\", \n                        ruRU = \"If activated, will auto re pots as soon as Bloodlust is detected.\",\n                        frFR = \"If activated, will auto re pots as soon as Bloodlust is detected.\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryWithSecondAscendance\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Sync Avenging Wrath\", \n                        ruRU = \"Sync Avenging Wrath\", \n                        frFR = \"Sync Avenging Wrath\",  \n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots as soon as Avenging Wrath is detected.\", \n                        ruRU = \"If activated, will auto re pots as soon as Avenging Wrath is detected.\", \n                        frFR = \"If activated, will auto re pots as soon as Avenging Wrath is detected.\", \n                    }, \n                    M = {},\n                },                 \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                          \n                    DB = \"UnbridledFuryHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(300714) .. \" HP\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum health percent for a unit before using \" .. A.GetSpellInfo(300714) .. \".\", \n                        ruRU = \"Set the minimum health percent for a unit before using \" .. A.GetSpellInfo(300714) .. \".\",  \n                        frFR = \"Set the minimum health percent for a unit before using \" .. A.GetSpellInfo(300714) .. \".\", \n                    },                     \n                    M = {},\n                },\n            },                 \n            { -- [4] 4th Row\n\n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Defensives -- \",\n                    },\n                },\n            },\n            { -- [3] 3rd Row \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"DivineShieldHP\",\n                    DBV = 100, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(642) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"FlashofLightHP\",\n                    DBV = 40, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(19750) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"Bubble\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(642) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- [3] 3rd Row \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"JusticarsVengeanceHP\",\n                    DBV = 50, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(215661) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"WordofGloryHP\",\n                    DBV = 60, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(212191) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- [4] 4th Row\n\n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Utilities -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseCavalier\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto \" .. A.GetSpellInfo(190784), \n                        ruRU = \"Авто \" .. A.GetSpellInfo(190784), \n                        frFR = \"Auto \" .. A.GetSpellInfo(190784), \n                    }, \n                    TT = { \n                        enUS = \"Automatically use \" .. A.GetSpellInfo(190784), \n                        ruRU = \"Автоматически использовать \" .. A.GetSpellInfo(190784), \n                        frFR = \"Utiliser automatiquement \" .. A.GetSpellInfo(190784), \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 7,                            \n                    DB = \"CavalierTime\",\n                    DBV = 3, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        enUS = A.GetSpellInfo(190784) .. \" if moving for\",\n                        ruRU = A.GetSpellInfo(190784) .. \" если переехать\",\n                        frFR = A.GetSpellInfo(190784) .. \" si vous bougez pendant\",\n                    },\n                    TT = { \n                        enUS = \"If \" .. A.GetSpellInfo(190784) .. \" is talented and ready, will use it if moving for set value.\", \n                        ruRU = \"Если \" .. A.GetSpellInfo(190784) .. \" изучен и готов, будет использовать его при переходе на заданное значение.\", \n                        frFR = \"Si \" .. A.GetSpellInfo(190784) .. \" est prêt, l'utilisera s'il se déplace pour la valeur définie.\", \n                    }, \n                    M = {},\n                },    \n            },\n            { -- [6]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Party -- \",\n                    },\n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@party1\", value = 1 },\n                        { text = \"@party2\", value = 2 },\n                    },\n                    MULT = true,\n                    DB = \"PartyUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                    }, \n                    L = { \n                        ANY = \"Party Units\",\n                    }, \n                    TT = { \n                        enUS = \"Enable/Disable relative party passive rotation\\nExample : Pet Dispell over party members.\", \n                        ruRU = \"Включить/Выключить относительно группы пассивную ротацию\\nExample : Pet Dispell over party members.\", \n                        frFR = \"Active/Désactive la rotation spécifique aux alliés pour les personnes dans le groupe.\\nExemple : Dispell automatique sur les membres du groupe.\",\n                    }, \n                    M = {},\n                },            \n            }, \n            -- Blessing of Protection\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(1022) ..\" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"BlessingofProtectionHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(1022) .. \"\\nunit HP\",\n                    },\n                    TT = { \n                        enUS = A.GetSpellInfo(1022) .. \" on low HP unit depending of the value you set.\", \n                        ruRU = A.GetSpellInfo(1022) .. \" on low HP unit depending of the value you set.\", \n                        frFR = A.GetSpellInfo(1022) .. \" on low HP unit depending of the value you set.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 30,                            \n                    DB = \"BlessingofProtectionTTD\",\n                    DBV = 5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(1022) .. \"\\nTTD\",\n                    },\n                    TT = { \n                        enUS = A.GetSpellInfo(1022) .. \" if unit time to die is inferior to this value.\", \n                        ruRU = A.GetSpellInfo(1022) .. \" if unit time to die is inferior to this value.\", \n                        frFR = A.GetSpellInfo(1022) .. \" if unit time to die is inferior to this value.\", \n                    },                     \n                    M = {},\n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Trinkets -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"TrinketsAoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Trinkets\\nAoE only\", \n                        ruRU = \"Trinkets\\nAoE only\",  \n                        frFR = \"Trinkets\\nAoE only\",  \n                    }, \n                    TT = { \n                        enUS = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                        ruRU = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                        frFR = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 30,                            \n                    DB = \"TrinketsMinTTD\",\n                    DBV = 10, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Min TTD\",\n                    },\n                    TT = { \n                        enUS = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                        ruRU = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                        frFR = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                    },                    \n                    M = {},\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 2, \n                    MAX = 10,                            \n                    DB = \"TrinketsMinUnits\",\n                    DBV = 20, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Min Units\",\n                    },\n                    TT = { \n                        enUS = \"Minimum number of units in range to activate Trinkets.\", \n                        ruRU = \"Minimum number of units in range to activate Trinkets.\", \n                        frFR = \"Minimum number of units in range to activate Trinkets.\",  \n                    },                    \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 40,                            \n                    DB = \"TrinketsUnitsRange\",\n                    DBV = 20, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Max AoE range\",\n                    },\n                    TT = { \n                        enUS = \"Maximum range for units detection to automatically activate trinkets.\", \n                        ruRU = \"Maximum range for units detection to automatically activate trinkets.\", \n                        frFR = \"Maximum range for units detection to automatically activate trinkets.\",  \n                    },                    \n                    M = {},\n                },\n            },\n\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- PvP -- \",\n                    },\n                },\n            },\n            { -- [5] 5th Row     \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"ON MELEE BURST\", value = \"ON MELEE BURST\" },\n                        { text = \"ON COOLDOWN\", value = \"ON COOLDOWN\" },                    \n                        { text = \"OFF\", value = \"OFF\" },\n                    },\n                    DB = \"HammerofJusticePvP\",\n                    DBV = \"ON MELEE BURST\",\n                    L = { \n                        ANY = \"PvP \" .. A.GetSpellInfo(853),\n                    }, \n                    TT = { \n                        enUS = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Only if melee player has damage buffs\\nON COOLDOWN - means will use always on melee players\\nOFF - Cut out from rotation but still allow work through Queue and MSG systems\\nIf you want fully turn it OFF then you should make SetBlocker in 'Actions' tab\", \n                        ruRU = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Только если игрок ближнего боя имеет бафы на урон\\nON COOLDOWN - значит будет использовано по игрокам ближнего боя по восстановлению способности\\nOFF - Выключает из ротации, но при этом позволяет Очередь и MSG системам работать\\nЕсли нужно полностью выключить, тогда установите блокировку во вкладке 'Действия'\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@arena1\", value = 1 },\n                        { text = \"@arena2\", value = 2 },\n                        { text = \"@arena3\", value = 3 },\n                        { text = \"primary\", value = 4 },\n                    },\n                    MULT = true,\n                    DB = \"HammerofJusticePvPUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                        [3] = true,\n                        [4] = true,\n                    }, \n                    L = { \n                        ANY = \"PvP \" .. A.GetSpellInfo(853) .. \" units\",\n                    }, \n                    TT = { \n                        enUS = \"primary - is @target, @mouseover, @targettarget (these units are depend on toggles above)\", \n                        ruRU = \"primary - это @target, @mouseover, @targettarget (эти юниты зависят от чекбоксов наверху)\", \n                    }, \n                    M = {},\n                },\n            },\n        },\n        [ACTION_CONST_PALADIN_PROTECTION] = {          \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- General -- \",\n                    },\n                },\n            },            \n            { -- [1] 1st Row\n        \n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use @mouseover\", \n                        ruRU = \"Использовать @mouseover\", \n                        frFR = \"Utiliser les fonctions @mouseover\",\n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                        ruRU = \"Разблокирует использование действий для @mouseover юнитов\\nНапример: Воскрешение, Хилинг\", \n                        frFR = \"Activera les actions via @mouseover\\n Exemple: Ressusciter, Soigner\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use AoE\", \n                        ruRU = \"Использовать AoE\", \n                        frFR = \"Utiliser l'AoE\",\n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                        ruRU = \"Включает действия для нескольких целей\", \n                        frFR = \"Activer les actions multi-unités\",\n                    }, \n                    M = {\n                        Custom = \"/run Action.AoEToggleMode()\",\n                        -- It does call func CraftMacro(L[CL], macro above, 1) -- 1 means perCharacter tab in MacroUI, if nil then will be used allCharacters tab in MacroUI\n                        Value = value or nil, \n                        -- Very Very Optional, no idea why it will be need however.. \n                        TabN = '@number' or nil,                                \n                        Print = '@string' or nil,\n                    },\n                }, \n                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },                    \n            }, \n            { -- [7] Spell Status Frame\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Spell Status Frame -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E         = \"Button\",\n                    H         = 35,\n                    OnClick = function(self, button, down)     \n                        if button == \"LeftButton\" then \n                            TR.ToggleStatusFrame() \n                        else                \n                            Action.CraftMacro(\"Status Frame\", [[/run Action.TasteRotation.ToggleStatusFrame()]], 1, true, true)   \n                        end \n                    end, \n                    L = { \n                        ANY = \"Status Frame\\nMacro Creator\",\n                    }, \n                    TT = { \n                        enUS = \"Click this button to create the special status frame macro.\\nStatus Frame is a new windows that allow user to track blocked spells during fight. So you don't have to check your chat anymore.\", \n                        ruRU = \"Нажмите эту кнопку, чтобы создать специальный макрос статуса.\\nStatus Frame - это новые окна, которые позволяют пользователю отслеживать заблокированные заклинания во время боя. Так что вам больше не нужно проверять свой чат.\",  \n                        frFR = \"Cliquez sur ce bouton pour créer la macro de cadre d'état spécial.\\nLe cadre d'état est une nouvelle fenêtre qui permet à l'utilisateur de suivre les sorts bloqués pendant le combat. Vous n'avez donc plus besoin de vérifier votre chat.\", \n                    },                           \n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"ChangelogOnStartup\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Changelog On Startup\", \n                        ruRU = \"Журнал изменений при запуске\", \n                        frFR = \"Journal des modifications au démarrage\",\n                    }, \n                    TT = { \n                        enUS = \"Will show latest changelog of the current rotation when you enter in game.\\nDisable this option to block the popup when you enter the game.\", \n                        ruRU = \"При входе в игру будет отображаться последний список изменений текущего вращения.\\nОтключить эту опцию, чтобы заблокировать всплывающее окно при входе в игру.\", \n                        frFR = \"Affiche le dernier journal des modifications de la rotation actuelle lorsque vous entrez dans le jeu.\\nDésactivez cette option pour bloquer la fenêtre contextuelle lorsque vous entrez dans le jeu..\", \n                    }, \n                    M = {},\n                }, \n            },    \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Utilities -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"SmartHoJ\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Smart \" .. A.GetSpellInfo(853), \n                        ruRU = \"Smart \" .. A.GetSpellInfo(853), \n                        frFR = \"Smart \" .. A.GetSpellInfo(853), \n                    }, \n                    TT = { \n                        enUS = \"[BETA] Activate the smart \" .. A.GetSpellInfo(853) .. \" system working with special list for all Battle For Azeroth Mythic dungeon.\", \n                        ruRU = \"[BETA] Activate the smart \" .. A.GetSpellInfo(853) .. \" system working with special list for all Battle For Azeroth Mythic dungeon.\", \n                        frFR = \"[BETA] Activate the smart \" .. A.GetSpellInfo(853) .. \" system working with special list for all Battle For Azeroth Mythic dungeon.\",   \n                    }, \n                    M = {},\n                },                \n                {\n                    E = \"Checkbox\", \n                    DB = \"UseCavalier\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto \" .. A.GetSpellInfo(190784), \n                        ruRU = \"Авто \" .. A.GetSpellInfo(190784), \n                        frFR = \"Auto \" .. A.GetSpellInfo(190784), \n                    }, \n                    TT = { \n                        enUS = \"Automatically use \" .. A.GetSpellInfo(190784), \n                        ruRU = \"Автоматически использовать \" .. A.GetSpellInfo(190784), \n                        frFR = \"Utiliser automatiquement \" .. A.GetSpellInfo(190784), \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 7,                            \n                    DB = \"CavalierTime\",\n                    DBV = 3, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        enUS = A.GetSpellInfo(190784) .. \" if moving for\",\n                        ruRU = A.GetSpellInfo(190784) .. \" если переехать\",\n                        frFR = A.GetSpellInfo(190784) .. \" si vous bougez pendant\",\n                    },\n                    TT = { \n                        enUS = \"If \" .. A.GetSpellInfo(190784) .. \" is talented and ready, will use it if moving for set value.\", \n                        ruRU = \"Если \" .. A.GetSpellInfo(190784) .. \" изучен и готов, будет использовать его при переходе на заданное значение.\", \n                        frFR = \"Si \" .. A.GetSpellInfo(190784) .. \" est prêt, l'utilisera s'il se déplace pour la valeur définie.\", \n                    }, \n                    M = {},\n                },    \n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Defensives -- \",\n                    },\n                },\n            },\n            { -- DivineProtection\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(498) .. \" -- \",\n                    },\n                },\n            },\n            -- DivineProtection\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 15,                            \n                    DB = \"DivineProtectionTTD\",\n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(498) .. \"\\nTTD(sec)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"DivineProtectionHP\",\n                    DBV = 35,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(498) .. \"\\n(%)\",\n                    }, \n                    M = {},\n                },\n            },                        \n            { -- [1] 1st Row      \n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },\n                {\n                    E = \"Checkbox\", \n                    DB = \"ArdentDefenderIgnoreBigDeff\",\n                    DBV = true,\n                    L = { \n                        enUS = A.GetSpellInfo(31850) .. \"\\nSkip if \" .. A.GetSpellInfo(86659) .. \" used\",\n                        ruRU = A.GetSpellInfo(31850) .. \"\\nSkip if \" .. A.GetSpellInfo(86659) .. \" used\",  \n                        frFR = A.GetSpellInfo(31850) .. \"\\nSkip if \" .. A.GetSpellInfo(86659) .. \" used\", \n                    }, \n                    M = {},\n                },             \n                {\n                    E = \"Checkbox\", \n                    DB = \"ArdentDefenderCatchKillStrike\",\n                    DBV = true,\n                    L = { \n                        enUS = A.GetSpellInfo(31850) .. \"\\nCatch death hit\",\n                        ruRU = A.GetSpellInfo(31850) .. \"\\nCatch death hit\",  \n                        frFR = A.GetSpellInfo(31850) .. \"\\nCatch death hit\", \n                    }, \n                    TT = { \n                        enUS = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\", \n                        ruRU = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\",\n                        frFR = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\",  \n                    },\n                    M = {},\n                },                \n            },\n            {    \n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },            \n                {\n                RowOptions = { margin = { top = 10 } },\n                    E         = \"Slider\",                                                     \n                    MIN     = -1, \n                    MAX     = 20,                            \n                    DB         = \"ArdentDefenderTTD\",\n                    DBV     = 5,\n                    ONLYOFF    = true,\n                    L = { \n                        enUS = A.GetSpellInfo(12975) .. \"\\n<= time to die (sec)\", \n                        ruRU = A.GetSpellInfo(12975) .. \"\\n<= time to die (sec)\",  \n                        frFR = A.GetSpellInfo(12975) .. \"\\n<= time to die (sec)\",  \n                    }, \n                    TT = { \n                        enUS = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\", \n                        ruRU = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                        frFR = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                    },\n                    M = {},\n                },\n                {\n                RowOptions = { margin = { top = 10 } },\n                    E         = \"Slider\",                                                     \n                    MIN     = -1, \n                    MAX     = 100,                            \n                    DB         = \"ArdentDefenderHP\",\n                    DBV     = 20,\n                    ONLYOFF    = true,\n                    L = { \n                        enUS = A.GetSpellInfo(12975) .. \"\\n<= health (%)\", \n                        ruRU = A.GetSpellInfo(12975) .. \"\\n<= health (%)\",  \n                        frFR = A.GetSpellInfo(12975) .. \"\\n<= health (%)\", \n                    }, \n                    TT = { \n                        enUS = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",\n                        ruRU = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                        frFR = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                    },\n                    M = {},\n                }, \n            }, \n            \n            { -- [1] 1st Row      \n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },            \n                {\n                    E = \"Checkbox\", \n                    DB = \"GuardianofAncientKingsCatchKillStrike\",\n                    DBV = true,\n                    L = { \n                        enUS = A.GetSpellInfo(86659) .. \"\\nCatch death hit\",\n                        ruRU = A.GetSpellInfo(86659) .. \"\\nCatch death hit\",  \n                        frFR = A.GetSpellInfo(86659) .. \"\\nCatch death hit\", \n                    }, \n                    TT = { \n                        enUS = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\", \n                        ruRU = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\",\n                        frFR = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\",  \n                    },\n                    M = {},\n                },\n            },\n            {    \n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },            \n                {\n                RowOptions = { margin = { top = 10 } },\n                    E         = \"Slider\",                                                     \n                    MIN     = -1, \n                    MAX     = 20,                            \n                    DB         = \"GuardianofAncientKingsTTD\",\n                    DBV     = 5,\n                    ONLYOFF    = true,\n                    L = { \n                        enUS = A.GetSpellInfo(86659) .. \"\\n<= time to die (sec)\", \n                        ruRU = A.GetSpellInfo(86659) .. \"\\n<= time to die (sec)\",  \n                        frFR = A.GetSpellInfo(86659) .. \"\\n<= time to die (sec)\",  \n                    }, \n                    TT = { \n                        enUS = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\", \n                        ruRU = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                        frFR = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                    },\n                    M = {},\n                },\n                {\n                RowOptions = { margin = { top = 10 } },\n                    E         = \"Slider\",                                                     \n                    MIN     = -1, \n                    MAX     = 100,                            \n                    DB         = \"GuardianofAncientKingsHP\",\n                    DBV     = 20,\n                    ONLYOFF    = true,\n                    L = { \n                        enUS = A.GetSpellInfo(86659) .. \"\\n<= health (%)\", \n                        ruRU = A.GetSpellInfo(86659) .. \"\\n<= health (%)\",  \n                        frFR = A.GetSpellInfo(86659) .. \"\\n<= health (%)\", \n                    }, \n                    TT = { \n                        enUS = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",\n                        ruRU = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                        frFR = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                    },\n                    M = {},\n                }, \n            },            \n            {\n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },\n                {\n                RowOptions = { margin = { top = 10 } },\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 70,                            \n                    DB = \"LightoftheProtectorHPLost\",\n                    DBV = 15, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(267461) .. \"\\n%HP lost per sec\",\n                    }, \n                    M = {},\n                },\n                {\n                RowOptions = { margin = { top = 10 } },\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"LightoftheProtectorHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(267461) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                RowOptions = { margin = { top = 10 } },\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"HandoftheProtectorHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(315924) .. \" (%)\",\n                    }, \n                    M = {},\n                },        \n            },\n            {\n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },            \n                {\n                    E = \"Checkbox\", \n                    DB = \"LayonHandsCatchKillStrike\",\n                    DBV = true,\n                    L = { \n                        enUS = A.GetSpellInfo(633) .. \"\\nCatch death hit\",\n                        ruRU = A.GetSpellInfo(633) .. \"\\nCatch death hit\",  \n                        frFR = A.GetSpellInfo(633) .. \"\\nCatch death hit\", \n                    }, \n                    TT = { \n                        enUS = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\", \n                        ruRU = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\",\n                        frFR = \"Try to manage to use\\nability before receiving a fatal strike\\nThis option is not related to other triggers!\",  \n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"ArdentDefenderHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(31850) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"AbyssalHealingPotionHP\",\n                    DBV = 30, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(301308) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- [3] 3rd Row \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"ShieldoftheRighteousHPLost\",\n                    DBV = 60, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(53600) .. \" (%) lost/sec\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"LightoftheProtectorHPLost\",\n                    DBV = 60, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(267461) .. \" (%) lost/sec\",\n                    }, \n                    M = {},\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"LightoftheProtectorHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(267461) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"GuardianofAncientKingsHP\",\n                    DBV = 30, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = A.GetSpellInfo(86659) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(299374) .. \" -- \",\n                    },\n                },\n            },\n            { -- [4] 4th Row\n                {\n                    E         = \"Slider\",                                                     \n                    MIN     = -1, \n                    MAX     = 20,                            \n                    DB         = \"LucidDreamTTD\",\n                    DBV     = 5,\n                    ONLYOFF    = true,\n                    L = { \n                        enUS = A.GetSpellInfo(299374) .. \"\\n<= time to die (sec)\", \n                        ruRU = A.GetSpellInfo(299374) .. \"\\n<= time to die (sec)\",  \n                        frFR = A.GetSpellInfo(299374) .. \"\\n<= time to die (sec)\",  \n                    }, \n                    TT = { \n                        enUS = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\", \n                        ruRU = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                        frFR = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                    },\n                    M = {},\n                },\n                {\n                    E         = \"Slider\",                                                     \n                    MIN     = -1, \n                    MAX     = 100,                            \n                    DB         = \"LucidDreamHP\",\n                    DBV     = 20,\n                    ONLYOFF    = true,\n                    L = { \n                        enUS = A.GetSpellInfo(299374) .. \"\\n<= health (%)\", \n                        ruRU = A.GetSpellInfo(299374) .. \"\\n<= health (%)\",  \n                        frFR = A.GetSpellInfo(299374) .. \"\\n<= health (%)\", \n                    }, \n                    TT = { \n                        enUS = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",\n                        ruRU = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                        frFR = \"OFF - The trigger is disabled\\n0->100 Less than or equal to the specified percentage of your health\\nWARNING: There must be at least one of several triggers turned on\\nWhen selecting multiple triggers, they will be synchronized as one general condition\",  \n                    },\n                    M = {},\n                }, \n            },            \n            { -- [4] 4th Row\n\n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },\n            { -- [6]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Party -- \",\n                    },\n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@party1\", value = 1 },\n                        { text = \"@party2\", value = 2 },\n                    },\n                    MULT = true,\n                    DB = \"PartyUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                    }, \n                    L = { \n                        ANY = \"Party Units\",\n                    }, \n                    TT = { \n                        enUS = \"Enable/Disable relative party passive rotation\\nExample : Dispell over party members.\", \n                        ruRU = \"Включить/Выключить относительно группы пассивную ротацию\\nПример: Разогнать членов группы.\", \n                        frFR = \"Active/Désactive la rotation spécifique aux alliés pour les personnes dans le groupe.\\nExemple : Dispell automatique sur les membres du groupe.\",\n                    }, \n                    M = {},\n                }, \n                {        \n                       E = \"Checkbox\", \n                       DB = \"AutoFreedom\",\n                       DBV = true,\n                       L = { \n                        enUS = \"Auto \" .. A.GetSpellInfo(1044),\n                        ruRU = \"Auto \" .. A.GetSpellInfo(1044),\n                    },\n                       TT = { \n                        enUS = \"Will auto use \" .. A.GetSpellInfo(1044) .. \" on friendly party units.\",\n                        ruRU = \"Will auto use \" .. A.GetSpellInfo(1044) .. \" on friendly party units.\",\n                    },\n                       M = {},\n                },                \n            },                         \n            { -- [3] 3rd Row \n                {\n                    E = \"Checkbox\", \n                    DB = \"UseSotROffensively\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use SotR Offensively\", \n                        ruRU = \"Используйте SotR в нападении\",  \n                        frFR = \"Utiliser SotR Offensif\", \n                    }, \n                    TT = { \n                        enUS = \"Enable this setting if you want the addon to suggest Shield of the Righteous as an offensive ability.\", \n                        ruRU = \"Включите этот параметр, если вы хотите, чтобы аддон предлагал «Щит праведника» в качестве атакующей способности.\", \n                        frFR = \"Activez ce paramètre si vous souhaitez que l'addon suggère Bouclier des justes comme capacité offensive.\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AutoTaunt\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Automatic Taunt\", \n                        ruRU = \"Автоматическая Насмешка\", \n                        frFR = \"Raillerie automatique\",\n                    }, \n                    TT = { \n                        enUS = \"If activated, will use automatically use Growl whenever available.\", \n                        ruRU = \"Если активирован, будет автоматически использовать Growl при любой возможности.\",  \n                        frFR = \"S'il est activé, utilisera automatiquement Growl dès qu'il sera disponible.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"ThreatDamagerLimit\",\n                    DBV = 100, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        enUS = \"Only 'Damager'\\nThreat limit(agro,>= %)\",\n                        ruRU = \"Только 'Урон'\\nЛимит угрозы(агро,>= %)\", \n                        frFR = \"Seulement 'DPS'\\nLimite de menace(аggrо,>= %)\", \n                    }, \n                    TT = { \n                        enUS = \"OFF - No limit\\nIf the percentage of the threat (agro) is greater than\\nor equal to the specified one, then the\\n'safe' rotation will be performed. As far as possible, the\\nabilities causing too many threats will be stopped until the\\nthreat level (agro) is normalized\", \n                        ruRU = \"OFF - Нет лимита\\nЕсли процент угрозы (агро) больше или равен указанному,\\nто будет выполняться 'безопасная' ротация\\nПо мере возможности перестанут использоваться способности\\nвызывающие слишком много угрозы пока\\nуровень угрозы (агро) не нормализуется\",  \n                        frFR = \"OFF - Aucune limite\\nSi le pourcentage de la menace (agro) est supérieur ou égal à celui spécifié, alors la rotation\\n'safe' sera effectuée. Dans la mesure du possible, les \\nabilités causant trop de menaces seront arrêtées jusqu'à ce que le\\n niveau de menace (agro) soit normalisé\",\n                    },     \n                    M = {},\n                },\n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- PvP -- \",\n                    },\n                },\n            },\n            { -- [5] 5th Row     \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"ON MELEE BURST\", value = \"ON MELEE BURST\" },\n                        { text = \"ON COOLDOWN\", value = \"ON COOLDOWN\" },                    \n                        { text = \"OFF\", value = \"OFF\" },\n                    },\n                    DB = \"ImprisonPvP\",\n                    DBV = \"ON MELEE BURST\",\n                    L = { \n                        ANY = \"PvP \" .. A.GetSpellInfo(217832),\n                    }, \n                    TT = { \n                        enUS = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Only if melee player has damage buffs\\nON COOLDOWN - means will use always on melee players\\nOFF - Cut out from rotation but still allow work through Queue and MSG systems\\nIf you want fully turn it OFF then you should make SetBlocker in 'Actions' tab\", \n                        ruRU = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Только если игрок ближнего боя имеет бафы на урон\\nON COOLDOWN - значит будет использовано по игрокам ближнего боя по восстановлению способности\\nOFF - Выключает из ротации, но при этом позволяет Очередь и MSG системам работать\\nЕсли нужно полностью выключить, тогда установите блокировку во вкладке 'Действия'\", \n                        frFR = \"@arena1-3, @target, @mouseover, @targettarget\\nON MELEE BURST - Seulement si le joueur de mêlée a des buffs de dégâts\\nON COOLDOWN - les moyens seront toujours utilisés sur les joueurs de mêlée\\nOFF - Coupé de la rotation mais autorisant toujours le travail dans la file d'attente et Systèmes MSG\\nSi vous souhaitez l'éteindre complètement, vous devez définir SetBlocker dans l'onglet 'Actions'\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@arena1\", value = 1 },\n                        { text = \"@arena2\", value = 2 },\n                        { text = \"@arena3\", value = 3 },\n                        { text = \"primary\", value = 4 },\n                    },\n                    MULT = true,\n                    DB = \"ImprisonPvPUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                        [3] = true,\n                        [4] = true,\n                    }, \n                    L = { \n                        ANY = \"PvP \" .. A.GetSpellInfo(217832) .. \" units\",\n                    }, \n                    TT = { \n                        enUS = \"primary - is @target, @mouseover, @targettarget (these units are depend on toggles above)\", \n                        ruRU = \"primary - это @target, @mouseover, @targettarget (эти юниты зависят от чекбоксов наверху)\", \n                    }, \n                    M = {},\n                },\n            },\n        },    \n        [ACTION_CONST_PALADIN_HOLY] = {          \n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },    \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- General -- \",\n                    },\n                },\n            },\n            { -- [1]                             \n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\n@mouseover\", \n                        ruRU = \"Использовать\\n@mouseover\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                        ruRU = \"Разблокирует использование действий для @mouseover юнитов\\nНапример: Воскрешение, Хилинг\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"targettarget\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\n@targettarget\", \n                        ruRU = \"Использовать\\n@targettarget\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions\\nfor enemy @targettarget units\", \n                        ruRU = \"Разблокирует использование\\nдействий для вражеских @targettarget юнитов\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nAoE\", \n                        ruRU = \"Использовать\\nAoE\", \n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                        ruRU = \"Включает действия для нескольких целей\", \n                    }, \n                    M = {},\n                },  \n                                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"UseRotationPassive\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nPassive\\nRotation\",\n                        ruRU = \"Включить\\nПассивную\\nРотацию\" \n                    },\n                    M = {},\n                },                                  \n            },     \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Healing Engine -- \",\n                    },\n                },\n            },    \n               { -- [7] \n                {\n                    E = \"Checkbox\", \n                    DB = \"ManaManagement\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Boss Fight\\nManaSave\\n(PvE)\", \n                        ruRU = \"Бой с Боссом\\nУправление Маной\\n(PvE)\",\n                    }, \n                    TT = { \n                        enUS = \"Enable to keep small mana save tricks during boss fight\\nMana will keep going to save phase if Boss HP >= our Mana\", \n                        ruRU = \"Включает сохранение малого количества маны с помощью некоторых манипуляций в течении боя против Босса\\nМана будет переходить в фазу сохранения если ХП Босса >= нашей Маны\", \n                    }, \n                    M = {},\n                },             \n                  {\n                     E = \"Checkbox\", \n                     DB = \"ManaPotion\",\n                     DBV = true,\n                     L = { \n                        enUS = \"Use\\nMana Potion\",\n                        ruRU = \"Использовать\\nЗелье Маны\",\n                    },\n                    M = {},\n                   },\n                  {\n                     E = \"Checkbox\", \n                     DB = \"StopCastOverHeal\",\n                     DBV = true,\n                     L = { \n                        enUS = \"Stop Cast\\noverhealing\",\n                        ruRU = \"Stop Cast\\noverhealing\",\n                    },\n                      TT = { \n                        enUS = \"Enable this option to automatically stop the current cast to avoid overhealing.\",\n                        ruRU = \"Enable this option to automatically stop the current cast to avoid overhealing.\",\n                    },\n                    M = {},\n                   },                     \n                {        \n                       E = \"Checkbox\", \n                       DB = \"StartByPreCast\",\n                       DBV = true,\n                       L = { \n                        enUS = \"Begin Combat\\nBy PreCast\",\n                        ruRU = \"Начинать Бой\\nЗаранее произнося\", \n                    },\n                       TT = { \n                        enUS = \"Will start rotation on enemy by available longer\\ncasting spell depended on your spec\",\n                        ruRU = \"Будет начинать ротация на противнике с доступной\\nдлинной произносящейся способности в зависимости от спека\",\n                    },\n                       M = {},\n                },\n               },\n            -- Beacon of Virtue(talent)\n            -- + Classic Beacon \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Beacons -- \",\n                    },\n                },\n            },    \n            { -- [3]  \n                RowOptions = { margin = { top = 10 } },        \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {   \n                        { text = \"Tanking Units\", value = \"Tanking Units\" },                    \n                        { text = \"Mostly Inc. Damage\", value = \"Mostly Inc. Damage\" },\n                        { text = \"HPS < Inc. Damage\", value = \"HPS < Inc. Damage\" },\n                    },\n                    DB = \"BeaconWorkMode\",\n                    DBV = \"Tanking Units\",\n                    L = { \n                        ANY = A.GetSpellInfo(53563) .. \"\\nMode\",\n                    }, \n                    TT = { \n                        enUS = \"These conditions will be skiped if unit will dying in emergency (critical) situation\", \n                        ruRU = \"Эти условия будут пропущены если юнит будет умирать в чрезвычайной (критической) ситуациии\", \n                    },                    \n                    M = {},\n                },            \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"BeaconofVirtueHP\",\n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(200025) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"BeaconofVirtueTTD\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(200025) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                             \n                    DB = \"BeaconofVirtue\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(200025) .. \" units\",                        \n                    }, \n                    M = {},\n                },\n            },            \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Racials -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"RacialBurstHealing\",                    \n                    DBV = 100,\n                    ONLYON = true,\n                    L = { \n                        ANY = A.GetLocalization()[\"TAB\"][1][\"RACIAL\"] .. \"\\n(Healing HP %)\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"RacialBurstDamaging\",                    \n                    DBV = 100,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetLocalization()[\"TAB\"][1][\"RACIAL\"] .. \"\\n(Damaging HP %)\",                        \n                    },                     \n                    M = {},\n                },\n            },\n            { -- Trinkets\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Trinkets -- \",\n                    },\n                },\n            },    \n            {                 \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"Always\", value = \"Always\" },\n                        { text = \"Burst Synchronized\", value = \"BurstSync\" },                    \n                    },\n                    DB = \"TrinketBurstSyncUP\",\n                    DBV = \"Always\",\n                    L = { \n                        enUS = \"Damager: How to use trinkets\",\n                        ruRU = \"Урон: Как использовать аксессуары\", \n                    },\n                    TT = { \n                        enUS = \"Always: On cooldown\\nBurst Synchronized: By Burst Mode in 'General' tab\",\n                        ruRU = \"Always: По доступности\\nBurst Synchronized: От Режима Бурстов во вкладке 'Общее'\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                            \n                    DB = \"TrinketMana\",\n                    DBV = 85,\n                    ONLYOFF = false,\n                    L = { \n                        enUS = \"Trinket: Mana(%)\",\n                        ruRU = \"Trinket: Mana(%)\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                            \n                    DB = \"TrinketBurstHealing\",\n                    DBV = 75,\n                    ONLYOFF = false,\n                    L = { \n                        enUS = \"Healer: Target Health (%)\",\n                        ruRU = \"Лекарь: Здоровье Цели (%)\", \n                    },\n                    M = {},\n                },        \n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Essences -- \",\n                    },\n                },\n            },    \n            {\n            RowOptions = { margin = { top = 10 } },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"LucidDreamManaPercent\",                    \n                    DBV = 85,\n                    ONLYON = true,\n                    L = { \n                        ANY = A.GetSpellInfo(299374) .. \"\\nMana %\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 10,                            \n                    DB = \"LifeBindersInvocationUnits\",                    \n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(299944) .. \"\\nunits number\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"LifeBindersInvocationHP\",                    \n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(299944) .. \"\\n(%)\",                        \n                    },                     \n                    M = {},\n                },\n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Mythic + -- \",\n                    },\n                },\n            },    \n            {\n                  {\n                     E = \"Checkbox\", \n                     DB = \"MythicPlusLogic\",\n                     DBV = true,\n                     L = { \n                        enUS = \"Smart Mythic+\",\n                        ruRU = \"Smart Mythic+\",\n                    },\n                      TT = { \n                        enUS = \"Enable this option to activate critical healing logic depending of the current dungeon.\\nExample:Fulminating Zap in Junkyard\",\n                        ruRU = \"Enable this option to activate critical healing logic depending of the current dungeon.\\nExample:Fulminating Zap in Junkyard\",\n                    },\n                    M = {},\n                   },    \n                  {\n                     E = \"Checkbox\", \n                     DB = \"GrievousWoundsLogic\",\n                     DBV = true,\n                     L = { \n                        enUS = \"Grievous Wounds\\nlogic\",\n                        ruRU = \"Grievous Wounds\\nlogic\",\n                    },\n                      TT = { \n                        enUS = \"Enable this option to activate critical healing logic for friendly units that got Grievous Wounds debuff.\",\n                        ruRU = \"Enable this option to activate critical healing logic for friendly units that got Grievous Wounds debuff.\",\n                    },\n                    M = {},\n                   },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"GrievousWoundsMinStacks\",                    \n                    DBV = 2,\n                    ONOFF = false,\n                    L = { \n                        ANY = \"Grievous Wounds\\nmin stacks\",                        \n                    },   \n                      TT = { \n                        enUS = \"How many stacks of Grievous Wounds should be up on friendly unit before force targetting on this unit.\\nExample: 2 means friendly unit will be urgently targetted if he got 2 stacks.\", \n                        ruRU = \"How many stacks of Grievous Wounds should be up on friendly unit before force targetting on this unit.\\nExample: 2 means friendly unit will be urgently targetted if he got 2 stacks.\", \n                    },                    \n                    M = {},\n                },                \n                  {\n                     E = \"Checkbox\", \n                     DB = \"StopCastQuake\",\n                     DBV = true,\n                     L = { \n                        enUS = \"Stop Cast\\nquaking\",\n                        ruRU = \"Stop Cast\\nquaking\",\n                    },\n                      TT = { \n                        enUS = \"Enable this option to automatically stop your current cast before Quake.\",\n                        ruRU = \"Enable this option to automatically stop your current cast before Quake.\",\n                    },\n                    M = {},\n                   },    \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 3,                            \n                    DB = \"StopCastQuakeSec\",                    \n                    DBV = 1,\n                    Precision = 1,\n                    ONOFF = false,\n                    L = { \n                        ANY = \"Stop Cast\\nquaking seconds\",                      \n                    },\n                      TT = { \n                        enUS = \"Define the value you want to stop your cast before next Quake hit.\\nValue is in seconds.\\nExample: 1 means you will stop cast at 1sec remaining on Quaking.\",            \n                        ruRU = \"Define the value you want to stop your cast before next Quake hit.\\nValue is in seconds.\\nExample: 1 means you will stop cast at 1sec remaining on Quaking.\",            \n                    },                    \n                    M = {},\n                },\n            },\n\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Raid -- \",\n                    },\n                },\n            },    \n            {    \n                  {\n                     E = \"Checkbox\", \n                     DB = \"BlessingofFreedomWrathion\",\n                     DBV = true,\n                     L = { \n                        ANY = A.GetSpellInfo(1044) .. \"\\non Wrathion Slow\",\n                    },\n                      TT = { \n                        enUS = \"Enable this option to automatically use \" .. A.GetSpellInfo(1044) .. \" on Wrathion Slow.\",\n                        ruRU = \"Enable this option to automatically use \" .. A.GetSpellInfo(1044) .. \" on Wrathion Slow.\",\n                    },\n                    M = {},\n                   },    \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"WrathionMovementStacks\",                    \n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(1044) .. \"\\nWrathion Slow stacks\",                        \n                    },                     \n                    M = {},\n                },                \n                  {\n                     E = \"Checkbox\", \n                     DB = \"BlessingofFreedomShadhar\",\n                     DBV = true,\n                     L = { \n                        ANY = A.GetSpellInfo(1044) .. \"\\non Shadhar Fixate\",\n                    },\n                      TT = { \n                        enUS = \"Enable this option to automatically use \" .. A.GetSpellInfo(1044) .. \" on Shadhar Fixate.\",\n                        ruRU = \"Enable this option to automatically use \" .. A.GetSpellInfo(1044) .. \" on Shadhar Fixate.\",\n                    },\n                    M = {},\n                   },    \n            },\n\n            { -- [7] Holy Avenger\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(105809) .. \" -- \",\n                    },\n                }, \n            },\n            {\n                RowOptions = { margin = { top = -10 } },\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Raid -- \",\n                    },\n                },\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Dungeon -- \",\n                    },\n                },\n            },\n            -- Holy Avenger\n            { -- [3] \n                  RowOptions = { margin = { top = 10 } },                        \n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"HolyAvengerRaidUnits\",\n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(105809) .. \"\\nmin units\",                        \n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"HolyAvengerPartyUnits\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(105809) .. \"\\nmin units\",                        \n                    }, \n                    M = {},\n                },\n            },\n            {\n                RowOptions = { margin = { top = 10 } },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"HolyAvengerRaidHP\",\n                    DBV = 55,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(105809) .. \"\\n(%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"HolyAvengerPartyHP\",\n                    DBV = 40,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(105809) .. \"\\n(%)\",\n                    }, \n                    M = {},\n                },\n                \n            },            \n            { -- [7] Avenging Wrath\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(31884) .. \" -- \",\n                    },\n                }, \n            },\n            {\n            RowOptions = { margin = { top = -10 } },\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Raid -- \",\n                    },\n                },\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Dungeon -- \",\n                    },\n                },\n            },\n            -- Avenging Wrath\n            { -- [3] \n                  RowOptions = { margin = { top = 10 } },                        \n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AvengingWrathRaidUnits\",\n                    DBV = 4,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31884) .. \"\\nmin units\",                        \n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AvengingWrathPartyUnits\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31884) .. \"\\nmin units\",                        \n                    }, \n                    M = {},\n                },\n            },\n            {\n                RowOptions = { margin = { top = 10 } },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"AvengingWrathRaidHP\",\n                    DBV = 55,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31884) .. \"\\n(%)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"AvengingWrathPartyHP\",\n                    DBV = 45,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31884) .. \"\\n(%)\",\n                    }, \n                    M = {},\n                },\n                \n            },    \n            { -- AuraMastery\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(31821) .. \" -- \",\n                    },\n                },\n            },\n            -- AuraMastery\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 15,                            \n                    DB = \"AuraMasteryAoETTD\",\n                    DBV = 10,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31821) .. \"\\ngroup TTD(sec)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"AuraMasteryBelowHealthPercent\",\n                    DBV = 35,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31821) .. \"\\n(%)\",\n                    }, \n                    M = {},\n                },\n            },\n            {\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 2, \n                    MAX = 6,                            \n                    DB = \"AuraMasteryLast\",\n                    Precision = 1,\n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31821) .. \"\\nLast5sec DMG threshold\",                        \n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 30,                            \n                    DB = \"AuraMasteryAfter\",\n                    DBV = 15,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31821) .. \"\\nmin sec in combat\",                        \n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AuraMasteryUnits\",\n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(31821) .. \"\\nmin units\",                        \n                    }, \n                    M = {},\n                },\n            },\n            { -- DivineProtection\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(498) .. \" -- \",\n                    },\n                },\n            },\n            -- DivineProtection\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 15,                            \n                    DB = \"DivineProtectionTTD\",\n                    DBV = 10,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(498) .. \"\\nTTD(sec)\",\n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"DivineProtectionHP\",\n                    DBV = 35,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(498) .. \"\\n(%)\",\n                    }, \n                    M = {},\n                },\n            },                        \n            -- Divine Shield \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(642) ..\" -- \",\n                    },\n                },\n            },\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"DivineShieldHP\",\n                    DBV = 25,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(642) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"DivineShieldTTD\",\n                    DBV = 1,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(642) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n            },    \n            -- Lay on Hands \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(633) ..\" -- \",\n                    },\n                },\n            },\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"LayOnHandsHP\",\n                    DBV = 25,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(633) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"LayOnHandsTTD\",\n                    DBV = 2,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(633) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n            },        \n            -- Holy Shock \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(20473) .. \" -- \",\n                    },\n                },\n            },\n            { -- [3]     \n                {        \n                       E = \"Checkbox\", \n                       DB = \"ForceGlimmerOnMaxUnits\",\n                       DBV = true,\n                       L = { \n                        enUS = \"Force \" .. A.GetSpellInfo(287268) .. \"\\non maximum units\",\n                        ruRU = \"Force \" .. A.GetSpellInfo(287268) .. \"\\non maximum units\",\n                    },\n                       TT = { \n                        enUS = \"Will try to spread as much as possible your \" .. A.GetSpellInfo(20473) .. \" to apply up to 8 \" .. A.GetSpellInfo(287268) .. \" buffs.\\nOnly works with Glimmer of Light azerite trait.\",\n                        ruRU = \"Will try to spread as much as possible your \" .. A.GetSpellInfo(20473) .. \" to apply up to 8 \" .. A.GetSpellInfo(287268) .. \" buffs.\\nOnly works with Glimmer of Light azerite trait.\",\n                    },\n                       M = {},\n                },\n                {        \n                       E = \"Checkbox\", \n                       DB = \"GlimmerTankOOC\",\n                       DBV = true,\n                       L = { \n                        enUS = A.GetSpellInfo(287268) .. \"\\tanks out of combat\",\n                        ruRU = A.GetSpellInfo(287268) .. \"\\tanks out of combat\",\n                    },\n                       TT = { \n                        enUS = \"Will force your \" .. A.GetSpellInfo(20473) .. \" to apply \" .. A.GetSpellInfo(287268) .. \" buffs on tank before combat start.\",\n                        ruRU = \"Will force your \" .. A.GetSpellInfo(20473) .. \" to apply \" .. A.GetSpellInfo(287268) .. \" buffs on tank before combat start.\",\n                    },\n                       M = {},\n                },\n                  {\n                     E = \"Checkbox\", \n                     DB = \"HolyShockDPS\",\n                     DBV = true,\n                     L = { \n                        enUS = \"Use \" .. A.GetSpellInfo(20473) .. \"\\noffensive\",\n                        ruRU = \"Use \" .. A.GetSpellInfo(20473) .. \"\\noffensive\",\n                    },\n                    M = {},\n                   },     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"HolyShockHP\",\n                    DBV = 90,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(20473) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                             \n                    DB = \"HolyShockTTD\",\n                    DBV = 4,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(20473) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n            },\n            -- Word of Glory \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(85673) ..\" -- \",\n                    },\n                },\n            },\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"WordofGloryHP\",\n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(85673) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            },\n            -- Light of Dawn  \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(85222) ..\" -- \",\n                    },\n                },\n            },\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"LightofDawnHP\",\n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(85222) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                             \n                    DB = \"LightofDawnTTD\",\n                    DBV = 4,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(85222) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                             \n                    DB = \"LightofDawnUnits\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(85222) .. \" units\",                        \n                    }, \n                    M = {},\n                },\n            },        \n            -- Flash of Light  \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(19750) ..\" -- \",\n                    },\n                },\n            },\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"FlashofLightHP\",\n                    DBV = 60,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(19750) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"FlashofLightTTD\",\n                    DBV = 2,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(19750) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n            },        \n            -- Holy Light \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(82326) ..\" -- \",\n                    },\n                },\n            },\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                             \n                    DB = \"HolyLightHP\",\n                    DBV = 91,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(82326) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                             \n                    DB = \"HolyLightTTD\",\n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(82326) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n            },        \n            -- Light of the Martyr  \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(183998) ..\" -- \",\n                    },\n                },\n            },\n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"LightoftheMartyrHP\",\n                    DBV = 40,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(183998) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                             \n                    DB = \"LightoftheMartyrTTD\",\n                    DBV = 2,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(183998) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n            },        \n            -- Light's Hammer (talent) \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(114158) ..\" -- \",\n                    },\n                },\n            },            \n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"LightsHammerHP\",\n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(114158) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                             \n                    DB = \"LightsHammerTTD\",\n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(114158) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n            },        \n            -- Holy Prism(talent) \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. A.GetSpellInfo(114165) ..\" -- \",\n                    },\n                },\n            },            \n            { -- [3]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"HolyPrismHP\",\n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(114165) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"HolyPrismTTD\",\n                    DBV = 3,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetSpellInfo(114165) .. \" TTD\",                        \n                    }, \n                    M = {},\n                },\n            },                \n            { -- [6]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Party -- \",\n                    },\n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@party1\", value = 1 },\n                        { text = \"@party2\", value = 2 },\n                    },\n                    MULT = true,\n                    DB = \"PartyUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                    }, \n                    L = { \n                        ANY = \"Party Units\",\n                    }, \n                    TT = { \n                        enUS = \"Enable/Disable relative party passive rotation\", \n                        ruRU = \"Включить/Выключить относительно группы пассивную ротацию\", \n                    }, \n                    M = {},\n                }, \n                {        \n                       E = \"Checkbox\", \n                       DB = \"AutoFreedom\",\n                       DBV = true,\n                       L = { \n                        enUS = \"Auto \" .. A.GetSpellInfo(1044),\n                        ruRU = \"Auto \" .. A.GetSpellInfo(1044),\n                    },\n                       TT = { \n                        enUS = \"Will auto use \" .. A.GetSpellInfo(1044) .. \" on friendly party units.\",\n                        ruRU = \"Will auto use \" .. A.GetSpellInfo(1044) .. \" on friendly party units.\",\n                    },\n                       M = {},\n                },                \n            },     \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Overlay -- \",\n                    },\n                },\n            },\n            { -- [2] 2nd Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseAnnouncer\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Smart Announcer\", \n                        ruRU = \"Use Smart Announcer\",  \n                        frFR = \"Use Smart Announcer\", \n                    }, \n                    TT = { \n                        enUS = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        ruRU = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        frFR = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AnnouncerInCombatOnly\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Only use in combat\", \n                        ruRU = \"Only use in combat\", \n                        frFR = \"Only use in combat\",\n                    }, \n                    TT = { \n                        enUS = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work with precombat actions if available.\\nFor example : Sap out of combat, pre potion.\", \n                        ruRU = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",\n                        frFR = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",  \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AnnouncerDelay\",\n                    DBV = 2, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Alerts delay (sec)\",\n                    },\n                    TT = { \n                        enUS = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        ruRU = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        frFR = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                    },                     \n                    M = {},\n                },                \n            },    \n\n        },\n    },\n    \n    -- MSG Actions UI\n    [7] = {\n        [ACTION_CONST_PALADIN_RETRIBUTION] = { \n            -- MSG Action Pet Dispell\n            [\"dispell\"] = { Enabled = true, Key = \"PetDispell\", LUA = [[\n                return     A.DispellMagic:IsReady(unit, true) and \n                        (\n                            ( \n                                not Unit(thisunit):IsEnemy() and \n                                (\n                                    (\n                                        not InPvP() and \n                                        Env.Dispel(unit)\n                                    ) or \n                                    (\n                                        InPvP() and \n                                        EnemyTeam():PlayersInRange(1, 5)\n                                    ) \n                                )\n                            ) or \n                            ( \n                                Unit(thisunit):IsEnemy() and \n                                Unit(thisunit):GetRange() <= 5 and \n                                Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"TotalImun\", \"DeffBuffsMagic\"}, true) \n                            )                \n                        ) \n            ]] },\n            -- MSG Action Pet Kick\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n            -- MSG Action Fear\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n        },\n        [ACTION_CONST_PALADIN_PROTECTION] = { \n            -- MSG Action Pet Dispell\n            [\"dispell\"] = { Enabled = true, Key = \"PetDispell\", LUA = [[\n                return     A.DispellMagic:IsReady(unit, true) and \n                        (\n                            ( \n                                not Unit(thisunit):IsEnemy() and \n                                (\n                                    (\n                                        not InPvP() and \n                                        Env.Dispel(unit)\n                                    ) or \n                                    (\n                                        InPvP() and \n                                        EnemyTeam():PlayersInRange(1, 5)\n                                    ) \n                                )\n                            ) or \n                            ( \n                                Unit(thisunit):IsEnemy() and \n                                Unit(thisunit):GetRange() <= 5 and \n                                Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"TotalImun\", \"DeffBuffsMagic\"}, true) \n                            )                \n                        ) \n            ]] },\n            -- MSG Action Pet Kick\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n            -- MSG Action Fear\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n        },\n        [ACTION_CONST_PALADIN_HOLY] = { \n            -- MSG Action Pet Dispell\n            [\"dispell\"] = { Enabled = true, Key = \"PetDispell\", LUA = [[\n                return     A.DispellMagic:IsReady(unit, true) and \n                        (\n                            ( \n                                not Unit(thisunit):IsEnemy() and \n                                (\n                                    (\n                                        not InPvP() and \n                                        Env.Dispel(unit)\n                                    ) or \n                                    (\n                                        InPvP() and \n                                        EnemyTeam():PlayersInRange(1, 5)\n                                    ) \n                                )\n                            ) or \n                            ( \n                                Unit(thisunit):IsEnemy() and \n                                Unit(thisunit):GetRange() <= 5 and \n                                Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"TotalImun\", \"DeffBuffsMagic\"}, true) \n                            )                \n                        ) \n            ]] },\n            -- MSG Action Pet Kick\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n            -- MSG Action Fear\n            [\"kick\"] = { Enabled = true, Key = \"Pet Kick\", LUA = [[\n                return  SpellInRange(thisunit, Action[PlayerSpec].SpellLock.ID) and \n                        select(2, CastTime(nil, thisunit)) > 0 and \n                        Action[PlayerSpec].SpellLock:AbsentImun(thisunit, {\"KickImun\", \"TotalImun\", \"DeffBuffsMagic\"}, true) \n            ]] },\n        },\n    },\n}\n\n-----------------------------------------\n--                   PvP  \n-----------------------------------------\n\nfunction A.Main_CastBars(unit, list)\n    if not A.IsInitialized or A.IamHealer or (A.Zone ~= \"arena\" and A.Zone ~= \"pvp\") then \n        return false \n    end \n    \n    if A[A.PlayerSpec] and A[A.PlayerSpec].SpearHandStrike and A[A.PlayerSpec].SpearHandStrike:IsReadyP(unit, nil, true) and A[A.PlayerSpec].SpearHandStrike:AbsentImun(unit, {\"KickImun\", \"TotalImun\", \"DamagePhysImun\"}, true) and A.InterruptIsValid(unit, list) then \n        return true         \n    end \nend \n\nfunction A.Second_CastBars(unit)\n    if not A.IsInitialized or (A.Zone ~= \"arena\" and A.Zone ~= \"pvp\") then \n        return false \n    end \n    \n    local Toggle = A.GetToggle(2, \"ParalysisPvP\")    \n    if Toggle and Toggle ~= \"OFF\" and A[A.PlayerSpec] and A[A.PlayerSpec].Paralysis and A[A.PlayerSpec].Paralysis:IsReadyP(unit, nil, true) and A[A.PlayerSpec].Paralysis:AbsentImun(unit, {\"CCTotalImun\", \"TotalImun\", \"DamagePhysImun\"}, true) and Unit(unit):IsControlAble(\"incapacitate\", 0) then \n        if Toggle == \"BOTH\" then \n            return select(2, A.InterruptIsValid(unit, \"Heal\", true)) or select(2, A.InterruptIsValid(unit, \"PvP\", true)) \n        else\n            return select(2, A.InterruptIsValid(unit, Toggle, true))         \n        end \n    end \nend \n\n",
				}, -- [1]
				{
					["Name"] = "HOLY",
					["Code"] = "--###############################\n--##### TRIP'S HOLY PALADIN #####\n--###############################\n\n-- Full credit to Taste\n\n\nlocal _G, setmetatable                            = _G, setmetatable\nlocal TMW                                       = TMW\nlocal CNDT                                      = TMW.CNDT\nlocal Env                                       = CNDT.Env\nlocal A                                         = _G.Action\nlocal Listener                                  = Action.Listener\nlocal Create                                    = Action.Create\nlocal GetToggle                                 = Action.GetToggle\nlocal SetToggle                                 = Action.SetToggle\nlocal GetGCD                                    = Action.GetGCD\nlocal GetCurrentGCD                             = Action.GetCurrentGCD\nlocal GetPing                                   = Action.GetPing\nlocal ShouldStop                                = Action.ShouldStop\nlocal BurstIsON                                 = Action.BurstIsON\nlocal AuraIsValid                               = Action.AuraIsValid\nlocal InterruptIsValid                          = Action.InterruptIsValid\nlocal FrameHasSpell                             = Action.FrameHasSpell\nlocal Azerite                                   = LibStub(\"AzeriteTraits\")\nlocal Utils                                     = Action.Utils\nlocal TeamCache                                 = Action.TeamCache\nlocal EnemyTeam                                 = Action.EnemyTeam\nlocal FriendlyTeam                              = Action.FriendlyTeam\nlocal LoC                                       = Action.LossOfControl\nlocal Player                                    = Action.Player \nlocal MultiUnits                                = Action.MultiUnits\nlocal UnitCooldown                              = Action.UnitCooldown\nlocal Unit                                      = Action.Unit \nlocal IsUnitEnemy                               = Action.IsUnitEnemy\nlocal IsUnitFriendly                            = Action.IsUnitFriendly\nlocal HealingEngine                             = Action.HealingEngine\nlocal ActiveUnitPlates                          = MultiUnits:GetActiveUnitPlates()\nlocal TeamCacheFriendly                         = TeamCache.Friendly\nlocal TeamCacheFriendlyIndexToPLAYERs           = TeamCacheFriendly.IndexToPLAYERs\nlocal IsIndoors, UnitIsUnit                     = IsIndoors, UnitIsUnit\nlocal TR                                        = Action.TasteRotation\nlocal Pet                                       = LibStub(\"PetLibrary\")\nlocal next, pairs, type, print                  = next, pairs, type, print \nlocal math_floor                                = math.floor\nlocal math_ceil                                 = math.ceil\nlocal tinsert                                   = table.insert \nlocal select, unpack, table                     = select, unpack, table \nlocal CombatLogGetCurrentEventInfo              = _G.CombatLogGetCurrentEventInfo\nlocal UnitGUID, UnitIsUnit, UnitDamage, UnitAttackSpeed, UnitAttackPower = UnitGUID, UnitIsUnit, UnitDamage, UnitAttackSpeed, UnitAttackPower\nlocal select, math                              = select, math \nlocal huge                                      = math.huge  \nlocal UIParent                                  = _G.UIParent \nlocal CreateFrame                               = _G.CreateFrame\nlocal wipe                                      = _G.wipe\nlocal IsUsableSpell                             = IsUsableSpell\nlocal UnitPowerType                             = UnitPowerType \n\n--- ============================ CONTENT ===========================\n--- ======= APL LOCALS =======\n-- luacheck: max_line_length 9999\n\n-- Spells\nAction[ACTION_CONST_PALADIN_HOLY] = {\n    -- Racial\n    ArcaneTorrent                          = Create({ Type = \"Spell\", ID = 50613     }),\n    BloodFury                              = Create({ Type = \"Spell\", ID = 20572      }),\n    Fireblood                              = Create({ Type = \"Spell\", ID = 265221     }),\n    AncestralCall                          = Create({ Type = \"Spell\", ID = 274738     }),\n    Berserking                             = Create({ Type = \"Spell\", ID = 26297    }),\n    ArcanePulse                            = Create({ Type = \"Spell\", ID = 260364    }),\n    QuakingPalm                            = Create({ Type = \"Spell\", ID = 107079     }),\n    Haymaker                               = Create({ Type = \"Spell\", ID = 287712     }), \n    WarStomp                               = Create({ Type = \"Spell\", ID = 20549     }),\n    BullRush                               = Create({ Type = \"Spell\", ID = 255654     }),  \n    GiftofNaaru                            = Create({ Type = \"Spell\", ID = 59544    }),\n    Shadowmeld                             = Create({ Type = \"Spell\", ID = 58984    }), -- usable in Action Core \n    Stoneform                              = Create({ Type = \"Spell\", ID = 20594    }), \n    WilloftheForsaken                      = Create({ Type = \"Spell\", ID = 7744        }), -- not usable in APL but user can Queue it   \n    EscapeArtist                           = Create({ Type = \"Spell\", ID = 20589    }), -- not usable in APL but user can Queue it\n    EveryManforHimself                     = Create({ Type = \"Spell\", ID = 59752    }), -- not usable in APL but user can Queue it\n    -- Spells\n    Cleanse                                = Create({ Type = \"Spell\", ID = 4987 }),\n    Judgement                              = Create({ Type = \"Spell\", ID = 275773 }),\n    CrusaderStrike                         = Create({ Type = \"Spell\", ID = 35395 }),\n    Consecration                           = Create({ Type = \"Spell\", ID = 26573 }),\n    LightofMartyr                          = Create({ Type = \"Spell\", ID = 183998, predictName = \"LightofMartyr\" }),\n    LightoftheMartyrStack                  = Create({ Type = \"Spell\", ID = 223316 }),\n    FlashofLight                           = Create({ Type = \"Spell\", ID = 19750, predictName = \"FlashofLight\" }),\n    HolyShock                              = Create({ Type = \"Spell\", ID = 20473, predictName = \"HolyShock\" }),\n    InfusionofLight                        = Create({ Type = \"Spell\", ID = 54149 }),\n    BeaconofLight                          = Create({ Type = \"Spell\", ID = 53563 }),\n    BeaconofVirtue                         = Create({ Type = \"Spell\", ID = 200025 }),\n    LightofDawn                            = Create({ Type = \"Spell\", ID = 85222, predictName = \"LightofDawn\" }),\n    AuraMastery                            = Create({ Type = \"Spell\", ID = 31821 }),\n    AvengingWrath                          = Create({ Type = \"Spell\", ID = 31884 }),\n    HolyAvenger                            = Create({ Type = \"Spell\", ID = 105809 }),\n    BestowFaith                            = Create({ Type = \"Spell\", ID = 223306, predictName = \"BestowFaith\" }),\n    AvengingCrusader                       = Create({ Type = \"Spell\", ID = 216331 }),\n    JudgmentOfLightHoly                    = Create({ Type = \"Spell\", ID = 183778, Hidden = true  }),\n    BlessingofSacrifice                    = Create({ Type = \"Spell\", ID = 6940 }),\n    BeaconOfFaith                          = Create({ Type = \"Spell\", ID = 156910 }),\n    JudgementofLight                       = Create({ Type = \"Spell\", ID = 183778 }),\n    CrusadersMight                         = Create({ Type = \"Spell\", ID = 196926 }),\n    ConsecrationUp                         = Create({ Type = \"Spell\", ID = 204242 }),\n    JudgmentUp                             = Create({ Type = \"Spell\", ID = 214222 }),\n    HolyPrism                              = Create({ Type = \"Spell\", ID = 114165, predictName = \"HolyPrism\" }),\n    LightsHammer                           = Create({ Type = \"Spell\", ID = 114158, predictName = \"LightsHammer\" }),\n    CleansingLight                         = Create({ Type = \"Spell\", ID = 236186, Hidden = true     }), -- Talent AoE Dispell\n    BlessingofSanctuary                    = Create({ Type = \"Spell\", ID = 210256, Hidden = true     }), \n    -- Utilities\n    Cavalier                               = Create({ Type = \"Spell\", ID = 190784     }),\n    JusticarsVengeance                     = Create({ Type = \"Spell\", ID = 215661    }),\n    BlessingofProtectionYellow             = Create({ Type = \"Spell\", ID = 1022, Color = \"YELLOW\", Desc = \"YELLOW Color for Party Blessing\"     }),    \n    BlessingofProtection                   = Create({ Type = \"Spell\", ID = 1022     }), \n    BlessingofFreedom                      = Create({ Type = \"Spell\", ID = 1044     }),\n    BlessingofFreedomYellow                = Create({ Type = \"Spell\", ID = 1044, Color = \"YELLOW\", Desc = \"YELLOW Color for Party Blessing\"     }),    \n    HammerofJustice                        = Create({ Type = \"Spell\", ID = 853     }),\n    HammerofJusticeGreen                   = Create({ Type = \"SpellSingleColor\", ID = 853, Color = \"GREEN\", Desc = \"[1] CC\", Hidden = true, Hidden = true, QueueForbidden = true }),\n    DivineShield                           = Create({ Type = \"Spell\", ID = 642     }),\n    CleanseToxins                          = Create({ Type = \"Spell\", ID = 213644   }),\n    Rebuke                                 = Create({ Type = \"Spell\", ID = 96231     }),\n    Absolution                             = Create({ Type = \"Spell\", ID = 212056 }), -- Mass Rez\n    Redemption                             = Create({ Type = \"Spell\", ID = 7328 }), -- Rez\n    BlindingLight                          = Create({ Type = \"Spell\", ID = 115750  }),\n    -- Azerite\n    DivineRevelations                      = Create({ Type = \"Spell\", ID = 275469 }),\n    GlimmerofLight                         = Create({ Type = \"Spell\", ID = 287268 }),\n    -- PvP\n    UltimateSacrifice                      = Create({ Type = \"Spell\", ID = 199452 }),\n    -- Healing\n    HolyLight                              = Create({ Type = \"Spell\", ID = 82326, predictName = \"HolyLight\" }),\n    LayOnHands                             = Create({ Type = \"Spell\", ID = 633, predictName = \"LayOnHands\" }),\n    Forbearance                            = Create({ Type = \"Spell\", ID = 25771 }),\n    DivineProtection                       = Create({ Type = \"Spell\", ID = 498 }),\n    RuleofLaw                              = Create({ Type = \"Spell\", ID = 214202, Hidden = true     }),\n    GlimmerofLightBuff                     = Create({ Type = \"Spell\", ID = 287280, Hidden = true     }),\n    BreakingDawn                           = Create({ Type = \"Spell\", ID = 278594, Hidden = true     }),\n    DivinePurpose                          = Create({ Type = \"Spell\", ID = 216413, Hidden = true     }),\n    WordofGlory                            = Create({ Type = \"Spell\", ID = 85673     }),    \n    -- Raid\n    DarkestDepths                          = Create({ Type = \"Spell\", ID = 292127, Hidden = true     }), -- Eternal Palace debuff heal\n    -- Misc\n    Cyclone                                = Create({ Type = \"Spell\", ID = 33786, Hidden = true     }), -- Cyclone \n    -- Hidden Heart of Azeroth\n    -- added all 3 ranks ids in case used by rotation\n    VisionofPerfectionMinor                = Create({ Type = \"Spell\", ID = 296320, Hidden = true     }),\n    VisionofPerfectionMinor2               = Create({ Type = \"Spell\", ID = 299367, Hidden = true     }),\n    VisionofPerfectionMinor3               = Create({ Type = \"Spell\", ID = 299369, Hidden = true     }),\n    UnleashHeartOfAzeroth                  = Create({ Type = \"Spell\", ID = 280431, Hidden = true     }),\n    RecklessForceBuff                      = Create({ Type = \"Spell\", ID = 302932, Hidden = true     }),    \n    PoolResource                           = Create({ Type = \"Spell\", ID = 209274, Hidden = true     }),\n    DummyTest                              = Create({ Type = \"Spell\", ID = 159999, Hidden = true     }), -- Dummy stop dps icon    \n    --Mythic Plus Spells \n    Quake                                  = Create({ Type = \"Spell\", ID = 240447, Hidden = true     }), -- Quake (Mythic Plus Affix)\n    Burst                                  = Create({ Type = \"Spell\", ID = 240443, Hidden = true     }), -- Bursting (Mythic Plus Affix) Upon death the creature Bursts, inflicting damage equal to (35 / 10)% of maximum health every 1 sec.\n    GrievousWound                          = Create({ Type = \"Spell\", ID = 240559, Hidden = true     }), -- Grievous (Mythic Plus Affix) 2% of a player's maximum health every 3 sec\n    Slow                                   = Create({ Type = \"Spell\", ID = 313255, Hidden = true     }), -- Shadhar slow\n    Fixate                                 = Create({ Type = \"Spell\", ID = 318078, Hidden = true     }), -- Wrathion Fixate\n    IneffableTruthBuff                     = Create({ Type = \"Spell\", ID = 316801, Hidden = true     }), -- ineffable-truth corruption buff\n}\n\n-- To create essences use next code:\nAction:CreateEssencesFor(ACTION_CONST_PALADIN_HOLY)  -- where PLAYERSPEC is Constance (example: ACTION_CONST_MONK_BM)\nlocal A = setmetatable(Action[ACTION_CONST_PALADIN_HOLY], { __index = Action })\n\n\nlocal player = \"player\"\nlocal targettarget = \"targettarget\"\nlocal target = \"target\"\nlocal mouseover = \"mouseover\"\n\n-- Call to avoid lua limit of 60upvalues \n-- Call RotationsVariables in each function that need these vars\nlocal function RotationsVariables()\n    combatTime = Unit(player):CombatTime()\n    inCombat = Unit(player):CombatTime() > 0\n    UseDBM = GetToggle(1 ,\"DBM\") -- Don't call it DBM else it broke all the global DBM var used by another addons\n    Potion = GetToggle(1, \"Potion\")\n    Racial = GetToggle(1, \"Racial\")\n    HeartOfAzeroth = GetToggle(1, \"HeartOfAzeroth\")\n    MouseOver = GetToggle(2, \"mouseover\")\n    -- ProfileUI vars\n    LayOnHandsHP = GetToggle(2, \"LayOnHandsHP\")\n    LayOnHandsTTD = GetToggle(2, \"LayOnHandsTTD\")\n    HolyShockHP = GetToggle(2, \"HolyShockHP\")\n    HolyShockTTD = GetToggle(2, \"HolyShockTTD\")\n    WordofGloryHP = GetToggle(2, \"WordofGloryHP\")\n    LightofDawnHP = GetToggle(2, \"LightofDawnHP\")\n    LightofDawnTTD = GetToggle(2, \"LightofDawnTTD\")    \n    LightofDawnUnits = GetToggle(2, \"LightofDawnUnits\")\n    FlashofLightHP = GetToggle(2, \"FlashofLightHP\")\n    FlashofLightTTD = GetToggle(2, \"FlashofLightTTD\")\n    HolyLightHP = GetToggle(2, \"HolyLightHP\")\n    HolyLightTTD = GetToggle(2, \"HolyLightTTD\")\n    LightoftheMartyrHP = GetToggle(2, \"LightoftheMartyrHP\")\n    LightoftheMartyrTTD = GetToggle(2, \"LightoftheMartyrTTD\")\n    LightsHammerHP = GetToggle(2, \"LightsHammerHP\")\n    LightsHammerTTD = GetToggle(2, \"LightsHammerTTD\")\n    HolyPrismHP = GetToggle(2, \"HolyPrismHP\")\n    HolyPrismTTD = GetToggle(2, \"HolyPrismTTD\")   \n    BeaconofVirtueHP = GetToggle(2, \"BeaconofVirtueHP\")\n    BeaconofVirtueTTD = GetToggle(2, \"BeaconofVirtueTTD\")   \n    BeaconWorkMode = GetToggle(2, \"BeaconWorkMode\")    \n    LucidDreamManaPercent = GetToggle(2, \"LucidDreamManaPercent\")    \n    LifeBindersInvocationUnits = GetToggle(2, \"LifeBindersInvocationUnits\")  \n    LifeBindersInvocationHP = GetToggle(2, \"LifeBindersInvocationHP\")   \n    ForceGlimmerOnMaxUnits = GetToggle(2, \"ForceGlimmerOnMaxUnits\")\n    GlimmerTankOOC = GetToggle(2, \"GlimmerTankOOC\")\n    AuraMasteryAoETTD = GetToggle(2, \"AuraMasteryAoETTD\")\n    AuraMasteryAfter = GetToggle(2, \"AuraMasteryAfter\")\n    AuraMasteryBelowHealthPercent = GetToggle(2, \"AuraMasteryBelowHealthPercent\")\n    AuraMasteryLast = GetToggle(2, \"AuraMasteryLast\")\n    AuraMasteryUnits = GetToggle(2, \"AuraMasteryUnits\")\n    StartByPreCast = GetToggle(2, \"StartByPreCast\")\n    TrinketMana = GetToggle(2, \"TrinketMana\")\n    HolyShockDPS = GetToggle(2, \"HolyShockDPS\")\n    -- Burst Settings from UI\n    AvengingWrathPartyHP = GetToggle(2, \"AvengingWrathPartyHP\")\n    AvengingWrathPartyUnits = GetToggle(2, \"AvengingWrathPartyUnits\")\n    AvengingWrathRaidHP = GetToggle(2, \"AvengingWrathRaidHP\")\n    AvengingWrathRaidUnits = GetToggle(2, \"AvengingWrathRaidUnits\")\n    HolyAvengerPartyHP = GetToggle(2, \"HolyAvengerPartyHP\")\n    HolyAvengerPartyUnits = GetToggle(2, \"HolyAvengerPartyUnits\")\n    HolyAvengerRaidHP = GetToggle(2, \"HolyAvengerRaidHP\")\n    HolyAvengerRaidUnits = GetToggle(2, \"HolyAvengerRaidUnits\")\n    MythicPlusLogic = GetToggle(2, \"MythicPlusLogic\")\n    StopCastOverHeal = GetToggle(2, \"StopCastOverHeal\")\n    StopCastQuake = GetToggle(2, \"StopCastQuake\")\n    StopCastQuakeSec = GetToggle(2, \"StopCastQuakeSec\")\n    GrievousWoundsLogic = GetToggle(2, \"GrievousWoundsLogic\")\n    GrievousWoundsMinStacks = GetToggle(2, \"GrievousWoundsMinStacks\")\n    BlessingofFreedomWrathion = GetToggle(2, \"BlessingofFreedomWrathion\")\n    WrathionMovementStacks = GetToggle(2, \"WrathionMovementStacks\")\n    BlessingofFreedomShadhar = GetToggle(2, \"BlessingofFreedomShadhar\")\n    AutoFreedom = GetToggle(2, \"AutoFreedom\")\nend\n\n\n-- Get Lowest Tank\nlocal function GetLowestTank(option)\n    -- Get Current Tanks Table\n    local CurrentTanks = A.HealingEngine.GetMembersByMode(\"TANK\")\n    \n    -- Protect against nil values\n    if #CurrentTanks == 0 then\n        if option == \"GUID\" then\n            return \"NoGuid\"\n        end\n        \n        if option == 'HP' then\n            return 1000\n        end\n        \n        if option == 'AHP' then\n            return 1000\n        end\n        \n        if option == 'UnitID' then\n            return \"NoUnit\"\n        end\n    end\n    \n    -- GUID\n    if option == \"GUID\" then\n        return CurrentTanks[1].GUID or \"NoGuid\"\n    end\n    \n    -- HP\n    if option == 'HP' then\n        return CurrentTanks[1].HP or 1000\n    end\n    \n    -- AHP\n    if option == 'AHP' then\n        return CurrentTanks[1].AHP or 1000\n    end\n    \n    -- UnitID\n    if option == 'UnitID' then\n        return CurrentTanks[1].Unit or \"NoUnit\"\n    end\nend\n\n-- Get Lowest Healer\nlocal function GetLowestHealer(option)\n    -- Get Current Healers Table\n    local CurrentHealers = A.HealingEngine.GetMembersByMode(\"HEALER\")\n    \n    -- Protect against nil values\n    if #CurrentHealers == 0 then\n        if option == \"GUID\" then\n            return \"NoGuid\"\n        end\n        \n        if option == 'HP' then\n            return 1000\n        end\n        \n        if option == 'AHP' then\n            return 1000\n        end\n        \n        if option == 'UnitID' then\n            return \"NoUnit\"\n        end\n    end\n    \n    -- GUID\n    if option == \"GUID\" then\n        return CurrentHealers[1].GUID or \"NoGuid\"\n    end\n    \n    -- HP\n    if option == 'HP' then\n        return CurrentHealers[1].HP or 1000\n    end\n    \n    -- AHP\n    if option == 'AHP' then\n        return CurrentHealers[1].AHP or 1000\n    end\n    \n    -- UnitID\n    if option == 'UnitID' then\n        return CurrentHealers[1].Unit or \"NoUnit\"\n    end\nend\n\n-- Get Lowest DPS\nlocal function GetLowestDamager(option)\n    -- Get Current Damagers Table\n    local CurrentDamagers = A.HealingEngine.GetMembersByMode(\"DAMAGER\")\n    --Unit = member, GUID = memberGUID, HP = memberhp, AHP = memberahp, isPlayer = true, incDMG = Actual_DMG\n    \n    -- Protect against nil values\n    if #CurrentDamagers == 0 then\n        if option == \"GUID\" then\n            return \"NoGuid\"\n        end\n        \n        if option == 'HP' then\n            return 1000\n        end\n        \n        if option == 'AHP' then\n            return 1000\n        end\n        \n        if option == 'UnitID' then\n            return \"NoUnit\"\n        end\n    end\n    \n    -- GUID\n    if option == \"GUID\" then\n        return CurrentDamagers[1].GUID or \"NoGuid\"\n    end\n    \n    -- HP\n    if option == 'HP' then\n        return CurrentDamagers[1].HP or 1000\n    end\n    \n    -- AHP\n    if option == 'AHP' then\n        return CurrentDamagers[1].AHP or 1000\n    end\n    \n    -- UnitID\n    if option == 'UnitID' then\n        return CurrentDamagers[1].Unit or \"NoUnit\"\n    end\nend\n\n-- Get Lowest ALL\nlocal function GetLowestALL(option)\n    -- Get Current Members Table\n    local CurrentMembers = A.HealingEngine.GetMembersAll()\n    --Unit = member, GUID = memberGUID, HP = memberhp, AHP = memberahp, isPlayer = true, incDMG = Actual_DMG\n    \n    -- Protect against nil values\n    if #CurrentMembers == 0 then\n        if option == \"GUID\" then\n            return \"NoGuid\"\n        end\n        \n        if option == 'HP' then\n            return 1000\n        end\n        \n        if option == 'AHP' then\n            return 1000\n        end\n        \n        if option == 'UnitID' then\n            return \"NoUnit\"\n        end\n    end\n    \n    -- GUID\n    if option == \"GUID\" then\n        return CurrentMembers[1].GUID or \"NoGuid\"\n    end\n    \n    -- HP\n    if option == 'HP' then\n        return CurrentMembers[1].HP or 1000\n    end\n    \n    -- AHP\n    if option == 'AHP' then\n        return CurrentMembers[1].AHP or 1000\n    end\n    \n    -- UnitID\n    if option == 'UnitID' then\n        return CurrentMembers[1].Unit or \"NoUnit\"\n    end\nend\n\n-- Get Lowest Ally depending on parameters \n-- @parameters target and option are mandatory\n-- @target can be \"TANK\", \"DAMAGER\", \"HEALER\" or \"ALL\"\n-- @option can be \"GUID\", \"HP\", \"AHP\" or \"UnitID\"\n-- return the current lowest member depending of choosen option\n\nlocal function GetLowestAlly(target, option)\n    if target == \"TANK\" then\n        return GetLowestTank(option)\n    end\n    \n    if target == \"DAMAGER\" then\n        return GetLowestDamager(option)\n    end\n    \n    if target == \"HEALER\" then\n        return GetLowestHealer(option)\n    end\n    \n    if target == \"ALL\" then\n        return GetLowestALL(option)\n    end\nend\n\nhealingTarget = \"None\"\nhealingTargetGUID = \"None\"\n\n-- Custom targetting function\n-- @Parameter: TARGET is mandatory\n-- @usage: Arguments can be \"TANK\", \"HEALER\", \"DAMAGER\", \"ALL\"\n-- Return current LowestAlly based on arguments, example: current lowest tank\nlocal function ForceHealingTarget(TARGET)\n    --local target = TARGET or nil\n    local CurrentHealers = A.HealingEngine.GetMembersByMode(\"HEALER\")\n    local CurrentDamagers = A.HealingEngine.GetMembersByMode(\"DAMAGER\")\n    local CurrentTanks = A.HealingEngine.GetMembersByMode(\"TANK\")\n    local CurrentMembers = A.HealingEngine.GetMembersAll()\n    healingTarget = \"None\"\n    healingTargetGUID = \"None\"\n    HealingEngine.SetTarget(healingTarget)\n    \n    if TARGET == \"TANK\" then\n        healingTarget = CurrentTanks[1].Unit\n        healingTargetGUID = CurrentTanks[1].GUID\n        HealingEngine.SetTarget(healingTarget)\n        return\n    end\n    \n    if TARGET == \"DPS\" and CurrentDamagers[1].HP < hp then\n        healingTarget = CurrentDamagers[1].Unit\n        healingTargetGUID = CurrentDamagers[1].GUID\n        HealingEngine.SetTarget(healingTarget)\n        return\n    end\n    \n    if TARGET == \"HEAL\" and CurrentHealers[1].HP < hp then\n        healingTarget = CurrentHealers[1].Unit\n        healingTargetGUID = CurrentHealers[1].GUID\n        HealingEngine.SetTarget(healingTarget)\n        return\n    end\n    \n    if TARGET == \"ALL\" and CurrentMembers[1].HP < 99 then\n        healingTarget = CurrentMembers[1].Unit\n        healingTargetGUID = CurrentMembers[1].GUID\n        HealingEngine.SetTarget(healingTarget)\n        return\n    end\nend\n\n-- Custom HPal Dispell handler\nlocal function ShouldDispell(unit)\n    -- Do not dispel these spells\n    local blacklist = {\n        33786,\n        131736,\n        30108,\n        124465,\n        34914\n    }\n    -- Dispell Types\n    local dispelTypes = {\n        \"Poison\",\n        \"Disease\",\n        \"Magic\"\n    }\n    \n    for i = 1, 40 do\n        for x = 1, #dispelTypes do\n            local name, rank, icon, count, debuffType = UnitDebuff(unit, i) \n            if debuffType == dispelTypes[x] then\n                for i = 1, #blacklist do\n                    if Unit(unit):HasDeBuffs(blacklist[i], true) then\n                        return false\n                    end\n                end\n                return true\n            end\n        end\n    end\n    return false\nend\nShouldDispell = A.MakeFunctionCachedDynamic(ShouldDispell)\n\nlocal Temp                               = {\n    TotalAndPhys                            = {\"TotalImun\", \"DamagePhysImun\"},\n    TotalAndPhysKick                        = {\"TotalImun\", \"DamagePhysImun\", \"KickImun\"},\n    TotalAndPhysAndCC                       = {\"TotalImun\", \"DamagePhysImun\", \"CCTotalImun\"},\n    TotalAndPhysAndStun                     = {\"TotalImun\", \"DamagePhysImun\", \"StunImun\"},\n    TotalAndPhysAndCCAndStun                = {\"TotalImun\", \"DamagePhysImun\", \"CCTotalImun\", \"StunImun\"},\n    TotalAndMag                             = {\"TotalImun\", \"DamageMagicImun\"},\n    TotalAndMagKick                         = {\"TotalImun\", \"DamageMagicImun\", \"KickImun\"},\n    -- Anti overhealing\n    IsSpellIsCast                           = {\n        [A.FlashofLight:Info()]                 = \"FlashofLight\",\n        [A.HolyLight:Info()]                    = \"HolyLight\",        \n    }, \n}\n\nlocal GetTotemInfo, IsMouseButtonDown, UnitIsUnit = GetTotemInfo, IsMouseButtonDown, UnitIsUnit\n\nlocal function IsSchoolFree()\n    return LoC:IsMissed(\"SILENCE\") and LoC:Get(\"SCHOOL_INTERRUPT\", \"NATURE\") == 0\nend \n\nlocal function InMelee(unit)\n    -- @return boolean \n    return A.Judgement:IsInRange(unit)\nend \n\n-- @return boolean  \n-- @parameters count, range are mandatory, others parameters optionals\nlocal ActiveUnitPlates = MultiUnits:GetActiveUnitPlates()\nlocal function GetByRange(count, range, isCheckEqual, isCheckCombat)\n    local c = 0 \n    for unit in pairs(ActiveUnitPlates) do \n        if (not isCheckEqual or not UnitIsUnit(target, unit)) and (not isCheckCombat or Unit(unit):CombatTime() > 0) then \n            if InMelee(unit) then \n                c = c + 1\n            elseif range then \n                local r = Unit(unit):GetRange()\n                if r > 0 and r <= range then \n                    c = c + 1\n                end \n            end \n            \n            if c >= count then \n                return true \n            end \n        end \n    end\nend  \n\n-- [1] CC AntiFake Rotation\nlocal function AntiFakeStun(unit) \n    return \n    IsUnitEnemy(unit) and  \n    Unit(unit):GetRange() <= 10 and \n    A.HammerofJusticeGreen:AbsentImun(unit, Temp.TotalAndPhysAndCCAndStun, true)          \nend \nA[1] = function(icon)    \n    local useKick, useCC, useRacial = A.InterruptIsValid(targettarget, \"TargetMouseover\")    \n    \n    \n    \n    -- Auto targettarget ?\n    if useCC and A.HammerofJustice:IsReady(targettarget) and A.HammerofJustice:AbsentImun(targettarget, Temp.TotalAndPhysAndCCAndStun, true) then \n        -- Notification                    \n        Action.SendNotification(\"HammerofJustice interrupting...\", A.HammerofJustice.ID)\n        return A.HammerofJusticeGreen              \n    end \n    \n    -- Manual Key\n    if     A.HammerofJusticeGreen:IsReady(nil, nil, nil, true) and \n    (\n        AntiFakeStun(mouseover) or \n        AntiFakeStun(target) or \n        (\n            not IsUnitEnemy(mouseover) and \n            not IsUnitEnemy(target) and                     \n            (\n                (A.IsInPvP and EnemyTeam():PlayersInRange(1, 10)) or \n                (not A.IsInPvP and GetByRange(1, 10))\n            )\n        )\n    )\n    then \n        return A.HammerofJusticeGreen:Show(icon)         \n    end\n    \n    \nend\n\n-- [2] Kick AntiFake Rotation\nA[2] = function(icon)        \n    local unit\n    if IsUnitEnemy(mouseover) then \n        unit = mouseover\n    elseif IsUnitEnemy(target) then \n        unit = target\n    end \n    \n    if unit then         \n        local castLeft, _, _, _, notKickAble = Unit(unit):IsCastingRemains()\n        if castLeft > 0 then             \n            if not notKickAble and A.Rebuke:IsReady(unit, nil, nil, true) and A.Rebuke:AbsentImun(unit, Temp.TotalAndMag, true) then\n                return A.Rebuke:Show(icon)                                                  \n            end \n            \n            -- Racials \n            if A.QuakingPalm:IsRacialReadyP(unit, nil, nil, true) then \n                return A.QuakingPalm:Show(icon)\n            end \n            \n            if A.Haymaker:IsRacialReadyP(unit, nil, nil, true) then \n                return A.Haymaker:Show(icon)\n            end \n            \n            if A.WarStomp:IsRacialReadyP(unit, nil, nil, true) then \n                return A.WarStomp:Show(icon)\n            end \n            \n            if A.BullRush:IsRacialReadyP(unit, nil, nil, true) then \n                return A.BullRush:Show(icon)\n            end                         \n        end \n    end                                                                                 \nend\n\n-----------------------------------------\n--        ROTATION FUNCTIONS           --\n-----------------------------------------\n\n-- Return number\n-- Consecration duration left\nlocal function Consecration()\n    for i = 1, 5 do\n        local active, totemName, startTime, duration, textureId  = GetTotemInfo(i)\n        if active == true and textureId == 135926 then\n            return startTime + duration - GetTime()\n        end\n    end\n    return 0\nend\n\n-- Return boolean\n-- Current HPS > Incoming damage\nlocal function IsEnoughHPS(unit)\n    return Unit(player):GetHPS() > Unit(unit):GetDMG()\nend \n\n-- Return boolean\n-- Current Group HPS > Incoming damage\nlocal function IsGroupEnoughHPS()\n    return ((HealingEngine.GetIncomingHPSAVG() > HealingEngine.GetIncomingDMGAVG()) or (not IsInRaid() and not IsInGroup()))\nend\n\n-- Return boolean\n-- Current Group is taking massive damage that need burst\nlocal function NeedEmergencyHPS()\n    return ( HealingEngine.GetIncomingHPSAVG() * 2 < HealingEngine.GetIncomingDMGAVG() )\nend\n\n-- Return boolean\n-- Current Group is taking ultra massive damage that need burst\nlocal function NeedUltraEmergencyHPS()\n    return ( HealingEngine.GetIncomingHPSAVG() * 3 < HealingEngine.GetIncomingDMGAVG() )\nend\n\n-- Mana Management\nlocal function IsSaveManaPhase()\n    if not A.IsInPvP and A.GetToggle(2, \"ManaManagement\") then \n        for i = 1, MAX_BOSS_FRAMES do \n            if Unit(\"boss\" .. i):IsExists() and not Unit(\"boss\" .. i):IsDead() and Unit(player):PowerPercent() < Unit(\"boss\" .. i):HealthPercent() then \n                return true \n            end \n        end \n    end \n    return Unit(player):PowerPercent() < 20 \nend \nIsSaveManaPhase = A.MakeFunctionCachedStatic(IsSaveManaPhase)\n\n-- Non GCD spell check\nlocal function countInterruptGCD(unit)\n    if not A.Rebuke:IsReadyByPassCastGCD(unit) or not A.Rebuke:AbsentImun(unit, Temp.TotalAndMagKick) then\n        return true\n    end\nend\n\n-- Interrupts spells\nlocal function Interrupts(unit)\n    if A.GetToggle(2, \"TasteInterruptList\") and (IsInRaid() or A.InstanceInfo.KeyStone > 1) then\n        useKick, useCC, useRacial, notInterruptable, castRemainsTime, castDoneTime = Action.InterruptIsValid(unit, \"TasteBFAContent\", true, countInterruptGCD(unit))\n    else\n        useKick, useCC, useRacial, notInterruptable, castRemainsTime, castDoneTime = Action.InterruptIsValid(unit, nil, nil, countInterruptGCD(unit))\n    end\n    \n    local EnemiesCasting = MultiUnits:GetByRangeCasting(10, 5, true, \"TargetMouseover\")\n    \n    if castRemainsTime >= A.GetLatency() then\n        \n        -- Try Aoe CC Enemy if no agro\n        if useCC and not A.Rebuke:IsReady(unit) and A.BlindingLight:IsSpellLearned() and A.BlindingLight:IsReady(\"player\") and (GetByRange(2, 10) or EnemiesCasting > 1) then\n            return A.BlindingLight\n        end\n        \n        if useKick and A.Rebuke:IsReady(unit) and A.Rebuke:AbsentImun(unit, Temp.TotalAndPhysKick, true) then \n            -- Notification                    \n            Action.SendNotification(\"Rebuke interrupting on Target \", A.Rebuke.ID)\n            return A.Rebuke\n        end \n        \n        if useCC and A.HammerofJustice:IsReady(unit) and A.HammerofJustice:AbsentImun(unit, Temp.TotalAndPhysAndCCAndStun, true) then \n            -- Notification                    \n            Action.SendNotification(\"HammerofJustice interrupting...\", A.HammerofJustice.ID)\n            return A.HammerofJusticeGreen              \n        end   \n        \n        if useRacial and A.QuakingPalm:AutoRacial(unit) then \n            return A.QuakingPalm\n        end \n        \n        if useRacial and A.Haymaker:AutoRacial(unit) then \n            return A.Haymaker\n        end \n        \n        if useRacial and A.WarStomp:AutoRacial(unit) then \n            return A.WarStomp\n        end \n        \n        if useRacial and A.BullRush:AutoRacial(unit) then \n            return A.BullRush\n        end \n    end\nend\n\n-- Return total active Glimmer of Light buff and debuff\nlocal function GlimmerofLightCount()\n    return HealingEngine.GetBuffsCount(A.GlimmerofLightBuff.ID, 0, player, true)\nend\n\n-- Return total active Beacon of Light Buff for player only\nlocal function ActiveBeacon()\n    return HealingEngine.GetBuffsCount(A.BeaconofLight.ID, 0, player, true)\nend\n\n-- Return total active Beacon of Light Buff for tank only\nlocal function ActiveBeaconOnTank()\n    local CurrentTanks = HealingEngine.GetMembersByMode(\"TANK\")\n    local total = 0\n    -- Iterate through current tanks\n    for i = 1, #CurrentTanks do \n        if Unit(CurrentTanks[i].Unit):HasBuffs(A.BeaconofLight.ID, true) > 0 then\n            total = total + 1\n        end\n    end\n    return total\nend\n\n-- Return valid members that can be healed\n--@parameter IsPlayer : return only members that are real players\nlocal function GetValidMembers(IsPlayer)\n    local HealingEngineMembersALL = A.HealingEngine.GetMembersAll()\n    if not IsPlayer then \n        return #HealingEngineMembersALL\n    else \n        local total = 0 \n        if #HealingEngineMembersALL > 0 then \n            for i = 1, #HealingEngineMembersALL do\n                if Unit(HealingEngineMembersALL[i].Unit):IsPlayer() then\n                    total = total + 1\n                end\n            end \n        end \n        return total \n    end \nend\n\n-- Tracks destination unit of the casting spells to prevent by stopcasting overhealing \nlocal TeamCacheFriendlyGUIDs                = Action.TeamCache.Friendly.GUIDs\nlocal function CastStart(event, ...)\n    local unitID, _, spellID = ...\n    if unitID == player and spellID then \n        local spellName = GetSpellInfo(spellID)\n        if spellName and Temp.IsSpellIsCast[spellName] then \n            Temp.LastPrimaryUnitGUID     = (IsUnitFriendly(mouseover) and Unit(mouseover):InfoGUID()) or (IsUnitFriendly(target) and Unit(target):InfoGUID()) or Unit(player):InfoGUID()\n            Temp.LastPrimaryUnitID       = TeamCacheFriendlyGUIDs[Temp.LastPrimaryUnitGUID]\n            Temp.LastPrimarySpellName    = spellName \n            Temp.LastPrimarySpellID      = spellID\n        end \n    end \nend \n\nlocal function CastStop(event, ...)\n    if Temp.LastPrimaryUnitGUID then     \n        local unitID = ...\n        if unitID == player then \n            Temp.LastPrimaryUnitGUID     = nil \n            Temp.LastPrimaryUnitID       = nil \n            Temp.LastPrimarySpellName    = nil \n            Temp.LastPrimarySpellID      = nil \n        end \n    end \nend \n\nListener:Add(\"ACTION_EVENT_HOLY_PALADIN\", \"UNIT_SPELLCAST_START\",            CastStart   )\nListener:Add(\"ACTION_EVENT_HOLY_PALADIN\", \"UNIT_SPELLCAST_STOP\",             CastStop    )\nListener:Add(\"ACTION_EVENT_HOLY_PALADIN\", \"UNIT_SPELLCAST_FAILED\",           CastStop    )\nListener:Add(\"ACTION_EVENT_HOLY_PALADIN\", \"UNIT_SPELLCAST_INTERRUPTED\",      CastStop    )\nListener:Add(\"ACTION_EVENT_HOLY_PALADIN\", \"UNIT_SPELLCAST_CHANNEL_START\",    CastStart   )\nListener:Add(\"ACTION_EVENT_HOLY_PALADIN\", \"UNIT_SPELLCAST_CHANNEL_STOP\",     CastStop    )\n\nlocal function CanStopCastingOverHeal(unitID, unitGUID)\n    -- @return boolean \n    if GetToggle(1, \"StopCast\") and Temp.LastPrimaryUnitGUID then\n        local castLeftSeconds, castDonePercent, _, spellName = Unit(player):IsCastingRemains()\n        if castLeftSeconds > 0 and castLeftSeconds <= 0.35 and spellName == Temp.LastPrimarySpellName and (Temp.LastPrimaryUnitID or (unitID and ((unitGUID or UnitGUID(unitID)) == Temp.LastPrimaryUnitGUID))) then\n            local unit = Temp.LastPrimaryUnitID or unitID\n            if Unit(unit):HealthPercent() >= 100 then \n                return true \n            end \n            \n            local Key = Temp.IsSpellIsCast[spellName]\n            local ObjKey\n            for i = 0, huge do \n                if i == 0 then \n                    ObjKey = Key\n                else \n                    ObjKey = Key .. i\n                end \n                \n                if A[ObjKey] then \n                    if A[ObjKey].ID == Temp.LastPrimarySpellID then \n                        --return not A[ObjKey]:PredictHeal(unit, 0.8, unitGUID)\n                        return not A[ObjKey]:PredictHeal(unit, 0.8)\n                    end \n                else \n                    break \n                end \n            end \n        end \n    end \nend \n\nlocal function HoF(unit, Icon)    \n    --local msg = MacroSpells(Icon, \"Freedom\")\n    return\n    --(\n    --     msg or \n    --     HoF_toggle  \n    -- ) and\n    A.BlessingofFreedom:IsReady(unit) and \n    Unit(unit):IsPlayer() and\n    (\n        -- SELF\n        (\n            UnitIsUnit(unit, player) and \n            (\n                Unit(unit):HasDeBuffs(\"Rooted\") > GetCurrentGCD() + GetGCD() or \n                (\n                    Unit(player):GetCurrentSpeed() > 0 and \n                    Unit(player):GetMaxSpeed() < 100\n                )\n            )\n        ) or\n        -- ANOTHER UNIT \n        (\n            -- Useable conditions\n            Unit(unit):IsExists() and \n            not UnitIsUnit(unit, player) and \n            select(2, UnitClass(unit)) ~= \"DRUID\" and\n            --not Unit(unit):InLOS() and         \n            A.BlessingofFreedom:IsInRange(unit)    and        \n            Unit(unit):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone    \n            (\n                -- MSG System\n                -- msg or \n                -- Rooted and Solar Beam\n                (\n                    Unit(unit):HasDeBuffs(78675, true) > 0 and  \n                    Unit(unit):HasDeBuffs(\"Rooted\") > GetCurrentGCD()\n                ) \n                or \n                -- Rooted without inc dmg \n                (\n                    Unit(unit):HasDeBuffs(\"Rooted\") > 3 and\n                    Unit(unit):GetRealTimeDMG() <= Unit(unit):HealthMax() * 0.1 \n                ) \n                or \n                -- Slowed (if we no need freedom for self)\n                (\n                    (\n                        -- 8.2 changes Unbound Freedom\n                        A.IsSpellLearned(305394) or \n                        not Unit(player):IsFocused() or \n                        Unit(player):GetMaxSpeed() >= 100\n                    ) and\n                    Unit(unit):GetCurrentSpeed() > 0 and \n                    Unit(unit):GetMaxSpeed() < 80 and \n                    (\n                        (\n                            -- 8.2 changes Unbound Freedom\n                            A.IsSpellLearned(305394) and \n                            Unit(player):GetCurrentSpeed() < 100\n                        ) or \n                        (\n                            Unit(unit):HasBuffs(\"DamageBuffs\") > 6 and \n                            Unit(unit):HasDeBuffs(\"Slowed\") > 0 and \n                            Unit(unit):HasDeBuffs(\"Disarmed\") <= GetCurrentGCD()\n                        )\n                    )\n                ) \n                or \n                (                \n                    Action.ZoneID == 1580 and                   -- Ny'alotha - Vision of Destiny\n                    Unit(unit):HasDeBuffsStacks(307056) >= 40 -- Burning Madness\n                )\n            )\n        )\n    ) and\n    -- Check another CC types \n    -- Hex, Polly, Repentance, Blind, Wyvern Sting, Ring of Frost, Paralysis, Freezing Trap, Mind Control\n    Unit(unit):HasDeBuffs({51514, 118, 20066, 2094, 19386, 82691, 115078, 3355, 605}, true) <= GetCurrentGCD() and \n    Unit(unit):HasDeBuffs(\"Incapacitated\") <= GetCurrentGCD() and \n    Unit(unit):HasDeBuffs(\"Disoriented\") <= GetCurrentGCD() and \n    Unit(unit):HasDeBuffs(\"Fear\") <= GetCurrentGCD() and \n    Unit(unit):HasDeBuffs(\"Stuned\") <= GetCurrentGCD()  \nend    \n\n\nlocal function SacrificeAble(unit)\n    -- Function to check if we can use sacriface with max profit time duration on unit\n    local dmg, u_ttd, bubble, shield = Unit(unit):GetDMG() * 0.7, Unit(unit):TimeToDie() * 0.7, Unit(player):HasBuffs(642, true), 1\n    -- -20% incoming damage\n    local shield_buff = Unit(player):HasBuffs(498, true)\n    if shield_buff > 0 then \n        shield = dmg * ( 0.2 - (0.2 - (shield_buff * 0.2 / 8)) )\n    end\n    \n    local p_ttd, p_chp = 0, Unit(player):Health()\n    if not A.UltimateSacrifice:IsSpellLearned() or not A.IsInPvP then\n        -- Real player's ttd to lower 20% under sacriface and shield buff\n        local p_mhp = Unit(player):HealthMax() * 0.2\n        if p_chp > p_mhp and dmg > 0 and u_ttd > 0 then \n            local muliplier = 0.75\n            -- If Protection then 100% receiving damage by Sacriface\n            if Unit(player):HasSpec(66) then \n                muliplier = 1\n            end     \n            p_ttd = math.abs(        \n                -- Current HP without 20% / incdmg by Sacriface + already exist incdmg for yourself\n                (p_chp - p_mhp) /\n                (( dmg * muliplier * (1 - (GetCombatRatingBonus(CR_VERSATILITY_DAMAGE_DONE)/2/100)) ) + Unit(player):GetDMG() )\n            )     \n        end\n    else\n        p_ttd = math.abs(        \n            -- Current HP / incdmg by Sacriface + already exist incdmg for yourself\n            p_chp /\n            (( dmg * (1 - (GetCombatRatingBonus(CR_VERSATILITY_DAMAGE_DONE)/2/100)) ) + Unit(player):GetDMG() )\n        )    \n    end \n    \n    if bubble > 0 then \n        p_ttd = p_ttd + bubble\n    end\n    \n    return p_ttd + GetCurrentGCD() >= u_ttd, p_ttd\nend\n\n-- Hand of Sacrifice\nlocal function HoS(unit, hp, IsRealDMG, IsDeffensed)  \n    return \n    Unit(unit):IsExists() and \n    Unit(unit):IsPlayer() and\n    not UnitIsUnit(unit, player) and\n    --not Unit(unit):InLOS() and \n    (UnitInRaid(unit) or UnitInParty(unit)) and \n    A.BlessingofSacrifice:IsReady(unit) and\n    A.BlessingofSacrifice:IsInRange(unit) and \n    Unit(unit):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone \n    Unit(player):Health() > Unit(player):HealthMax() * 0.2 and       \n    (\n        -- MSG System TO ACTION\n        --(\n        --    Icon and \n        --   MacroSpells(Icon, \"HoS\") \n        --) or  \n        -- HoS conditions \n        (\n            -- HoS_toggle and \n            SacrificeAble(unit) and \n            Unit(unit):HasBuffs(1022, true) == 0 and -- BoP\n            -- Check args\n            (\n                not IsRealDMG or\n                Unit(unit):GetRealTimeDMG() > 0\n            ) and \n            ( \n                not IsDeffensed or \n                Unit(unit):HasBuffs(\"DeffBuffs\", true) == 0\n            ) and \n            -- Check if unit don't will be killed \n            (\n                not Unit(player):HasSpec(65) or -- Holy\n                Unit(unit):TimeToDie() >= 4 \n            ) and \n            -- Conditions\n            (\n                -- Check for HP arg\n                ( \n                    hp and \n                    Unit(unit):Health() <= Unit(unit):HealthMax() * (hp / 100)\n                ) or \n                -- Another check \n                (\n                    Unit(unit):TimeToDie() < 14 and \n                    (\n                        (\n                            Unit(unit):Health() <= Unit(unit):HealthMax() * 0.35 and \n                            (\n                                Unit(unit):GetHEAL()  * 1.4 < Unit(unit):GetDMG() or\n                                Unit(unit):Health() <= Unit(unit):GetDMG() * 3.5 \n                            ) \n                        ) or \n                        -- if unit has 35% dmg per sec \n                        Unit(unit):GetRealTimeDMG() >= Unit(unit):HealthMax() * 0.35 or \n                        -- if unit has sustain 20% dmg per sec \n                        Unit(unit):GetDMG() >= Unit(unit):HealthMax() * 0.2\n                    )\n                )\n            )\n        )\n    )\nend \n\n-- Blessing of Sanctuary\nlocal function BoS(unit)    \n    return\n    A.BlessingofSanctuary:IsSpellLearned() and \n    A.BlessingofSanctuary:IsReady() and \n    UnitExists(unit) and      \n    A.BlessingofSanctuary:IsSpellInRange(unit) and     \n    Unit(unit):HasDeBuffs(33786, true) == 0 and -- Cyclone\n    (\n        (\n            --MacroSpells(Icon, \"HoS\") and \n            (\n                Unit(unit):HasDeBuffs(\"Stuned\") > 1.5 or \n                Unit(unit):HasDeBuffs(\"Fear\") > 1.5 or \n                (\n                    Unit(unit):HasDeBuffs(\"Silenced\") > 1.5 and \n                    Unit(unit):HasDeBuffs(78675, true) == 0 -- Solar Beam\n                )\n            )\n        ) or \n        (\n            HoS_toggle and \n            (\n                Unit(unit):HasDeBuffs({115080, 79140}, true) == 0 or -- Touch of Death, Vendetta\n                not BlessingofProtection:IsReady() or -- BoP\n                Unit(unit):HasDeBuffs(25771, true) > 1 -- Forbearance\n            ) and \n            (\n                (\n                    (\n                        Unit(unit):HasDeBuffs(5246, true) > 3.5 and -- Intimidating Shout                \n                        not Unit(unit):IsFocused() \n                    ) or \n                    (\n                        Unit(unit):HasDeBuffs(\"PhysStuned\") > 3.5 and \n                        (\n                            Unit(unit):HasBuffs(\"DamageBuffs\") > 3 or \n                            (\n                                Unit(unit):HasDeBuffs(76577, true) > 0 and -- Smoke Bomb\n                                Unit(unit):IsFocused(\"MELEE\")\n                            )\n                        )\n                    ) or             \n                    (\n                        Unit(unit):Role(\"HEALER\") and \n                        (\n                            Unit(unit):HasDeBuffs(\"Stuned\") > 3.5 or\n                            Unit(unit):HasDeBuffs(\"Fear\") > 3.5 or \n                            (\n                                Unit(unit):HasDeBuffs(\"Silenced\") > 3.5 and \n                                Unit(unit):HasDeBuffs(78675, true) == 0 -- Solar Beam\n                            ) \n                        )  \n                    ) \n                ) and \n                -- Hex, Polly, Repentance, Blind, Wyvern Sting, Ring of Frost, Paralysis, Freezing Trap, Mind Control\n                Unit(unit):HasDeBuffs({51514, 118, 20066, 2094, 19386, 82691, 115078, 3355, 605}, true) <= GetCurrentGCD() \n            )\n        ) \n    )\nend\n\nlocal function BoP(unit, Icon)\n    local id = 1022\n    \n    return\n    A.BlessingofProtection:IsReady(unit) and \n    Unit(unit):IsExists() and \n    Unit(unit):IsPlayer() and\n    not Unit(unit):IsTank() and\n    (\n        not UnitIsUnit(unit, player) or\n        -- Divine Shield\n        A.DivineShield:GetCooldown() > 5\n    ) and\n    --not Unit(unit):InLOS() and    \n    (UnitInRaid(unit) or UnitInParty(unit)) and\n    A.BlessingofProtection:IsInRange(unit) and     \n    Unit(unit):HasDeBuffs({33786, 25771}, true) == 0 and -- Cyclone and Forbearance   \n    ( \n        not A.IsInPvP or\n        not Unit(unit):HasFlags()       \n    ) and\n    (\n        -- ( \n        --     Icon and \n        --     MacroSpells(Icon, \"BoP\")\n        -- ) or \n        (\n            --BoP_toggle and \n            id == 1022 and \n            (\n                -- Deffensive\n                (            \n                    Unit(unit):GetDMG(3) > 0 and \n                    (\n                        (\n                            Unit(player):HasSpec(65) and -- Holy\n                            Unit(unit):HealthPercent() <= 38 and \n                            -- Physical real damage still appear\n                            select(3, Unit(unit):GetRealTimeDMG()) > 0\n                        ) or\n                        (\n                            not Unit(player):HasSpec(65) and -- Holy                            \n                            Unit(unit):HealthPercent() <= 31 and \n                            (\n                                FriendlyTeam(\"HEALER\"):GetCC() or\n                                Unit(unit):TimeToDieX(20) < 2\n                            ) and\n                            Unit(unit):HasBuffs(\"DeffBuffs\") == 0 \n                        )\n                    ) and                     \n                    (\n                        -- PvP \n                        (\n                            A.IsInPvP and\n                            (\n                                Unit(unit):IsFocused(\"MELEE\") or\n                                (\n                                    Unit(unit):UseDeff() and \n                                    -- Physical real damage still appear\n                                    select(3, Unit(unit):GetRealTimeDMG()) > 0\n                                )\n                            )\n                        ) or\n                        -- PvE \n                        not A.IsInPvP \n                    )\n                ) or \n                -- Damage DeBuffs\n                Unit(unit):HasDeBuffs({115080, 122470}, true) > 4 or -- Touch of Death and KARMA\n                Unit(unit):HasDeBuffs(79140, true) > 15 or -- Vendetta\n                -- CC Physical DeBuffs\n                (\n                    (\n                        -- Disarmed\n                        (\n                            not Unit(player):HasSpec(70) and -- Retribution\n                            Unit(unit):IsMelee() and \n                            Unit(unit):HasDeBuffs(\"Disarmed\") > 4.5 and                             \n                            Unit(unit):HasBuffs(\"DamageBuffs\") > 4                      \n                        ) or \n                        -- Another BreakAble CC \n                        (\n                            (\n                                Unit(unit):HasDeBuffs(2094, true) > 3.2 or -- Blind\n                                (\n                                    Unit(unit):HasDeBuffs(5246, true) > 3.2 and -- Intimidating Shout\n                                    (\n                                        not Unit(player):HasSpec(70) or -- Retribution\n                                        -- Blessing of Sanctuary\n                                        not A.BlessingofSanctuary:IsSpellLearned() or \n                                        not A.BlessingofSanctuary:IsReady(unit)\n                                    )\n                                )\n                            ) and \n                            (\n                                not A.IsInPvP or \n                                not Unit(unit):IsFocused()\n                            )\n                        ) or \n                        -- HEALER HELP \n                        (\n                            Unit(unit):Role(\"HEALER\") and \n                            (\n                                Unit(unit):HasDeBuffs(\"Stuned\") >= 4 or \n                                -- Garrote\n                                Unit(unit):HasDeBuffs(1330, true) >= 2.5\n                            ) and \n                            (\n                                not Unit(player):HasSpec(70) or -- Retribution\n                                -- Blessing of Sanctuary\n                                not A.BlessingofSanctuary:IsSpellLearned() or  \n                                not A.BlessingofSanctuary:IsReady(unit)\n                            ) and \n                            Unit(unit):HasBuffs(\"DeffBuffs\") <= GetCurrentGCD() and\n                            (\n                                not A.IsInPvP or \n                                -- if enemy melee bursting \n                                Unit(unit):IsFocused(\"MELEE\") \n                            )\n                        ) \n                    ) and \n                    -- Check for non physical CC \n                    (\n                        Unit(unit):HasDeBuffs(\"Silenced\") <= GetCurrentGCD() or \n                        -- Garrote\n                        Unit(unit):HasDeBuffs(1330, true) >= 2.5\n                    ) and \n                    Unit(unit):HasDeBuffs(\"Magic\") <= GetCurrentGCD() and \n                    -- Hex\n                    Unit(unit):HasDeBuffs(51514, true) <= GetCurrentGCD()\n                )\n            )\n        )\n    )\nend\n\nlocal function UrgentMythicPlusTargetting()\n    \n    local getmembersAll = HealingEngine.GetMembersAll()\n    local BleedFriendCount = 0\n    local BleedStack = 0\n    RotationsVariables()\n    \n    if MythicPlusLogic then\n        \n        -- Junkyard\n        if inCombat and select(8, GetInstanceInfo()) == 2097 then\n            for i = 1, #getmembersAll do\n                if Unit(getmembersAll[i].Unit):HasDeBuffs(302274, true) ~= 0 --Fulminating Zap\n                and Unit(getmembersAll[i].Unit):HealthPercent() < 80 \n                then\n                    HealingEngine.SetTarget(getmembersAll[i].Unit, 0.5)\n                end\n            end\n        end\n        \n        -- Waycrest Manor\n        if inCombat and select(8, GetInstanceInfo()) == 1862 then\n            for i = 1, #getmembersAll do\n                if Unit(getmembersAll[i].Unit):HasDeBuffs(260741, true) ~= 0 --Jagged Nettles\n                and Unit(getmembersAll[i].Unit):HealthPercent() < 95 \n                then\n                    HealingEngine.SetTarget(getmembersAll[i].Unit, 0.5)\n                end\n            end\n        end\n        \n        --Kings Rest\n        if inCombat and select(8, GetInstanceInfo()) == 1762 then\n            for i = 1, #getmembersAll do\n                if Unit(getmembersAll[i].Unit):HasDeBuffs(267626, true) ~= 0 -- Dessication\n                or Unit(getmembersAll[i].Unit):HasDeBuffs(267618, true) ~= 0 -- Drain Fluids\n                or Unit(getmembersAll[i].Unit):HasDeBuffs(266231, true) ~= 0 -- Severing axe from axe lady in council\n                or Unit(getmembersAll[i].Unit):HasDeBuffs(272388, true) ~= 0 -- shadow barrage\n                or Unit(getmembersAll[i].Unit):HasDeBuffs(265773, true) > 1 -- spit-gold\n                or (Unit(getmembersAll[i].Unit):HasDeBuffs(270487, true) ~= 0 and Unit(getmembersAll[i].Unit):HasDeBuffsStacks(270487, true) > 1) -- severing-blade\n                and Unit(getmembersAll[i].Unit):HealthPercent() < 95 \n                then\n                    HealingEngine.SetTarget(getmembersAll[i].Unit, 0.5)\n                end\n            end\n        end\n        \n        -- Grievous Wounds\n        -- Only check on minimum Mythic +7\n        if Action.InstanceInfo.KeyStone >= 7 and GrievousWoundsLogic then\n            for i = 1, #getmembersAll do\n                if Unit(getmembersAll[i].Unit):HealthPercent() < 100 and Unit(getmembersAll[i].Unit):GetRange() <= 40 or UnitIsUnit(getmembersAll[i].Unit, \"player\") then\n                    local CurrentBleedstack = Unit(getmembersAll[i].Unit):HasDeBuffsStacks(A.GrievousWound.ID, true)\n                    if CurrentBleedstack >= GrievousWoundsMinStacks then\n                        HealingEngine.SetTarget(getmembersAll[i].Unit) -- default 2sec delay to stay on target\n                    end\n                    \n                end\n            end\n        end            \n        \n    end     \nend\n\n-- Return average DMG taken from all our current member team\nlocal function FriendlyTeamReceivedLast5sec()\n    local total = 0\n    local getmembersAll = HealingEngine.GetMembersAll()\n    \n    if #getmembersAll > 0 then \n        for i = 1, #getmembersAll do\n            -- Avoid getting pet damage\n            if Unit(getmembersAll[i].Unit):IsPlayer() then\n                total = total + Unit(getmembersAll[i].Unit):GetLastTimeDMGX(5)\n            end\n        end\n        \n        avg = total / #getmembersAll\n    end \n    return total\nend\n\nfunction FriendlyTeam:GetLastTimeDMGX(x, range)\n    -- @return number, number, number\n    -- [1] Average received damage latest 'x' seconds \n    -- [2] Summary received damage latest 'x' seconds \n    -- [3] Count of members valid for conditions\n    -- Nill-able: range\n    local ROLE                            = self.ROLE\n    local lastDMG, members                = 0, 0\n    local member\n    \n    if TeamCacheFriendly.Size <= 1 then \n        if Unit(\"player\"):Role(ROLE) then  \n            lastDMG = Unit(\"player\"):GetLastTimeDMGX(x)\n            return lastDMG, 1     \n        end \n        \n        return lastDMG, members\n    end         \n    \n    if ROLE and TeamCacheFriendly[ROLE] then \n        for member in pairs(TeamCacheFriendly[ROLE]) do\n            if Unit(member):InRange() and (not range or Unit(member):GetRange() <= range) then\n                lastDMG = lastDMG + Unit(member):GetLastTimeDMGX(x)   \n                members = members + 1\n            end             \n        end             \n    else\n        for i = 1, TeamCacheFriendly.MaxSize do\n            member = TeamCacheFriendlyIndexToPLAYERs[i]                \n            if member and Unit(member):InRange() and (not range or Unit(member):GetRange() <= range) then\n                lastDMG = lastDMG + Unit(member):GetLastTimeDMGX(x)   \n                members = members + 1\n            end \n        end  \n        \n        if TeamCacheFriendly.Type ~= \"raid\" then\n            lastDMG = lastDMG + Unit(\"player\"):GetLastTimeDMGX(x)  \n            members = members + 1\n        end \n    end      \n    \n    if lastDMG == 0 and members == 0 then \n        return 0, lastDMG, members\n    else \n        return lastDMG / members, lastDMG, members\n    end \nend\n\n\n-- [3] Single Rotation\nA[3] = function(icon, isMulti)\n    --------------------\n    --- ROTATION VAR ---\n    --------------------\n    local CurrentTanks = HealingEngine.GetMembersByMode(\"TANK\")\n    local getmembersAll = HealingEngine.GetMembersAll()\n    local InfLight = Unit(player):HasBuffs(A.InfusionofLight.ID, true)\n    local HLcast_t = Unit(player):CastTime(A.HolyLight.ID)\n    local FLcast_t = Unit(player):CastTime(A.FlashofLight.ID)\n    local inCombat = Unit(player):CombatTime() > 0\n    local isMoving = Player:IsMoving()\n    local isMovingFor = A.Player:IsMovingTime()\n    local combatTime = Unit(player):CombatTime()    \n    local ShouldStop = Action.ShouldStop()\n    local Pull = Action.BossMods:GetPullTimer()\n    local AoEON = GetToggle(2, \"AoE\")\n    local Emergency = NeedEmergencyHPS()\n    local SuperEmergency = NeedUltraEmergencyHPS()   \n    local GlimmerofLightCount = GlimmerofLightCount()\n    local ActiveBeacon = ActiveBeacon()\n    local ActiveBeaconOnTank = ActiveBeaconOnTank()\n    -- Healing Engine vars\n    local ReceivedLast5sec = FriendlyTeam(\"ALL\"):GetLastTimeDMGX(5) --Unit(player):GetLastTimeDMGX(5) -- LastIncDMG(player, 5)\n    local AVG_DMG = HealingEngine.GetIncomingDMGAVG()\n    local AVG_HPS = HealingEngine.GetIncomingHPSAVG()\n    local TeamCacheEnemySize = TeamCache.Enemy.Size\n    local TeamCacheFriendlySize = TeamCache.Friendly.Size\n    local TeamCacheFriendlyType = TeamCache.Friendly.Type or \"none\" \n    RotationsVariables()    \n    --------------------\n    --- DPS ROTATION ---\n    --------------------\n    local function DamageRotation(unit)\n        \n        -- Out of Combat\n        LeftCtrl = IsLeftControlKeyDown();\n        LeftShift = IsLeftShiftKeyDown();\n        LeftAlt = IsLeftAltKeyDown();\n        \n        -- Bursting \n        if A.BurstIsON(unit) and InMelee(unit) then \n            \n            if Unit(unit):HealthPercent() <= A.GetToggle(2, \"RacialBurstDamaging\") then \n                if A.BloodFury:AutoRacial(unit, nil, nil, true) then \n                    return A.BloodFury:Show(icon)\n                end \n                \n                if A.Fireblood:AutoRacial(unit, nil, nil, true) then \n                    return A.Fireblood:Show(icon)\n                end \n                \n                if A.AncestralCall:AutoRacial(unit, nil, nil, true) then \n                    return A.AncestralCall:Show(icon)\n                end \n                \n                if A.Berserking:AutoRacial(unit, nil, nil, true) then \n                    return A.Berserking:Show(icon)\n                end \n            end \n        end\n        \n        -- Trinkets DPS         \n        local TrinketsMode = GetToggle(2, \"TrinketBurstSyncUP\")\n        if unit ~= targettarget and Player:ManaPercentage() <= TrinketMana and (TrinketsMode == \"Always\" or (TrinketsMode == \"BurstSync\" and BurstIsON(unit))) and inCombat and IsUnitEnemy(unit) and Unit(unit):GetRange() <= 40 then \n            if A.Trinket1:IsReady(unit) and A.Trinket1:GetItemCategory() ~= \"DEFF\" and A.Trinket1:AbsentImun(unit, Temp.TotalAndMag) then \n                return A.Trinket1:Show(icon)\n            end \n            \n            if A.Trinket2:IsReady(unit) and A.Trinket2:GetItemCategory() ~= \"DEFF\" and A.Trinket2:AbsentImun(unit, Temp.TotalAndMag) then \n                return A.Trinket2:Show(icon)\n            end     \n        end\n        \n        -- HPvE #1 Judgment\n        if A.Judgement:IsReady(unit) and A.JudgementofLight:IsSpellLearned() and\n        (\n            -- MouseOver\n            (      \n                MouseOver and\n                IsUnitEnemy(mouseover) and        \n                A.Judgement:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                Unit(mouseover):PT(196941, \"debuff\", true) and                       \n                A.Judgement:AbsentImun(mouseover, Temp.TotalAndPhys, true) \n            ) or \n            -- Target\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame()\n                ) and       \n                IsUnitEnemy(target) and        \n                A.Judgement:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and \n                Unit(target):PT(196941, \"debuff\", true) and        \n                A.Judgement:AbsentImun(target, Temp.TotalAndPhys, true) \n            ) or \n            -- TargetTarget\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and\n                not IsUnitEnemy(target) and\n                IsUnitEnemy(targettarget) and\n                A.Judgement:IsInRange(targettarget) and\n                Unit(targettarget):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                Unit(targettarget):PT(196941, \"debuff\", true) and        \n                A.Judgement:AbsentImun(targettarget, Temp.TotalAndPhys, true)          \n            ) \n        )\n        then\n            return A.Judgement:Show(icon)\n        end\n        \n        -- HPvE #1 Crusader Strike\n        if A.CrusaderStrike:IsReady(unit) and A.CrusadersMight:IsSpellLearned() and\n        -- Holy Shock\n        A.HolyShock:GetCooldown() >= 1.5 and -- GetCurrentGCD() and\n        (\n            -- MouseOver\n            (      \n                MouseOver and\n                IsUnitEnemy(mouseover) and        \n                A.CrusaderStrike:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone               \n                A.CrusaderStrike:AbsentImun(mouseover, Temp.TotalAndPhys, true)\n            ) or \n            -- Target\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() \n                ) and        \n                IsUnitEnemy(target) and        \n                A.CrusaderStrike:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and                \n                A.CrusaderStrike:AbsentImun(target, Temp.TotalAndPhys, true)  \n            ) or\n            -- TargetTarget\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and\n                not IsUnitEnemy(target) and\n                IsUnitEnemy(targettarget) and\n                A.CrusaderStrike:IsInRange(targettarget) and\n                Unit(targettarget):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone             \n                A.CrusaderStrike:AbsentImun(targettarget, Temp.TotalAndPhys, true)          \n            ) \n        )\n        then\n            return A.CrusaderStrike:Show(icon)\n        end\n        \n        -- Consecration\n        if A.Consecration:IsReady(player) and IsUnitEnemy(unit) and Unit(unit):GetRange() <= 6 and Unit(player):HasBuffs(A.AvengingCrusader.ID, true) == 0 and Consecration() <= 3 then\n            return A.Consecration:Show(icon)\n        end\n        \n        -- HPvE #2 Judgment\n        if A.Judgement:IsReady(unit) and InMelee(unit) and \n        (\n            -- MouseOver\n            (      \n                MouseOver and\n                IsUnitEnemy(mouseover) and        \n                A.Judgement:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                Unit(mouseover):HasDeBuffs(A.Judgement.ID, player, true) <= GetCurrentGCD() and\n                A.Judgement:AbsentImun(mouseover, Temp.TotalAndPhys, true)  \n            ) or \n            -- Target\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and        \n                IsUnitEnemy(target) and        \n                A.Judgement:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and \n                Unit(target):HasDeBuffs(A.Judgement.ID, player, true) <= GetCurrentGCD() and \n                A.Judgement:AbsentImun(target, Temp.TotalAndPhys, true)   \n            ) or\n            -- TargetTarget\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and\n                not IsUnitEnemy(target) and\n                IsUnitEnemy(targettarget) and\n                A.Judgement:IsInRange(targettarget) and\n                Unit(targettarget):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                Unit(targettarget):HasDeBuffs(A.Judgement.ID, player, true) <= GetCurrentGCD() and\n                A.Judgement:AbsentImun(targettarget, Temp.TotalAndPhys, true)          \n            ) \n        )        \n        then\n            return A.Judgement:Show(icon)\n        end\n        \n        -- HPvE #2 Holy Shock (DMG)\n        if A.HolyShock:IsReady(unit) and HolyShockDPS and\n        (\n            -- MouseOver\n            (      \n                MouseOver and\n                IsUnitEnemy(mouseover) and            \n                A.Judgement:IsInRange(mouseover) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone    \n                (\n                    -- Glimmer of Light \n                    A.GlimmerofLight:GetAzeriteRank() == 0 or\n                    -- Everyone already buffed so then we can free spend on enemy\n                    not FriendlyTeam(nil, 1):MissedBuffs(A.GlimmerofLightBuff.ID, player)\n                ) and   \n                A.HolyShock:AbsentImun(mouseover, Temp.TotalAndMag, true)\n            ) or \n            -- TargetTarget\n            --[[\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and\n                not IsUnitEnemy(target) and\n                IsUnitEnemy(targettarget) and\n                SpellInRange(targettarget, 20271) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                DeBuffs(targettarget, 275773, player)<=GetCurrentGCD() and\n                NOMagicImun(targettarget)         \n            ) or \n            ]]--\n            -- Target\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and        \n                IsUnitEnemy(target) and        \n                A.Judgement:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone         \n                A.HolyShock:AbsentImun(target, Temp.TotalAndMag, true)  \n            )\n        )        \n        then\n            return A.HolyShock:Show(icon)\n        end\n        \n        -- HPvE #2 Crusader Strike\n        if A.CrusaderStrike:IsReady(unit) and \n        (\n            -- MouseOver\n            (      \n                MouseOver and\n                IsUnitEnemy(mouseover) and        \n                A.CrusaderStrike:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone               \n                A.CrusaderStrike:AbsentImun(mouseover, Temp.TotalAndPhys, true)\n            )\n            or \n            -- Target\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and\n                not IsUnitEnemy(targettarget) and\n                IsUnitEnemy(target) and        \n                A.CrusaderStrike:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone                \n                A.CrusaderStrike:AbsentImun(target, Temp.TotalAndPhys, true) \n            ) \n            or\n            -- TargetTarget\n            ( \n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and\n                not IsUnitEnemy(target) and\n                IsUnitEnemy(targettarget) and\n                A.CrusaderStrike:IsInRange(targettarget) and\n                Unit(targettarget):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone             \n                A.CrusaderStrike:AbsentImun(targettarget, Temp.TotalAndPhys, true)         \n            )\n        )\n        then\n            return A.CrusaderStrike:Show(icon)\n        end\n    end\n    DamageRotation = Action.MakeFunctionCachedDynamic(DamageRotation)\n    \n    ---------------------\n    --- HEAL ROTATION ---\n    ---------------------\n    local function HealingRotation(unit) \n        \n        -- Vars\n        local useDispel, useShields, useHoTs, useUtils = HealingEngine.GetOptionsByUnitID(unit)\n        local unitGUID = UnitGUID(unit)\n        \n        -- StopCast if destination is unknown as unitID \n        if not Temp.LastPrimaryUnitID and StopCastOverHeal and CanStopCastingOverHeal(unit, unitGUID) then \n            return A:Show(icon, ACTION_CONST_STOPCAST)\n        end \n        \n        -- Dispel Sniper\n        if A.Cleanse:IsReady() then\n            for i = 1, #getmembersAll do \n                if Unit(getmembersAll[i].Unit):GetRange() <= 40 and AuraIsValid(getmembersAll[i].Unit, \"UseDispel\", \"Dispel\") then  \n                    HealingEngine.SetTarget(getmembersAll[i].Unit)                                      \n                    -- Notification                    \n                    Action.SendNotification(\"Sniping dispel\", A.Cleanse.ID)                     \n                end                \n            end\n        end\n        -- #1 HPvE Dispel\n        if A.Cleanse:IsReady(unit) and\n        useDispel and\n        (\n            -- MouseOver\n            (\n                A.GetToggle(2, \"mouseover\") and\n                Unit(\"mouseover\"):IsExists() and \n                MouseHasFrame() and                      \n                not IsUnitEnemy(\"mouseover\") and         \n                AuraIsValid(mouseover, \"UseDispel\", \"Dispel\")\n            ) or \n            (\n                (\n                    not A.GetToggle(2, \"mouseover\") or \n                    not Unit(\"mouseover\"):IsExists() or \n                    IsUnitEnemy(\"mouseover\")\n                ) and        \n                not IsUnitEnemy(\"target\") and\n                AuraIsValid(target, \"UseDispel\", \"Dispel\")\n            )\n        )\n        then\n            return A.Cleanse:Show(icon)\n        end        \n        \n        -- #2 HPvE Arcane Torrent dispel\n        if A.ArcaneTorrent:IsRacialReady(unit) and combatTime > 0 and\n        useDispel and\n        (\n            -- Mouseover\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                IsUnitEnemy(mouseover) and\n                Unit(mouseover):GetRange() <= 8 and\n                AuraIsValid(mouseover, \"UsePurge\", \"Dispel\") and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 \n            ) or\n            -- Target\n            (\n                IsUnitEnemy(target) and\n                Unit(target):GetRange() <= 8 and\n                AuraIsValid(target, \"UsePurge\", \"Dispel\") and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 -- Cyclone\n            ) or\n            -- Mana \n            (\n                IsSaveManaPhase() and Player:Mana() <= Player:ManaMax() * 0.75 or--and\n                Player:Mana() <= Player:ManaMax() * 0.60\n                -- PowerSave(player) and\n                --MultiUnits:GetByRange(8) >= 1\n            )\n        )        \n        then \n            return A.ArcaneTorrent:Show(icon)\n        end           \n        \n        -- #3 Special Glimmer of Light Buff spreader (Only Friendly and not Pet)\n        if A.GlimmerofLight:GetAzeriteRank() >= 1 and GlimmerofLightCount < 8 and ForceGlimmerOnMaxUnits then\n            if (IsInGroup() or A.IsInPvP or IsInRaid()) then\n                local _, currGUID = HealingEngine.GetTarget()\n                for i = 1, #getmembersAll do \n                    if Unit(getmembersAll[i].Unit):IsPlayer() and not IsUnitEnemy(getmembersAll[i].Unit) and A.HolyShock:IsReadyByPassCastGCD(getmembersAll[i].Unit) and Unit(getmembersAll[i].Unit):GetRange() <= 40 and Unit(getmembersAll[i].Unit):HasBuffs(A.GlimmerofLightBuff.ID, true) == 0 then \n                        if UnitGUID(getmembersAll[i].Unit) ~= currGUID then\n                            HealingEngine.SetTarget(getmembersAll[i].Unit) \n                            break\n                        else \n                            -- Notification                    \n                            Action.SendNotification(\"Spreading \" .. A.GetSpellInfo(A.GlimmerofLightBuff.ID), A.GlimmerofLightBuff.ID)        \n                            return A.HolyShock:Show(icon)                            \n                        end                        \n                    end                \n                end    \n            end\n        end       \n        \n        -- #3.1 Special Holy Shock force as soon as its available MostlyIncDMG\n        if A.HolyShock:GetCooldown() == 0 then\n            for i = 1, #getmembersAll do \n                if Unit(getmembersAll[i].Unit):IsPlayer() and not IsUnitEnemy(getmembersAll[i].Unit) and A.HolyShock:IsReady(getmembersAll[i].Unit) and Unit(getmembersAll[i].Unit):GetRange() <= 40 \n                then \n                    HealingEngine.IsMostlyIncDMG(getmembersAll[i].Unit)                    \n                    -- Notification                    \n                    Action.SendNotification(\"Forcing \" .. A.GetSpellInfo(A.HolyShock.ID), A.HolyShock.ID)        \n                    return A.HolyShock:Show(icon)\n                end                \n            end    \n        end     \n        \n        -- #3.2 Special Holy Shock force as soon as its available HP <= 98\n        if A.HolyShock:GetCooldown() == 0 then\n            for i = 1, #getmembersAll do \n                if Unit(getmembersAll[i].Unit):IsPlayer() and not IsUnitEnemy(getmembersAll[i].Unit) and A.HolyShock:IsReady(getmembersAll[i].Unit) and Unit(getmembersAll[i].Unit):HealthPercent() <= 98 and Unit(getmembersAll[i].Unit):GetRange() <= 40 \n                then \n                    HealingEngine.SetTarget(getmembersAll[i].Unit)                    \n                    -- Notification                    \n                    Action.SendNotification(\"Forcing \" .. A.GetSpellInfo(A.HolyShock.ID), A.HolyShock.ID)        \n                    return A.HolyShock:Show(icon)\n                end                \n            end    \n        end  \n        \n        -- #4 Custom Beacon TANK\n        if A.BeaconofLight:IsReady() and BeaconWorkMode == \"Tanking Units\" and ActiveBeaconOnTank == 0 then\n            for i = 1, #CurrentTanks do \n                if Unit(CurrentTanks[i].Unit):GetRange() <= 40 then \n                    if Unit(CurrentTanks[i].Unit):IsPlayer() and Unit(CurrentTanks[i].Unit):HasBuffs(A.BeaconofLight.ID, true) == 0  then    \n                        -- Notification                    \n                        Action.SendNotification(\"Placing \" .. A.GetSpellInfo(A.BeaconofLight.ID) .. \" on \" .. UnitName(CurrentTanks[i].Unit), A.BeaconofLight.ID)\n                        HealingEngine.SetTarget(CurrentTanks[i].Unit)    -- Add 1sec delay in case of emergency switch                         \n                        return A.BeaconofLight:Show(icon)                        \n                    end                    \n                end                \n            end    \n        end\n        \n        -- #4.1 Custom Beacon MostlyIncDMG\n        if A.BeaconofLight:IsReady(unit) and combatTime > 0 and ActiveBeacon == 0 and not Unit(unit):IsPet() and BeaconWorkMode == \"Mostly Inc. Damage\" and Unit(unit):HasBuffs(A.BeaconofLight.ID, true) == 0 then\n            HealingEngine.SetTargetMostlyIncDMG(1)\n            return A.BeaconofLight:Show(icon)\n        end\n        \n        -- #4.2 Custom Beacon HPS < Inc. Damage\n        if A.BeaconofLight:IsReady(unit) and combatTime > 0 and ActiveBeacon == 0 and BeaconWorkMode == \"HPS < Inc. Damage\" and Unit(unit):HasBuffs(A.BeaconofLight.ID, true) == 0 then\n            if not Unit(unit):IsPet() and Unit(unit):HasBuffs(A.BeaconofLight.ID, true) == 0 and Unit(unit):GetHPS() < Unit(unit):GetDMG() then\n                HealingEngine.SetTarget(unit)\n                return A.BeaconofLight:Show(icon)\n            end\n        end\n        \n        -- #5 Bursting Essences                \n        -- #5.1 Life Binders Invocation\n        if A.LifeBindersInvocation:AutoHeartOfAzeroth(unit, true) and A.BurstIsON(unit) and HealingEngine.GetBelowHealthPercentUnits(LifeBindersInvocationHP, 40) >= LifeBindersInvocationUnits then\n            -- Notification                    \n            Action.SendNotification(\"Burst \" .. A.GetSpellInfo(A.LifeBindersInvocation.ID), A.LifeBindersInvocation.ID)            \n            return A.LifeBindersInvocation:Show(icon)\n        end\n        \n        -- #5.2 Overcharge Mana\n        if A.OverchargeMana:AutoHeartOfAzeroth(unit, true) then\n            return A.OverchargeMana:Show(icon)\n        end\n        \n        -- #5.3 MemoryofLucidDreams if less than 85% mana left\n        if A.MemoryofLucidDreams:AutoHeartOfAzeroth(unit, true) and Player:Mana() < Player:ManaMax() * (LucidDreamManaPercent / 100) then\n            return A.MemoryofLucidDreams:Show(icon)\n        end\n        \n        -- #5.4 Concentrated Flame Heal\n        if A.ConcentratedFlame:AutoHeartOfAzeroth(unit, true) then\n            return A.ConcentratedFlame:Show(icon)\n        end\n        \n        -- #5.5 Vitality Conduit\n        if (isMulti or AoEON) then \n            if A.VitalityConduit:AutoHeartOfAzeroth(unit, true) then \n                return A.VitalityConduit:Show(icon)\n            end\n            -- OverchargeMana    \n            if A.OverchargeMana:AutoHeartOfAzeroth(unit, true) and (not IsEnoughHPS(unit) or HealingEngine.GetIncomingDMGAVG() > HealingEngine.GetIncomingHPSAVG() + 10) then \n                return A.OverchargeMana:Show(icon)\n            end \n        end \n        \n        -- #6 Utilities\n        -- #6.1 HPvE Blessing of Protection\n        if A.BlessingofProtection:IsReady(unit) and combatTime > 0 and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                       \n                not IsUnitEnemy(mouseover) and \n                -- HoS\n                Unit(mouseover):HasBuffs(6940, true) <= GetCurrentGCD() and \n                BoP(mouseover)\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and  \n                -- HoS\n                Unit(target):HasBuffs(6940, true) <= GetCurrentGCD() and \n                BoP(target)         \n            )\n        )\n        then\n            return A.BlessingofProtection:Show(icon)\n        end\n        \n        -- #6.2 Blessing Of Sacrifice\n        if A.BlessingofSacrifice:IsReady(unit) and combatTime > 0 and Unit(player):Health() > Unit(player):HealthMax() * 0.2 and\n        (\n            -- MouseOver\n            (\n                MouseOver and        \n                A.MouseHasFrame() and                      \n                not IsUnitEnemy(mouseover) and                 \n                (UnitInRaid(mouseover) or UnitInParty(mouseover)) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone        \n                (\n                    (    \n                        not Unit(mouseover):IsTank() and\n                        (\n                            HoS(mouseover, nil, true, true) or\n                            (\n                                HealingEngine.IsMostlyIncDMG(mouseover) and\n                                Unit(mouseover):GetDMG()>Unit(mouseover):HealthMax()*0.3                        \n                            )\n                        )\n                    ) or \n                    (\n                        Unit(mouseover):IsTank() and\n                        -- Divine Shield\n                        Unit(player):HasBuffs(642, true) > 5 and\n                        Unit(mouseover):GetRealTimeDMG() >= Unit(mouseover):HealthMax() * 0.2\n                    )\n                )\n            ) or \n            -- Target\n            (  \n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and     \n                (UnitInRaid(target) or UnitInParty(target)) and\n                not IsUnitEnemy(target) and                 \n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone   \n                (\n                    (\n                        (\n                            not Unit(target):IsTank() and\n                            (\n                                HoS(target, nil, true, true) or\n                                (\n                                    HealingEngine.IsMostlyIncDMG(mouseover) and\n                                    Unit(target):GetDMG() > Unit(target):HealthMax()*0.3 \n                                )\n                            )                \n                        )\n                    ) or \n                    (\n                        Unit(target):IsTank() and\n                        -- Divine Shield\n                        Unit(player):HasBuffs(642, true) > 5 and\n                        Unit(target):GetRealTimeDMG() >= Unit(target):HealthMax() * 0.2\n                    )\n                )        \n            )\n        )\n        then\n            return A.BlessingofSacrifice:Show(icon)\n        end\n        \n        -- #6.3 HPvE Rule of Law\n        if A.RuleofLaw:IsReady(player) and combatTime > 0 and A.RuleofLaw:IsSpellLearned() and\n        Unit(player):HasBuffs(A.RuleofLaw.ID, true) == 0 and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(\"mouseover\") and  \n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone \n                (\n                    -- HEALING\n                    (\n                        Unit(mouseover):CanInterract(40) and        \n                        (\n                            (\n                                A.RuleofLaw:GetSpellChargesFrac() >= 2 and\n                                Unit(mouseover):Health() <= Unit(mouseover):HealthMax()*0.6\n                            ) or            \n                            TimeToDie(\"mouseover\") <= 6 or\n                            Unit(mouseover):Health() <= Unit(mouseover):HealthMax()*0.35\n                        ) \n                    ) or\n                    -- OUT OF RANGE\n                    (\n                        not Unit(mouseover):CanInterract(40) and \n                        combatTime > 0                \n                    )\n                )        \n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(\"target\") and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and   \n                (\n                    -- HEALING\n                    (\n                        Unit(target):CanInterract(40) and                \n                        (\n                            (\n                                A.RuleofLaw:GetSpellChargesFrac() >= 2 and\n                                Unit(target):Health() <= Unit(target):HealthMax()*0.6\n                            ) or            \n                            Unit(target):TimeToDie() <= 6 or\n                            Unit(target):Health() <= Unit(target):HealthMax()*0.35\n                        ) \n                    ) or\n                    -- OUT OF RANGE\n                    (\n                        not Unit(target):CanInterract(40) and \n                        combatTime > 0                     \n                    )\n                )            \n            )\n        )\n        then\n            return A.RuleofLaw:Show(icon)\n        end\n        \n        -- Tank Emergency\n        -- #7 HPvE Lay on Hands\n        if A.LayOnHands:IsReady(unit) and Action.Zone ~= \"arena\" and not Action.InstanceInfo.isRated and combatTime > 0 and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                       \n                not IsUnitEnemy(mouseover) and \n                Unit(mouseover):HealthPercent() < LayOnHandsHP and        \n                (\n                    A.LayOnHands:PredictHeal(\"mouseover\") or           \n                    Unit(mouseover):Health() <= Unit(mouseover):HealthMax() * 0.17\n                ) and\n                Unit(mouseover):IsPlayer() and  \n                A.LayOnHands:IsInRange(mouseover) and \n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                -- Forbearance\n                Unit(mouseover):HasDeBuffs(A.Forbearance.ID, true) == 0 \n            ) \n            or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists()\n                ) and        \n                not IsUnitEnemy(target) and\n                Unit(target):HealthPercent() < LayOnHandsHP and \n                (\n                    A.LayOnHands:PredictHeal(\"target\") or            \n                    Unit(target):Health() <= Unit(target):HealthMax() * 0.17\n                ) and\n                Unit(target):IsPlayer() and  \n                A.LayOnHands:IsInRange(target) and\n                Unit(target):HasBuffs(A.Cyclone.ID, true) == 0 and\n                -- Forbearance\n                Unit(target):HasDeBuffs(A.Forbearance.ID, true) == 0 \n            )\n        )\n        then\n            -- Notification                    \n            Action.SendNotification(\"Emergency \" .. A.GetSpellInfo(A.LayOnHands.ID), A.LayOnHands.ID)\n            return A.LayOnHands:Show(icon)\n        end\n        \n        -- #7.1 Emergency Lay on Hands \n        if combatTime > 0 and Action.Zone ~= \"arena\" and not Action.InstanceInfo.isRated   -- Forbearance\n        then\n            for i = 1, #getmembersAll do \n                if Unit(getmembersAll[i].Unit):GetRange() <= 40 then \n                    if not Unit(getmembersAll[i].Unit):IsPet() and A.LayOnHands:IsReady(getmembersAll[i].Unit) and (Unit(getmembersAll[i].Unit):HealthPercent() <= LayOnHandsHP or Unit(getmembersAll[i].Unit):TimeToDie() <= LayOnHandsTTD) and Unit(getmembersAll[i].Unit):HasDeBuffs(A.Forbearance.ID, true) == 0 then\n                        HealingEngine.SetTarget(getmembersAll[i].Unit, 1)    -- Add 1sec delay in case of emergency switch     \n                        -- Notification                    \n                        Action.SendNotification(\"Emergency \" .. A.GetSpellInfo(A.LayOnHands.ID) .. \" on \" .. UnitName(getmembersAll[i].Unit), A.LayOnHands.ID)        \n                        return A.LayOnHands:Show(icon)                        \n                    end                    \n                end                \n            end    \n            \n        end \n        \n        -- #8 Trinkets Heal         \n        if A.AbsentImun(nil, unit) and Unit(unit):HealthPercent() <= GetToggle(2, \"TrinketBurstHealing\") and not IsUnitEnemy(unit) and Unit(unit):InRange() and inCombat then \n            if A.Trinket1:IsReady(unit) and A.Trinket1:GetItemCategory() ~= \"DPS\" then \n                return A.Trinket1:Show(icon)\n            end \n            \n            if A.Trinket2:IsReady(unit) and A.Trinket2:GetItemCategory() ~= \"DPS\" then \n                return A.Trinket2:Show(icon)\n            end     \n        end \n        \n        -- #9 Burst Cooldowns\n        -- #9.1 HolyAvenger\n        if A.HolyAvenger:IsReady(player) and A.BurstIsON(unit) and A.HolyAvenger:IsSpellLearned() and\n        -- AW Original\n        Unit(player):HasBuffs(A.AvengingWrath.ID, true) == 0 and\n        (       \n            -- HealingEngine conditions for burst raid/party heal\n            (\n                AoEON and\n                (\n                    (\n                        not MouseOver or\n                        not A.MouseHasFrame() or\n                        not IsUnitEnemy(mouseover)\n                    ) and\n                    not IsUnitEnemy(target) \n                ) and\n                (            \n                    (\n                        TeamCacheFriendlySize > 1 and \n                        (\n                            AVG_DMG and\n                            ReceivedLast5sec and \n                            AVG_HPS and\n                            (\n                                ReceivedLast5sec > AVG_DMG + AVG_HPS or\n                                AVG_DMG >= AVG_HPS * 3\n                            ) \n                        ) and\n                        (\n                            HealingEngine.GetTimeToDieUnits(15) >= GetValidMembers(true) * 0.5 or\n                            HealingEngine.GetBelowHealthPercentUnits(60) >= GetValidMembers(true) * 0.5\n                        )\n                    ) or        \n                    (\n                        TeamCacheFriendlyType == \"party\" and\n                        HealingEngine.GetBelowHealthPercentUnits(HolyAvengerPartyHP) >= HolyAvengerPartyUnits  \n                    ) or \n                    (\n                        TeamCacheFriendlyType == \"raid\" and\n                        HealingEngine.GetBelowHealthPercentUnits(HolyAvengerRaidHP) >= HolyAvengerRaidUnits               \n                    )\n                )\n            ) or\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and               \n                not IsUnitEnemy(mouseover) and                 \n                Unit(mouseover):IsPlayer() and\n                Unit(mouseover):GetRange() <= 40 and\n                --Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) <= GetCurrentGCD() + GetGCD() and\n                Unit(mouseover):Health() <= Unit(mouseover):HealthMax() * 0.7 and\n                Unit(mouseover):GetRealTimeDMG() > 0 and\n                (                          \n                    Unit(mouseover):GetDMG() > Unit(mouseover):HealthMax()*0.2 or\n                    Unit(mouseover):GetDMG() > Unit(mouseover):GetHEAL() * 1.2 or\n                    Unit(mouseover):Health() <= Unit(mouseover):HealthMax()*0.25\n                ) and\n                Unit(mouseover):TimeToDie() > 3\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and       \n                not IsUnitEnemy(target) and\n                Unit(target):IsPlayer() and\n                Unit(target):GetRange() <= 40 and \n                --Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) <= GetCurrentGCD() + GetGCD() and\n                Unit(target):Health() <= Unit(target):HealthMax() * 0.7 and\n                Unit(target):GetRealTimeDMG() > 0 and\n                (                        \n                    Unit(target):GetDMG() > Unit(target):HealthMax() * 0.2 or\n                    Unit(target):GetDMG() > Unit(target):GetHEAL() * 1.2 or            \n                    Unit(target):Health() <= Unit(target):HealthMax() * 0.25\n                ) and        \n                Unit(target):TimeToDie() > 3\n            ) \n        )        \n        then\n            -- Notification                    \n            Action.SendNotification(\"Burst \" .. A.GetSpellInfo(A.HolyAvenger.ID), A.HolyAvenger.ID)\n            return A.HolyAvenger:Show(icon)\n        end\n        \n        -- #9.2 Avenging Wrath\n        if A.AvengingWrath:IsReady(player) and A.BurstIsON(unit) and Unit(player):HasBuffs({A.AvengingCrusader.ID, A.AvengingWrath.ID}, true) == 0 and\n        (\n            -- HEALING\n            (\n                not A.AvengingCrusader:IsSpellLearned() and\n                A.AvengingWrath:GetCooldown() == 0 and\n                -- Holy Avenger, AW Original\n                Unit(player):HasBuffs({A.HolyAvenger.ID, A.AvengingWrath.ID}, true) <= GetCurrentGCD() and\n                (       \n                    -- HealingEngine conditions for burst raid/party heal\n                    (\n                        AoEON and\n                        (\n                            (\n                                not MouseOver or\n                                not A.MouseHasFrame() or\n                                not IsUnitEnemy(mouseover)\n                            ) and\n                            not IsUnitEnemy(target) \n                        ) and\n                        (\n                            (\n                                TeamCacheFriendlySize > 1 and\n                                ReceivedLast5sec > AVG_DMG + AVG_HPS \n                                and \n                                HealingEngine.GetTimeToDieUnits(16) >= TeamCacheFriendlySize * 0.67\n                            ) \n                            or\n                            (\n                                TeamCacheFriendlyType == \"party\" and\n                                HealingEngine.GetBelowHealthPercentUnits(AvengingWrathPartyHP) >= AvengingWrathPartyUnits\n                            ) \n                            or \n                            (\n                                TeamCacheFriendlyType == \"raid\" and\n                                HealingEngine.GetBelowHealthPercentUnits(AvengingWrathRaidHP) >= AvengingWrathRaidUnits\n                            )  \n                        )                \n                    ) \n                    or\n                    -- MouseOver\n                    (\n                        MouseOver and\n                        Unit(mouseover):IsExists() and \n                        A.MouseHasFrame() and               \n                        not IsUnitEnemy(mouseover) and                 \n                        Unit(mouseover):IsPlayer() and\n                        Unit(mouseover):GetRange() <= 40 and\n                        --Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) and\n                        Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) <= GetCurrentGCD() + GetGCD() and\n                        Unit(mouseover):Health() <= Unit(mouseover):HealthMax() * 0.4\n                        and\n                        Unit(mouseover):GetRealTimeDMG() > 0 and\n                        (\n                            Unit(mouseover):GetDMG() > Unit(mouseover):GetHEAL() * 1.2 or\n                            Unit(mouseover):Health() <= Unit(mouseover):HealthMax() * 0.35 \n                        ) and\n                        Unit(mouseover):TimeToDie() > 4\n                    ) or \n                    -- Target\n                    (\n                        (\n                            not MouseOver or \n                            not Unit(mouseover):IsExists() \n                        ) and       \n                        not IsUnitEnemy(target) and\n                        Unit(target):IsPlayer() and\n                        Unit(target):GetRange() <= 40 and \n                        -- Unit(unit):HasDeBuffs(A.Cyclone.ID, true) and\n                        Unit(target):HasDeBuffs(A.Cyclone.ID, true) <= GetCurrentGCD() + GetGCD() and\n                        Unit(target):Health() <= Unit(target):HealthMax() * 0.4 and\n                        Unit(target):GetRealTimeDMG() >= 0 and\n                        (\n                            Unit(target):GetDMG() > Unit(target):GetHEAL() * 1.2 or\n                            Unit(target):Health() <= Unit(target):HealthMax() * 0.35\n                        ) and\n                        Unit(target):TimeToDie() > 4\n                    )\n                )\n            ) \n            or\n            -- DAMAGE\n            (\n                (\n                    (\n                        A.AvengingCrusader:IsSpellLearned() and\n                        A.AvengingCrusader:GetCooldown() == 0\n                    ) \n                    or\n                    (\n                        not A.AvengingCrusader:IsSpellLearned() and\n                        A.AvengingWrath:GetCooldown() == 0\n                    )\n                ) and\n                combatTime > 0 and\n                (\n                    (\n                        MouseOver and\n                        IsUnitEnemy(mouseover) and                \n                        Unit(mouseover):GetLevel() == -1 and\n                        Unit(mouseover):GetRange() <= 40\n                    ) \n                    or\n                    (\n                        IsUnitEnemy(target) and\n                        Unit(target):GetLevel() == -1 and\n                        Unit(target):GetRange() <= 40\n                    )\n                )\n            )\n        ) \n        then\n            -- Notification                    \n            Action.SendNotification(\"Burst \" .. A.GetSpellInfo(A.AvengingWrath.ID), A.AvengingWrath.ID)            \n            return A.AvengingWrath:Show(icon)\n        end        \n        \n        -- #9.3 Aura Mastery            \n        if A.AuraMastery:IsReady(player) and A.BurstIsON(unit) and combatTime > AuraMasteryAfter and -- AuraMasteryAfter\n        (\n            HealingEngine.GetTimeToDieUnits(AuraMasteryAoETTD) >= GetValidMembers(true) * 0.4 -- AuraMasteryAoETTD\n            or\n            ReceivedLast5sec > AVG_DMG * AuraMasteryLast -- AuraMasteryLast\n            or\n            HealingEngine.GetBelowHealthPercentUnits(AuraMasteryBelowHealthPercent) >= GetValidMembers(true) * 0.35 -- -- AuraMasteryBelowHealthPercent\n            or\n            HealingEngine.GetBelowHealthPercentUnits(AuraMasteryBelowHealthPercent) >= AuraMasteryUnits -- -- AuraMasteryBelowHealthPercent\n        )             \n        then\n            -- Notification                    \n            Action.SendNotification(\"Burst \" .. A.GetSpellInfo(A.AuraMastery.ID), A.AuraMastery.ID)                \n            return A.AuraMastery:Show(icon)\n        end\n        \n        -- #10 Special Mythic + logic - Critical Healing required\n        -- Return specific units to target depending on current dungeon logic triggers\n        -- Also contain specific Affixes logic\n        if UrgentMythicPlusTargetting() and A.IsInInstance and not A.IsInPvP then\n            return true\n        end\n        \n        -- #10.1 Special Raid logic\n        -- Wrathion and Shadhar\n        if IsInRaid() then\n            for i = 1, #getmembersAll do\n                local localClass, englishClass, classIndex = UnitClass(getmembersAll[i].Unit)\n                local thisUnit = getmembersAll[i].Unit\n                if UnitInRange(thisUnit) and A.BlessingofFreedom:IsReady() then\n                    if BlessingofFreedomShadhar and Unit(thisUnit):HasDeBuffs(A.Fixate.ID, true) ~= nil and (classIndex == 1 or classIndex == 2 or classIndex == 4 or classIndex == 5 or classIndex == 9) then                            \n                        HealingEngine.SetTarget(thisUnit, 0.5)\n                        return A.BlessingofFreedom:Show(icon)                            \n                    end\n                    if BlessingofFreedomWrathion and Unit(thisUnit):HasDeBuffsStacks(A.Slow.ID, true) >= WrathionMovementStacks then                            \n                        HealingEngine.SetTarget(thisUnit, 0.5)\n                        return A.BlessingofFreedom:Show(icon)\n                    end\n                end\n            end\n        end\n        \n        -- #11 HPvE #1 Holy Shock (HPS)\n        if A.HolyShock:IsReadyByPassCastGCD(unit) and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.HolyShock:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                A.HolyShock:PredictHeal(\"mouseover\") and\n                (\n                    (\n                        Action.InstanceInfo.KeyStone > 0 and\n                        Action.InstanceInfo.GroupSize <= 5\n                    ) \n                    or \n                    Unit(mouseover):TimeToDie() <= GetGCD() * 2.5 or\n                    (\n                        (\n                            -- AW\n                            Unit(player):HasBuffs(31884, true) < GetCurrentGCD() + GetGCD() or\n                            -- Glimmer of Light\n                            Unit(mouseover):HasBuffs(287280, player, true) <= 8.5 or\n                            -- Divine Purpose\n                            (\n                                Unit(player):HasBuffs(216411, true) > 0 and\n                                Unit(player):HasBuffs(216411, true) < GetCurrentGCD() + GetGCD()\n                            )\n                        ) and \n                        (                                   \n                            -- Infusion of Light                            \n                            Unit(player):HasBuffs(54149, true) <= Unit(player):CastTime(19750) + GetCurrentGCD() + 0.3 or                    \n                            Unit(player):GetCurrentSpeed() ~= 0 \n                        )\n                    )\n                )        \n            ) \n            or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.HolyShock:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                A.HolyShock:PredictHeal(\"target\") and\n                (\n                    (\n                        Action.InstanceInfo.KeyStone > 0 and\n                        Action.InstanceInfo.GroupSize <= 5\n                    ) \n                    or \n                    Unit(target):TimeToDie() <= GetGCD() * 2.5 \n                    or\n                    (\n                        (\n                            -- AW\n                            Unit(player):HasBuffs(31884, true) < GetCurrentGCD() + GetGCD() \n                            or\n                            -- Glimmer of Light\n                            Unit(target):HasBuffs(287280, player, true) <= 8.5 \n                            or   \n                            -- Divine Purpose\n                            (\n                                Unit(player):HasBuffs(216411, player, true) > 0 and\n                                Unit(player):HasBuffs(216411, player, true) < GetCurrentGCD() + GetGCD()\n                            )\n                        ) and \n                        (                                   \n                            -- Infusion of Light                            \n                            Unit(player):HasBuffs(54149, true) <= Unit(player):CastTime(19750) + GetCurrentGCD() + 0.3 or                    \n                            Unit(player):GetCurrentSpeed() ~= 0 \n                        )\n                    )\n                )        \n            ) \n            or\n            -- Precombat Glimmer on tanks\n            GlimmerTankOOC and\n            (\n                combatTime == 0 and \n                GlimmerofLightCount < 8 and \n                Unit(unit):HasBuffs(A.GlimmerofLightBuff.ID, true) == 0 and\n                Unit(unit):IsTank()\n            ) \n            or\n            -- IneffableTruth Buff \n            Unit(player):HasBuffs(A.IneffableTruthBuff.ID, player, true) > 0 \n        )        \n        then\n            return A.HolyShock:Show(icon)\n        end\n        \n        -- #12.1 HPvE Light of Dawn\n        if A.LightofDawn:IsReady(player) and\n        (\n            (\n                TeamCache.Friendly.Size > 5 and \n                HealingEngine.GetBelowHealthPercentUnits(LightofDawnHP) >= LightofDawnUnits\n            ) or\n            (\n                TeamCache.Friendly.Size <= 5 and \n                HealingEngine.GetBelowHealthPercentUnits(LightofDawnHP) >= LightofDawnUnits\n            ) \n        )\n        then  \n            return A.LightofDawn:Show(icon)\n        end  \n        \n        --    #12.2 HPvE Word of Glory\n        if A.WordofGlory:IsReady(unit) and\n        (    \n            Unit(target):HealthPercent() < WordofGloryHP\n        )\n        then\n            return A.WordofGlory:Show(icon)\n        end  \n        \n        -- #13 Bestow Faith\n        if A.BestowFaith:IsSpellLearned() and A.BestowFaith:IsReady(unit) and A.BestowFaith:IsSpellLearned() and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                  \n                A.BestowFaith:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                A.BestowFaith:PredictHeal(\"mouseover\") \n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.BestowFaith:IsInRange(target) and\n                Unit(target):HasBuffs(A.Cyclone.ID, true) == 0 and\n                A.BestowFaith:PredictHeal(\"target\") \n            )\n        )\n        then\n            return A.BestowFaith:Show(icon)\n        end\n        \n        -- #14 HPvE #1 FlashofLight\n        if A.FlashofLight:IsReady(unit) and InfLight > 0 and InfLight > HLcast_t + GetCurrentGCD() + 0.1 and Unit(player):GetCurrentSpeed() == 0 and Unit(unit):HealthPercent() <= FlashofLightHP and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.FlashofLight:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) < HLcast_t + GetCurrentGCD() and\n                A.FlashofLight:PredictHeal(\"mouseover\") --and\n                --                Unit(mouseover):TimeToDie() > HLcast_t + GetCurrentGCD() + 1 or\n                --                Unit(mouseover):HealthPercent() < HolyLightHP or\n                --                Unit(mouseover):TimeToDieX(15) < HolyLightTTD            \n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() or \n                    IsUnitEnemy(mouseover)\n                ) and        \n                not IsUnitEnemy(target) and\n                A.FlashofLight:IsInRange(target) and\n                Unit(target):HasBuffs(A.Cyclone.ID, true) < HLcast_t + GetCurrentGCD() and\n                A.FlashofLight:PredictHeal(\"target\") --and\n                --                Unit(target):TimeToDie() > HLcast_t + GetCurrentGCD() + 1 or\n                --                Unit(target):HealthPercent() < HolyLightHP or\n                --                Unit(target):TimeToDieX(15) < HolyLightTTD            \n            )\n            --[[            or\n            -- Save us\n            (\n                Unit(player):HealthPercent() < HolyLightHP or\n                Unit(player):TimeToDieX(15) < HolyLightTTD    \n            ) ]]   \n        )\n        then\n            return A.FlashofLight:Show(icon)\n        end\n        \n        -- #15 HPvE #1 Light of Martyr\n        if A.LightofMartyr:IsReady(unit) and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and  \n                not UnitIsUnit(mouseover, player) and        \n                A.LightofMartyr:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and\n                (\n                    -- Divine Shield\n                    Unit(player):HasBuffs(642, true) > 0 or\n                    Unit(player):Health() >= select(2, A.LightofMartyr:PredictHeal(\"mouseover\")) * 3\n                ) and        \n                (\n                    Unit(mouseover):Health() <= Unit(mouseover):HealthMax()*0.18 or\n                    (\n                        Unit(mouseover):Health() <= Unit(mouseover):HealthMax()*0.25 and\n                        Unit(mouseover):TimeToDie() <= 2\n                    )            \n                ) \n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                not UnitIsUnit(target, player) and\n                A.LightofMartyr:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and\n                (\n                    -- Divine Shield\n                    Unit(player):HasBuffs(642, true) > 0 or            \n                    Unit(player):Health() >= select(2, A.LightofMartyr:PredictHeal(\"target\")) * 3\n                ) and\n                (\n                    Unit(target):Health() <= Unit(target):HealthMax()*0.18 or\n                    (\n                        Unit(target):Health() <= Unit(target):HealthMax()*0.25 and\n                        Unit(target):TimeToDie() <= 2\n                    )  \n                ) \n            )\n        )        \n        then\n            return A.LightofMartyr:Show(icon)\n        end\n        \n        -- #16 HPvE #1 HolyLight\n        if A.HolyLight:IsReady(unit) and InfLight > 0 and InfLight > HLcast_t + GetCurrentGCD() + 0.1 and Unit(player):GetCurrentSpeed() == 0 and Unit(unit):HealthPercent() <= HolyLightHP and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.HolyLight:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) < HLcast_t + GetCurrentGCD() and\n                A.HolyLight:PredictHeal(\"mouseover\") --and\n                --                Unit(mouseover):TimeToDie() > HLcast_t + GetCurrentGCD() + 1 or\n                --                Unit(mouseover):HealthPercent() < HolyLightHP or\n                --                Unit(mouseover):TimeToDieX(15) < HolyLightTTD            \n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() or \n                    IsUnitEnemy(mouseover)\n                ) and        \n                not IsUnitEnemy(target) and\n                A.HolyLight:IsInRange(target) and\n                Unit(target):HasBuffs(A.Cyclone.ID, true) < HLcast_t + GetCurrentGCD() and\n                A.HolyLight:PredictHeal(\"target\") --and\n                --                Unit(target):TimeToDie() > HLcast_t + GetCurrentGCD() + 1 or\n                --                Unit(target):HealthPercent() < HolyLightHP or\n                --                Unit(target):TimeToDieX(15) < HolyLightTTD            \n            )\n            --[[            or\n            -- Save us\n            (\n                Unit(player):HealthPercent() < HolyLightHP or\n                Unit(player):TimeToDieX(15) < HolyLightTTD    \n            ) ]]   \n        )\n        then\n            return A.HolyLight:Show(icon)\n        end\n        \n        -- #17 HPvE Beacon of Virtue\n        if A.BeaconofVirtue:IsReady(unit) and AoEON and A.BeaconofVirtue:IsSpellLearned() and TeamCacheFriendlyType ~= \"none\" and\n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.BeaconofVirtue:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 \n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.BeaconofVirtue:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0\n            )\n        ) and\n        (\n            (\n                TeamCacheFriendlyType == \"party\" and\n                HealingEngine.GetBelowHealthPercentUnits(80) >= 3 \n            ) or\n            (\n                TeamCacheFriendlyType == \"raid\" and\n                HealingEngine.GetBelowHealthPercentUnits(75) >= 4\n            )\n        )\n        then\n            return A.BeaconofVirtue:Show(icon)\n        end\n        \n        -- #18 Blessing of Freedom\n        if A.BlessingofFreedom:IsReady(unit) and \n        (\n            -- MouseOver\n            (\n                MouseOver and        \n                A.MouseHasFrame() and                      \n                not IsUnitEnemy(mouseover) and                          \n                Unit(mouseover):TimeToDie() > GetGCD() * 3.8 and\n                HoF(mouseover)\n            ) \n            or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and       \n                not IsUnitEnemy(target) and        \n                Unit(unit):TimeToDie() > GetGCD() * 3.8 and\n                HoF(target)\n            )\n        )\n        then\n            return A.BlessingofFreedom:Show(icon)\n        end\n        \n        -- #19 LightsHammer\n        if (isMulti or AoEON) and A.LightsHammer:IsReady(unit) and A.LightsHammer:IsSpellLearned() and\n        (\n            (\n                not MouseOver or\n                not A.MouseHasFrame() or\n                not IsUnitEnemy(mouseover)\n            ) and\n            not IsUnitEnemy(target) \n        ) and\n        (            \n            (\n                TeamCacheFriendlySize > 1 and\n                (\n                    ReceivedLast5sec > AVG_DMG + AVG_HPS or\n                    AVG_DMG >= AVG_HPS * 2\n                ) and\n                (\n                    HealingEngine.GetTimeToDieUnits(15) >= ValidMembers(true) * 0.5 or\n                    HealingEngine.GetBelowHealthPercentUnits(50) >= ValidMembers(true) * 0.5\n                )\n            ) or        \n            (\n                TeamCacheFriendlyType == \"party\" and\n                HealingEngine.GetBelowHealthPercentUnits(50) >= 3\n            ) or \n            (\n                TeamCacheFriendlyType == \"raid\" and\n                HealingEngine.GetBelowHealthPercentUnits(65) >= 6              \n            ) or\n            -- Master Aur\n            A.LastPlayerCastName == A.AuraMastery:Info()\n        )        \n        then\n            return A.LightsHammer:Show(icon)\n        end\n        \n        --[[        -- #20 HPvE #2 FlashofLight\n        if A.FlashofLight:IsReady(unit) and Unit(player):GetCurrentSpeed() == 0 and \n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.FlashofLight:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) < FLcast_t + GetCurrentGCD() and\n                A.FlashofLight:PredictHeal(\"mouseover\") and\n --               (\n                    -- Tank\n                    (                \n                        Unit(mouseover):HealthPercent() < 95 and\n                        Unit(mouseover):IsTank() and\n                        CombatTime == 0\n                    ) \n--                    or\n--                    Unit(mouseover):Health() <= Unit(mouseover):HealthMax() * 0.75 or\n--                    Player:Mana() >= Player:ManaMax() * 0.80            \n--                ) \n                and\n                (\n                    TeamCacheFriendlySize <= 5 or\n                    Unit(mouseover):IsTank() or\n                    Unit(mouseover):HealthPercent() <= 40\n                )\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.FlashofLight:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) < FLcast_t + GetCurrentGCD() and\n                A.FlashofLight:PredictHeal(\"target\") and\n                (\n                    -- Tank\n                    (                \n                        Unit(target):HealthPercent() < 95 and\n                        Unit(target):IsTank() and\n                        CombatTime == 0\n                    ) \n                    or  \n--                    Unit(target):Health() <= Unit(target):HealthMax() * 0.75 or\n--                    Player:Mana() >= Player:ManaMax() * 0.80\n                    (\n                        Unit(target):HealthPercent() < FlashofLightHP\n                    )\n--                ) and\n--                (\n--                    TeamCacheFriendlySize <= 5 or\n--                    Unit(target):IsTank() or\n--                    Unit(target):HealthPercent() <= 40            \n                )\n            )\n        )\n        then\n            return A.FlashofLight:Show(icon)\n        end]]\n        \n        --[[ #21 HPvE #2 HolyLight\n        if A.HolyLight:IsReady(unit) and Unit(player):GetCurrentSpeed() == 0 and \n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.HolyLight:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) < HLcast_t + GetCurrentGCD() and\n                (\n                    Unit(mouseover):HealthPercent() < 94 \n                )        \n                --PredictHeal(\"HolyLight\", mouseover) \n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.HolyLight:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) < HLcast_t + GetCurrentGCD() and\n                (\n                    Unit(target):HealthPercent() < 94\n                )        \n                --PredictHeal(\"HolyLight\", target) \n            )\n        )\n        then\n            return A.HolyLight:Show(icon)\n        end]]\n        \n        -- #22 Holy Prism\n        if (isMulti or AoEON) and A.HolyPrism:IsSpellLearned() and A.HolyPrism:IsReady(unit) and\n        (\n            -- HPS\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                 \n                A.HolyPrism:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                A.HolyPrism:PredictHeal(\"mouseover\")\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                A.HolyPrism:IsInRange(target) and\n                Unit(unit):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                A.HolyPrism:PredictHeal(\"target\")\n            ) or\n            -- DMG\n            -- MouseOver\n            (\n                MouseOver and\n                IsUnitEnemy(mouseover) and\n                A.HolyPrism:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and -- Cyclone\n                (\n                    not AoEON or\n                    HealingEngine.HealingBySpell(\"HolyPrismAoE\", 114165) >= 2\n                ) and\n                A.HolyPrism:AbsentImun(mouseover, Temp.TotalAndMag, true)        \n            ) or\n            -- Target\n            (\n                (\n                    not MouseOver or\n                    not A.MouseHasFrame() or\n                    not IsUnitEnemy(mouseover)\n                ) and\n                IsUnitEnemy(target) and\n                A.HolyPrism:AbsentImun(target, Temp.TotalAndMag, true)  \n            )    \n        )\n        then        \n            return A.HolyPrism:Show(icon)\n        end\n        \n        -- Consecration\n        \n        -- #23 HPvE #2 Light of Martyr\n        if A.LightofMartyr:IsReady(unit) and \n        (\n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and  \n                not UnitIsUnit(mouseover, player) and        \n                A.LightofMartyr:IsInRange(mouseover) and\n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and\n                (\n                    -- Divine Shield\n                    Unit(player):HasBuffs(642, true) > 0 or\n                    Unit(player):Health() >= select(2, A.LightofMartyr:PredictHeal(\"mouseover\")) * 4.5\n                ) and        \n                A.LightofMartyr:PredictHeal(\"mouseover\")\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and\n                not UnitIsUnit(target, player) and\n                A.LightofMartyr:IsInRange(target) and\n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and\n                (\n                    -- Divine Shield\n                    Unit(player):HasBuffs(642, true) > 0 or            \n                    Unit(player):Health() >= select(2, A.LightofMartyr:PredictHeal(\"target\")) * 4.5\n                ) and\n                A.LightofMartyr:PredictHeal(\"target\")\n            )\n        )\n        then        \n            return A.LightofMartyr:Show(icon)\n        end\n        \n        -- #24 HPvE #2 Light of Dawn\n        if A.LightofDawn:IsReady(unit) and \n        (            \n            -- MouseOver\n            (\n                MouseOver and\n                Unit(mouseover):IsExists() and \n                A.MouseHasFrame() and                        \n                not IsUnitEnemy(mouseover) and                         \n                Unit(mouseover):HasDeBuffs(A.Cyclone.ID, true) == 0 and\n                A.LightofDawn:PredictHeal(\"mouseover\") and\n                -- Azerite Breaking Dawn\n                Unit(mouseover):CanInterract((A.BreakingDawn:GetAzeriteRank() > 0 and 40) or 15)\n            ) or \n            -- Target\n            (\n                (\n                    not MouseOver or \n                    not Unit(mouseover):IsExists() \n                ) and        \n                not IsUnitEnemy(target) and        \n                Unit(target):HasDeBuffs(A.Cyclone.ID, true) == 0 and\n                A.LightofDawn:PredictHeal(\"target\") and\n                -- Azerite Breaking Dawn\n                Unit(target):CanInterract((A.BreakingDawn:GetAzeriteRank() > 0 and 40) or 15)\n            )\n        )\n        then        \n            return A.LightofDawn:Show(icon)\n        end\n        \n        -- #25 Nothing to do so DPS ? Seems good idea yeah\n        -- DPS targettarget ofc     \n        if IsUnitEnemy(targettarget) then         \n            if DamageRotation(targettarget) then \n                return true \n            end \n        end \n        \n    end    \n    HealingRotation = Action.MakeFunctionCachedDynamic(HealingRotation)\n    \n    -- Heal Target \n    if IsUnitFriendly(target) then \n        unit = target \n        \n        if HealingRotation(unit) then \n            return true \n        end \n    end  \n    \n    -- Heal Mouseover\n    if IsUnitFriendly(mouseover) then \n        unit = mouseover  \n        \n        if HealingRotation(unit) then \n            return true \n        end             \n    end \n    \n    -- DPS TargetTarget \n    if IsUnitEnemy(targettarget) then \n        unit = targettarget    \n        \n        if DamageRotation(unit) then \n            return true \n        end \n    end     \n    \n    -- DPS Mouseover \n    if IsUnitEnemy(mouseover) then \n        unit = mouseover    \n        \n        if DamageRotation(unit) then \n            return true \n        end \n    end \n    \n    -- DPS Target     \n    if IsUnitEnemy(target) then \n        unit = target\n        \n        if DamageRotation(unit) then \n            return true \n        end \n    end         \nend \n\nlocal function RotationPassive(icon)\n    if not GetToggle(2, \"UseRotationPassive\") then \n        return \n    end \n    \n    -- UI Settings var\n    local DivineProtectionTTD = GetToggle(2, \"DivineProtectionTTD\")\n    local DivineProtectionHP = GetToggle(2, \"DivineProtectionHP\")\n    local DivineShieldHP = GetToggle(2, \"DivineShieldHP\")\n    local DivineShieldTTD = GetToggle(2, \"DivineShieldTTD\")\n    local LayOnHandsHP = GetToggle(2, \"LayOnHandsHP\")\n    local LayOnHandsTTD = GetToggle(2, \"LayOnHandsTTD\")\n    RotationsVariables()\n    \n    -- RESS ALL PEOPLE\n    if A.Absolution:IsReady(player) and combatTime == 0 and Unit(player):GetCurrentSpeed() == 0 and\n    (\n        -- MouseOver\n        (\n            MouseOver and\n            A.MouseHasFrame() and\n            Unit(mouseover):IsExists() and        \n            Unit(mouseover):IsDead() and\n            Unit(mouseover):IsPlayer() and        \n            (UnitInRaid(mouseover) or UnitInParty(mouseover)) and        \n            Unit(mouseover):GetRange() <= 100\n        ) or \n        (\n            (\n                not MouseOver or \n                not Unit(mouseover):IsExists() or \n                IsUnitEnemy(mouseover)\n            ) and\n            Unit(target):IsDead() and\n            Unit(target):IsPlayer() and\n            (UnitInRaid(target) or UnitInParty(target)) and\n            Unit(target):GetRange() <= 100\n        )\n    )\n    then\n        -- Notification                    \n        Action.SendNotification(\"Mass Resurrection \" .. A.GetSpellInfo(A.Absolution.ID), A.Absolution.ID)\n        return A.Absolution:Show(icon)\n    end    \n    \n    -- RESS Single\n    if A.Redemption:IsReady(unit) and combatTime == 0 and Unit(player):GetCurrentSpeed() == 0 and\n    (\n        -- MouseOver\n        (\n            MouseOver and\n            A.MouseHasFrame() and\n            Unit(mouseover):IsExists() and        \n            Unit(mouseover):IsDead() and\n            Unit(mouseover):IsPlayer() and        \n            not IsUnitEnemy(mouseover) and         \n            A.Redemption:IsInRange(mouseover)    \n        ) or \n        (\n            (\n                not MouseOver or \n                not Unit(mouseover):IsExists() or \n                IsUnitEnemy(mouseover)\n            ) and\n            Unit(target):IsDead() and\n            Unit(target):IsPlayer() and\n            not IsUnitEnemy(target) and\n            A.Redemption:IsInRange(target)\n        )\n    )\n    then\n        -- Notification                    \n        Action.SendNotification(\"Resurrection \" .. A.GetSpellInfo(A.Redemption.ID), A.Redemption.ID)\n        return A.Redemption:Show(icon)\n    end    \n    \n    \n    -- Passive Lay on Hands Player\n    if A.LayOnHands:IsReady(player) and combatTime > 0 and Action.Zone ~= \"arena\" and not Action.InstanceInfo.isRated and (Unit(player):HealthPercent() <= LayOnHandsHP or Unit(player):TimeToDie() <= LayOnHandsTTD) and Unit(player):HasDeBuffs(A.Forbearance.ID, true) == 0 -- Forbearance\n    then\n        -- Notification                    \n        Action.SendNotification(\"Emergency \" .. A.GetSpellInfo(A.LayOnHands.ID), A.LayOnHands.ID)\n        return A.LayOnHands:Show(icon)\n    end    \n    \n    -- Passive Divine Shield\n    if A.DivineShield:IsReady(player) and combatTime > 0 and\n    (\n        (\n            not UnitIsUnit(target, player) and\n            (\n                not MouseOver \n                or\n                not A.MouseHasFrame() \n                or\n                not UnitIsUnit(mouseover, player)\n            )        \n        ) \n        or\n        (\n            Unit(player):TimeToDieX(8) < 3 and\n            (\n                GetByRange(1, 10) \n                or\n                EnemyTeam(\"DAMAGER\"):PlayersInRange(1, 10)\n            ) and\n            Unit(player):GetDMG() > Unit(player):GetHPS() \n        )\n    ) and\n    Unit(player):HasDeBuffs(A.Forbearance.ID, true) == 0 and -- Forbearance\n    (\n        (\n            Unit(player):HealthPercent() < DivineShieldHP and\n            Unit(player):TimeToDieX(8) <= GetGCD() * 1.5 + GetCurrentGCD()\n        ) \n        or\n        (\n            A.IsInPvP and\n            Unit(player):IsFocused() and\n            Unit(player):HealthPercent() < 35 and\n            not Unit(player):HasFlags() and\n            (\n                Unit(player):HealthPercent() <= 21 or\n                (                \n                    Unit(player):HasBuffs(\"DeffBuffs\") == 0 and\n                    FriendlyTeam(\"HEALER\"):GetCC() and\n                    Unit(player):IsExecuted()\n                ) \n                or            \n                (\n                    Unit(player):UseDeff() and\n                    Unit(player):TimeToDie() <= GetGCD() * 3\n                )\n                or\n                (\n                    Unit(player):UseDeff() and\n                    Unit(player):TimeToDie() <= DivineShieldTTD\n                )\n            )\n        ) \n    ) and\n    (\n        Unit(player):HasBuffs(\"DeffBuffs\") <= GetCurrentGCD() or\n        Unit(player):HealthPercent() < DivineShieldHP   \n    )\n    then\n        -- Notification                    \n        Action.SendNotification(\"Emergency \" .. A.GetSpellInfo(A.DivineShield.ID), A.DivineShield.ID)\n        return A.DivineShield:Show(icon)\n    end  \n    \n    -- BlessingofFreedom\n    if A.BlessingofFreedom:IsReady(player) and Unit(player):HasDeBuffs(\"Rooted\") > 0 then\n        return A.BlessingofFreedom:Show(icon)\n    end    \n    \n    -- Passive Divine Protection\n    if A.DivineProtection:IsReady(player) and combatTime > 0 and\n    -- Divine Shield \n    Unit(player):HasBuffs(642, true) == 0 and\n    (\n        -- Sacriface\n        (   \n            Unit(player):Health() > Unit(player):HealthMax() * 0.2 and\n            A.LastPlayerCastName == A.BlessingofSacrifice:Info()\n        )\n        or\n        (   \n            -- PvE        \n            (\n                Unit(player):HasBuffs(\"DeffBuffs\") == 0 and\n                (\n                    (\n                        not A.IsInPvP and\n                        Unit(player):TimeToDie() < 12 and\n                        Unit(player):Health() <= Unit(player):HealthMax() * 0.58\n                    ) \n                    or\n                    (\n                        Unit(player):TimeToDie() < 14 and\n                        Unit(player):GetDMG() * 3 >= Unit(player):Health()\n                    ) \n                    or\n                    (\n                        Unit(player):TimeToDie() < 7 and\n                        Unit(player):GetRealTimeDMG() > 0 and\n                        Unit(player):Health() <= Unit(player):HealthMax() * 0.25\n                    )\n                )\n            ) \n            or\n            -- PvP\n            (\n                A.IsInPvP and\n                Unit(player):IsFocused() and\n                (\n                    (\n                        Unit(player):UseDeff() and\n                        (\n                            (\n                                Unit(player):HasBuffs(\"DeffBuffs\") == 0 and\n                                Unit(player):TimeToDie() <= GetGCD() * 8\n                            ) or\n                            Unit(player):IsExecuted()            \n                        ) and  \n                        (                                               \n                            Unit(player):HasBuffs(212182, true) > 0 or -- Smoke Bomb\n                            Unit(player):GetDMG() > Unit(player):GetHEAL()\n                        ) \n                    ) or\n                    (\n                        Unit(player):HasBuffs(\"DeffBuffs\") == 0 and\n                        Unit(player):HasDeBuffs(\"Stuned\") > 2 and\n                        (\n                            Unit(player):IsFocused(nil, true, true) or                                \n                            (\n                                Unit(player):UseDeff() and\n                                Unit(player):HealthPercent() < 80\n                            )\n                        )\n                    )\n                )\n            )\n        )         \n    )\n    or\n    -- Custom Settings UI\n    (\n        Unit(player):TimeToDie() <= DivineProtectionTTD\n        or\n        Unit(player):HealthPercent() <= DivineProtectionHP\n    )\n    then\n        -- Notification                    \n        Action.SendNotification(\"Emergency \" .. A.GetSpellInfo(A.DivineProtection.ID), A.DivineProtection.ID)\n        return A.DivineProtection:Show(icon)\n    end    \nend \n\n\n-- [4] AoE Rotation\nA[4] = function(icon)\n    return A[3](icon, true)\nend\n-- [5] Trinket Rotation\n-- No specialization trinket actions \n-- Passive \n--[[local function FreezingTrapUsedByEnemy()\n    if     UnitCooldown:GetCooldown(\"arena\", 3355) > UnitCooldown:GetMaxDuration(\"arena\", 3355) - 2 and\n    UnitCooldown:IsSpellInFly(\"arena\", 3355) and \n    Unit(player):GetDR(\"incapacitate\") >= 50 \n    then \n        local Caster = UnitCooldown:GetUnitID(\"arena\", 3355)\n        if Caster and Unit(Caster):GetRange() <= 40 then \n            return true \n        end \n    end \nend ]]--\n\nlocal function ArenaRotation(icon, unit)\n    if A.IsInPvP and (Action.Zone == \"pvp\" or Action.Zone == \"arena\") and not Player:IsStealthed() and not Player:IsMounted() then\n        -- Note: \"arena1\" is just identification of meta 6\n        if (unit == \"arena1\" or unit == \"arena2\" or unit == \"arena3\") then  \n            -- Reflect Casting BreakAble CC\n            if A.HammerofJustice:IsReady() and A.HammerofJustice:IsSpellLearned() and EnemyTeam():IsCastingBreakAble(0.25) then \n                return A.HammerofJustice\n            end \n        end\n    end \nend \n\nlocal function PartyRotation(unit)\n    if (unit == \"party1\" and not A.GetToggle(2, \"PartyUnits\")[1]) or (unit == \"party2\" and not A.GetToggle(2, \"PartyUnits\")[2]) then \n        return false \n    end\n    \n    --Dispell\n    if A.Cleanse:IsReady(unit) and not UnitIsUnit(\"target\", unit) and AuraIsValid(unit, \"UseDispel\", \"Dispel\")\n    then\n        return A.Cleanse\n    end\n    \n    -- BlessingofSacrifice\n    if A.BlessingofSacrifice:IsReady(unit) and\n    not UnitIsUnit(\"target\", unit) and\n    (\n        -- Blessing of Sanctuary\n        BoS(unit) or\n        -- Hand of Sacriface\n        HoS(unit, 35, true, true)\n    )\n    then\n        return A.BlessingofSacrifice\n    end\n    \n    -- BlessingofFreedom\n    if A.BlessingofFreedom:IsReady(unit) and not UnitIsUnit(\"target\", unit) and HoF(unit)\n    then\n        return A.BlessingofFreedom\n    end\n    \n    -- BlessingofProtection\n    if A.BlessingofProtection:IsReady(unit) and not UnitIsUnit(\"target\", unit) and BoP(unit)\n    then\n        return A.BlessingofProtection\n    end\n    \nend \n\nA[6] = function(icon)\n    -- Call rotations variables\n    RotationsVariables()\n    \n    -- StopCast OverHeal\n    if Temp.LastPrimaryUnitID and CanStopCastingOverHeal() and StopCastOverHeal then \n        return A:Show(icon, ACTION_CONST_STOPCAST)\n    end\n    \n    -- ZakLL Stop Cast M+ Quake Affix\n    if Unit(player):IsCastingRemains() > 0 and StopCastQuake and Unit(player):HasDeBuffs(A.Quake.ID) <= StopCastQuakeSec and Unit(player):HasDeBuffs(A.Quake.ID) > 0 then\n        return A:Show(icon, ACTION_CONST_STOPCAST)\n    end\n    \n    if RotationPassive(icon) then \n        return true \n    end \n    \n    local Arena = ArenaRotation(\"arena1\")\n    if Arena then \n        return Arena:Show(icon)\n    end \nend\n\nA[7] = function(icon)\n    if RotationPassive(icon) then \n        return true \n    end \n    \n    local Party = PartyRotation(\"party1\") \n    if Party then \n        return Party:Show(icon)\n    end   \n    \n    local Arena = ArenaRotation(\"arena2\")\n    if Arena then \n        return Arena:Show(icon)\n    end \nend\n\nA[8] = function(icon)\n    if RotationPassive(icon) then \n        return true \n    end \n    \n    local Party = PartyRotation(\"party2\") \n    if Party then \n        return Party:Show(icon)\n    end     \n    \n    local Arena = ArenaRotation(\"arena3\")\n    if Arena then \n        return Arena:Show(icon)\n    end \nend",
				}, -- [2]
				{
					["Name"] = "PredictHeal",
					["Code"] = "local _G, math, error                = _G, math, error\nlocal math_ceil                        = math.ceil\nlocal math_max                        = math.max\n\nlocal TMW                             = _G.TMW\n\nlocal A                             = _G.Action\nlocal CONST                         = A.Const\nlocal HealingEngine                    = Action.HealingEngine\nlocal Unit                             = A.Unit \nlocal GetCurrentGCD                    = A.GetCurrentGCD\nlocal GetSpellDescription            = A.GetSpellDescription\nlocal GetToggle                        = A.GetToggle\nlocal GetLatency                    = A.GetLatency\n\nlocal HealingEngineIsManaSave        = HealingEngine.IsManaSave\n\nlocal HOLY                         = A[CONST.PALADIN_HOLY]\n\nlocal UnitIsUnit                    = _G.UnitIsUnit\n\n\n-- Holy Paladin Mastery Calculate  \nlocal function GetHealingModifier(unitID)\n    local extraHealModifier = 1    \n    \n    if Unit(\"player\"):HasSpec(65) then\n        local c_range, m_range = Unit(unitID):GetRange(), 40\n        local bonus = GetMasteryEffect()\n        if Unit(\"player\"):HasBuffs(214202, \"player\", true) > 0 then\n            m_range = 60\n        end\n        \n        extraHealModifier = (bonus - ( bonus / m_range * c_range )) / 100 + 1\n    end\n    \n    return extraHealModifier\nend \n\nfunction A:PredictHeal(unitID, variation)  \n    -- @usage obj:PredictHeal(unitID[, variation]) \n    -- @return boolean, number \n    -- Returns:\n    -- [1] true if action can be used\n    -- [2] total amount of predicted missed health \n    -- Any healing spell can be applied     \n    if Unit(unitID):IsPenalty() then\n        return true, 0\n    end     \n    \n    local PO = GetToggle(8, \"PredictOptions\")\n    -- PO[1] incHeal\n    -- PO[2] incDMG\n    -- PO[3] threat -- not usable in prediction\n    -- PO[4] HoTs\n    -- PO[5] absorbPossitive\n    -- PO[6] absorbNegative\n    local defaultVariation, isManaSave\n    local variation = variation or 1\n    if A.IamHealer and HealingEngineIsManaSave(unitID) then \n        isManaSave = true \n        defaultVariation = variation\n        variation = math_max(variation - 1 + GetToggle(8, \"ManaManagementPredictVariation\"), 1)        \n    end \n    \n    -- Spells\n    if self.predictName == \"FlashofLight\" then        \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total         \n    end \n    \n    -- Holy\n    if self.predictName == \"HolyShock\" then    \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    if self.predictName == \"LightofDawn\" then               \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total        \n    end \n    \n    if self.predictName == \"LightofMartyr\" then               \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total      \n    end \n    \n    if self.predictName == \"HolyPrism\" then               \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total      \n    end \n    \n    if self.predictName == \"HolyPrismAoE\" then               \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[3] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total     \n    end \n    \n    if self.predictName == \"HolyLight\" then          \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    if self.predictName == \"LightsHammer\" then  \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[2] / 2 * extraHealModifier * 14 * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total  \n        \n    end \n    \n    if self.predictName == \"BestowFaith\" then  \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = desc[1] * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total\n    end\n    \n    -- Protection\n    if self.predictName == \"LightOfProtector\" then \n        \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local bonus_heal = (200 - (200 / Unit(unitID):HealthMax() * Unit(unitID):Health())) / 100 + 1\n        local LightOfProtector = 0\n        if A.IsSpellLearned(213652) then\n            LightOfProtector = A.GetSpellDescription(213652)[1] * bonus_heal * variation\n        else\n            LightOfProtector = A.GetSpellDescription(184092)[1] * bonus_heal * variation\n        end  \n        \n        local extraHealModifier = GetHealingModifier(unitID)\n        \n        local withoutOptions = LightOfProtector * extraHealModifier * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total\n    end \n    \n    -- All \n    -- These spells doesn't relative for increasing heal buffs\n    if self.predictName == \"LayOnHands\" then\n        local total = UnitHealthMax(unitID) * 0.8\n        return Unit(unitID):HealthDeficit() >= total, total\n    end     \n    \n    -- Debug \n    if not self.predictName then \n        error((self:GetKeyName() or \"Unknown action name\") .. \" doesn't contain predictName\")        \n    end \n    \n    return false, 0\n    \nend\n\n\n",
				}, -- [3]
				["n"] = 3,
			},
			["Groups"] = {
				{
					["TimerBar_MiddleColor"] = "ff000000",
					["Scale"] = 0.600000023841858,
					["TimerBar_CompleteColor"] = "ff000000",
					["TimerBar_StartColor"] = "ff000000",
					["Locked"] = true,
					["Columns"] = 8,
					["Icons"] = {
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0KeNg=IDQd", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["Enabled"] = true,
						}, -- [1]
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0KeNh2uwMT", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["Enabled"] = true,
						}, -- [2]
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0ZzHksM", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["Enabled"] = true,
							["GUID"] = "TMW:icon:1T0MjrGnynSL",
						}, -- [3]
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0a1tFci", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["Enabled"] = true,
							["GUID"] = "TMW:icon:1T0NdouSxYDb",
						}, -- [4]
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0a6eYf9", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["Enabled"] = true,
						}, -- [5]
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aBPYen", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["Enabled"] = true,
						}, -- [6]
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aG1oeM", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["Enabled"] = true,
						}, -- [7]
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aKbPUI", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["Enabled"] = true,
						}, -- [8]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
					["Name"] = "Shown Main",
					["GUID"] = "TMW:group:1Rhh0xLqd4g8",
					["Point"] = {
						["y"] = 12,
						["x"] = -29,
						["point"] = "TOPLEFT",
						["relativePoint"] = "TOPLEFT",
					},
				}, -- [1]
				{
					["TimerBar_MiddleColor"] = "ff000000",
					["Scale"] = 0.600000023841858,
					["TimerBar_CompleteColor"] = "ff000000",
					["TimerBar_StartColor"] = "ff000000",
					["Locked"] = true,
					["Columns"] = 8,
					["Icons"] = {
						{
							["Type"] = "conditionicon",
							["GUID"] = "TMW:icon:1T0KeNg=IDQd",
							["Enabled"] = true,
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Type"] = "LUA",
									["Name"] = "Rotation(thisobj)",
								}, -- [1]
								["n"] = 1,
							},
						}, -- [1]
						{
							["Type"] = "conditionicon",
							["GUID"] = "TMW:icon:1T0KeNh2uwMT",
							["Enabled"] = true,
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Type"] = "LUA",
									["Name"] = "Rotation(thisobj)",
								}, -- [1]
								["n"] = 1,
							},
						}, -- [2]
						{
							["Type"] = "conditionicon",
							["GUID"] = "TMW:icon:1T0Kg0ZzHksM",
							["Enabled"] = true,
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Type"] = "LUA",
									["Name"] = "Rotation(thisobj)",
								}, -- [1]
								["n"] = 1,
							},
						}, -- [3]
						{
							["Type"] = "conditionicon",
							["GUID"] = "TMW:icon:1T0Kg0a1tFci",
							["Enabled"] = true,
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Type"] = "LUA",
									["Name"] = "Rotation(thisobj)",
								}, -- [1]
								["n"] = 1,
							},
						}, -- [4]
						{
							["Type"] = "conditionicon",
							["GUID"] = "TMW:icon:1T0Kg0a6eYf9",
							["Enabled"] = true,
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Type"] = "LUA",
									["Name"] = "Rotation(thisobj)",
								}, -- [1]
								["n"] = 1,
							},
						}, -- [5]
						{
							["Type"] = "conditionicon",
							["GUID"] = "TMW:icon:1T0Kg0aBPYen",
							["Enabled"] = true,
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Type"] = "LUA",
									["Name"] = "Rotation(thisobj)",
								}, -- [1]
								["n"] = 1,
							},
						}, -- [6]
						{
							["Type"] = "conditionicon",
							["GUID"] = "TMW:icon:1T0Kg0aG1oeM",
							["Enabled"] = true,
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Type"] = "LUA",
									["Name"] = "Rotation(thisobj)",
								}, -- [1]
								["n"] = 1,
							},
						}, -- [7]
						{
							["Type"] = "conditionicon",
							["GUID"] = "TMW:icon:1T0Kg0aKbPUI",
							["Enabled"] = true,
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Type"] = "LUA",
									["Name"] = "Rotation(thisobj)",
								}, -- [1]
								["n"] = 1,
							},
						}, -- [8]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
					["Name"] = "Hidden APL",
					["GUID"] = "TMW:group:1T0KXe2TsCkW",
					["Point"] = {
						["y"] = 50,
						["x"] = -29.0000038146973,
						["point"] = "TOPLEFT",
						["relativePoint"] = "TOPLEFT",
					},
				}, -- [2]
				{
					["Scale"] = 2.5,
					["Locked"] = true,
					["Columns"] = 1,
					["Icons"] = {
						{
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0MjrGnynSL", -- [1]
							},
							["Enabled"] = true,
							["Events"] = {
								{
									["Type"] = "Lua",
									["Lua"] = "Action.ToggleMainUI()",
									["OnlyShown"] = true,
									["Event"] = "OnRightClick",
								}, -- [1]
								["n"] = 1,
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
							["GUID"] = "TMW:icon:1T0MjsTsMtq6",
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [121]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [122]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [123]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [124]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [125]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [126]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [127]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [128]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [129]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [130]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [131]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [132]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [133]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [134]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [135]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [136]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [137]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [138]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [139]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [140]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [141]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [142]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [143]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [144]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [145]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [146]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [147]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [148]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [149]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [150]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [151]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [152]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [153]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [154]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [155]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [156]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [157]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [158]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [159]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [160]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [161]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [162]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [163]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [164]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [165]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [166]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [167]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [168]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [169]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [170]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [171]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [172]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [173]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [174]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [175]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [176]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [177]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [178]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [179]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [180]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [181]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [182]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [183]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [184]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [185]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [186]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [187]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [188]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [189]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [190]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [191]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [192]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [193]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [194]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [195]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [196]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [197]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [198]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [199]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [200]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [201]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [202]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [203]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [204]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [205]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [206]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [207]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [208]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [209]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [210]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [211]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [212]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [213]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [214]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [215]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [216]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [217]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [218]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [219]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [220]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [221]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [222]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [223]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [224]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [225]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [226]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [227]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [228]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [229]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [230]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [231]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [232]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [233]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [234]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [235]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [236]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [237]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [238]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [239]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [240]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [241]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [242]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [243]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [244]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [245]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [246]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [247]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [248]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [249]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [250]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [251]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [252]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [253]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [254]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [255]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [256]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [257]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [258]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [259]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [260]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [261]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [262]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [263]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [264]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [265]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [266]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [267]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [268]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [269]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [270]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [271]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [272]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [273]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [274]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [275]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [276]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [277]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [278]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [279]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [280]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [281]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [282]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [283]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [284]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [285]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [286]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [287]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [288]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [289]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [290]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [291]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [292]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [293]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [294]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [295]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [296]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [297]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [298]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [299]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [300]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [301]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [302]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [303]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [304]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [305]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [306]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [307]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [308]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [309]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [310]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [311]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [312]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [313]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [314]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [315]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [316]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [317]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [318]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [319]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [320]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [321]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [322]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [323]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [324]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [325]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [326]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [327]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [328]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [329]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [330]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [331]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [332]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [333]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [334]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [335]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [336]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [337]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [338]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [339]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [340]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [341]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [342]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [343]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [344]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [345]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [346]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [347]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [348]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [349]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [350]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [351]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [352]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [353]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [354]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [355]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [356]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [357]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [358]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [359]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [360]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [361]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [362]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [363]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [364]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [365]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [366]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [367]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [368]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [369]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [370]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [371]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [372]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [373]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [374]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [375]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [376]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [377]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [378]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [379]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [380]
					},
					["Name"] = "Visible APL",
					["Conditions"] = {
						{
							["Type"] = "LUA",
							["Name"] = "return not GetToggle(1, \"DisableRotationDisplay\")",
						}, -- [1]
						["n"] = 1,
					},
					["GUID"] = "TMW:group:1P3cu8AAtSYM",
					["Point"] = {
						["y"] = -3.0517578125e-05,
						["relativeTo"] = "TMW:group:1TMvhh5X05mC",
						["x"] = -0.000244140625,
					},
				}, -- [3]
				{
					["Point"] = {
						["y"] = -69.99996926784478,
						["x"] = 0.0001739541688950889,
					},
					["Scale"] = 2.5,
					["Level"] = 11,
					["Columns"] = 1,
					["Icons"] = {
						{
							["Type"] = "conditionicon",
							["Enabled"] = true,
							["Events"] = {
								{
									["Type"] = "Lua",
									["Lua"] = "if IsShiftKeyDown() then\n    Action.ToggleBurst()\nelseif IsControlKeyDown() then\n    Action.ToggleMode()\nelseif IsAltKeyDown() then\n    Action.ToggleAoE()\nelse\n    Action.PrintHelpToggle()\nend",
									["OnlyShown"] = true,
									["Event"] = "OnLeftClick",
								}, -- [1]
								{
									["Type"] = "Lua",
									["Lua"] = "Action.ToggleMainUI()",
									["OnlyShown"] = true,
									["Event"] = "OnRightClick",
								}, -- [2]
								["n"] = 2,
							},
							["SettingsPerView"] = {
								["icon"] = {
									["TextLayout"] = "TMW:textlayout:1TMvg5InaYOw",
									["Texts"] = {
										"[ActionBurst]", -- [1]
									},
								},
							},
							["CustomTex"] = "NONE",
							["States"] = {
								{
								}, -- [1]
								{
									["Alpha"] = 1,
								}, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [121]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [122]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [123]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [124]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [125]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [126]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [127]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [128]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [129]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [130]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [131]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [132]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [133]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [134]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [135]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [136]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [137]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [138]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [139]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [140]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [141]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [142]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [143]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [144]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [145]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [146]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [147]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [148]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [149]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [150]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [151]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [152]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [153]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [154]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [155]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [156]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [157]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [158]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [159]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [160]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [161]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [162]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [163]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [164]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [165]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [166]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [167]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [168]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [169]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [170]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [171]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [172]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [173]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [174]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [175]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [176]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [177]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [178]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [179]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [180]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [181]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [182]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [183]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [184]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [185]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [186]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [187]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [188]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [189]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [190]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [191]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [192]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [193]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [194]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [195]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [196]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [197]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [198]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [199]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [200]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [201]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [202]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [203]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [204]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [205]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [206]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [207]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [208]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [209]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [210]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [211]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [212]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [213]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [214]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [215]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [216]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [217]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [218]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [219]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [220]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [221]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [222]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [223]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [224]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [225]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [226]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [227]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [228]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [229]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [230]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [231]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [232]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [233]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [234]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [235]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [236]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [237]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [238]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [239]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [240]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [241]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [242]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [243]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [244]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [245]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [246]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [247]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [248]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [249]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [250]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [251]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [252]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [253]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [254]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [255]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [256]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [257]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [258]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [259]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [260]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [261]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [262]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [263]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [264]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [265]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [266]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [267]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [268]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [269]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [270]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [271]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [272]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [273]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [274]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [275]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [276]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [277]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [278]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [279]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [280]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [281]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [282]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [283]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [284]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [285]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [286]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [287]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [288]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [289]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [290]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [291]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [292]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [293]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [294]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [295]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [296]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [297]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [298]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [299]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [300]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [301]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [302]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [303]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [304]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [305]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [306]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [307]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [308]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [309]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [310]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [311]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [312]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [313]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [314]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [315]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [316]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [317]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [318]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [319]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [320]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [321]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [322]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [323]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [324]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [325]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [326]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [327]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [328]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [329]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [330]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [331]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [332]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [333]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [334]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [335]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [336]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [337]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [338]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [339]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [340]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [341]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [342]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [343]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [344]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [345]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [346]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [347]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [348]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [349]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [350]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [351]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [352]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [353]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [354]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [355]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [356]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [357]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [358]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [359]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [360]
					},
					["Name"] = "Visible APL Layout",
					["Conditions"] = {
						{
							["Type"] = "LUA",
							["Name"] = "return not GetToggle(1, \"DisableRotationDisplay\") and not GetToggle(1, \"DisableRotationModes\")",
						}, -- [1]
						["n"] = 1,
					},
					["GUID"] = "TMW:group:1TMvhh5X05mC",
				}, -- [4]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
				}, -- [5]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
					},
				}, -- [6]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
					},
				}, -- [7]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [8]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
					},
				}, -- [9]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
					},
				}, -- [10]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
					},
				}, -- [11]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [12]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
					},
				}, -- [13]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
					},
				}, -- [14]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [15]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
					},
				}, -- [16]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
					},
				}, -- [17]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
					},
				}, -- [18]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
					},
				}, -- [19]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
					},
				}, -- [20]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
					},
				}, -- [21]
			},
			["Locked"] = true,
		},
		["[Trip] Priest"] = {
			["CodeSnippets"] = {
				{
					["Name"] = "ProfileUI",
					["Code"] = "--############################\n--##### TRIP'S PRIESTUI ######\n--############################\n\n-- Full credit to Taste\n\nlocal TMW                                            = TMW \nlocal CNDT                                            = TMW.CNDT\nlocal Env                                            = CNDT.Env\nlocal A                                                = Action\nlocal GetToggle                                        = A.GetToggle\nlocal InterruptIsValid                                = A.InterruptIsValid\nlocal UnitCooldown                                    = A.UnitCooldown\nlocal Unit                                            = A.Unit \nlocal Player                                        = A.Player \nlocal Pet                                            = A.Pet\nlocal LoC                                            = A.LossOfControl\nlocal MultiUnits                                    = A.MultiUnits\nlocal EnemyTeam                                        = A.EnemyTeam\nlocal FriendlyTeam                                    = A.FriendlyTeam\nlocal TeamCache                                        = A.TeamCache\nlocal InstanceInfo                                    = A.InstanceInfo\nlocal TR                                            = Action.TasteRotation\nlocal select, setmetatable                            = select, setmetatable\n\n-- Shadowlands Spell Info fix for empty spells\nlocal GetSpellInfo_original                                = _G.GetSpellInfo\nlocal function GetSpellInfo(...)\n    return GetSpellInfo_original(...) or \"\"\nend\n\nA.Data.ProfileEnabled[Action.CurrentProfile] = true\nA.Data.ProfileUI                                     = {    \n    DateTime = \"v1.0 (28 Oct 2020)\",\n    [2] = {        \n        [ACTION_CONST_PRIEST_SHADOW] = {             \n            { -- [1]                            \n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use @mouseover\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use AoE\", \n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                    }, \n                    M = {},\n                }, \n                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },                    \n            }, \n            { -- [7] Spell Status Frame\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Spell Status Frame -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E         = \"Button\",\n                    H         = 35,\n                    OnClick = function(self, button, down)     \n                        if button == \"LeftButton\" then \n                            TR.ToggleStatusFrame() \n                        else                \n                            Action.CraftMacro(\"Status Frame\", [[/run Action.TasteRotation.ToggleStatusFrame()]], 1, true, true)   \n                        end \n                    end, \n                    L = { \n                        ANY = \"Status Frame\\nMacro Creator\",\n                    }, \n                    TT = { \n                        enUS = \"Click this button to create the special status frame macro.\\nStatus Frame is a new windows that allow user to track blocked spells during fight. So you don't have to check your chat anymore.\", \n                        ruRU = \"Нажмите эту кнопку, чтобы создать специальный макрос статуса.\\nStatus Frame - это новые окна, которые позволяют пользователю отслеживать заблокированные заклинания во время боя. Так что вам больше не нужно проверять свой чат.\",  \n                        frFR = \"Cliquez sur ce bouton pour créer la macro de cadre d'état spécial.\\nLe cadre d'état est une nouvelle fenêtre qui permet à l'utilisateur de suivre les sorts bloqués pendant le combat. Vous n'avez donc plus besoin de vérifier votre chat.\", \n                    },                           \n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"ChangelogOnStartup\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Changelog On Startup\", \n                        ruRU = \"Журнал изменений при запуске\", \n                        frFR = \"Journal des modifications au démarrage\",\n                    }, \n                    TT = { \n                        enUS = \"Will show latest changelog of the current rotation when you enter in game.\\nDisable this option to block the popup when you enter the game.\", \n                        ruRU = \"При входе в игру будет отображаться последний список изменений текущего вращения.\\nОтключить эту опцию, чтобы заблокировать всплывающее окно при входе в игру.\", \n                        frFR = \"Affiche le dernier journal des modifications de la rotation actuelle lorsque vous entrez dans le jeu.\\nDésactivez cette option pour bloquer la fenêtre contextuelle lorsque vous entrez dans le jeu..\", \n                    }, \n                    M = {},\n                }, \n            },    \n            { -- [2]\n                {\n                    E = \"Checkbox\", \n                    DB = \"ByPassSpells\",\n                    DBV = true,\n                    L = { \n                        enUS = \"ByPassSpells\", \n                    }, \n                    TT = { \n                        enUS = \"Spells\\nWill stop channeling\",\n                    }, \n                    M = {},\n                },         \n                {\n                    E = \"Checkbox\", \n                    DB = \"SpellsTiming\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Spells\\nVoid Bolt timed\",\n                    }, \n                    TT = { \n                        enUS = \"Spells will not be used if Void Bolt will be up within next GCD\",\n                    }, \n                    M = {},\n                },  \n            },\n            { -- [7] Multidots settings\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Multidots settings -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"AutoDot\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Enable auto Multidots\", \n                        ruRU = \"Использовать auto Multidots\", \n                        frFR = \"Activer le Multidots auto\", \n                    }, \n                    TT = { \n                        enUS = \"Automatically multidots units.\\nMake sure to stay front of the enemies nameplate you want the bot to target.\\nMake sure you correctly keybinded the TargetEnemy key in both game and GG.\",\n                        ruRU = \"Автоматически многоточечные юниты.\\nУбедитесь, что вы находитесь перед именной табличкой врагов, на которую должен нацелиться бот. \\nУбедитесь, что вы правильно связали клавишу TargetEnemy в игре и в GG.\",\n                        frFR = \"Multidot automatique des unités.\\nAssurez-vous de rester en face du nameplate de l'ennemi que le bot doit cibler. \\nAssurez-vous que la touche TargetEnemy a été correctement indexée dans le jeu et dans GG.\",\n                    }, \n                    M = {},\n                },\n                {\n                    E         = \"Slider\",                                                     \n                    MIN     = 5, \n                    MAX     = 40,                            \n                    DB         = \"MultiDotDistance\",\n                    DBV     = 35,\n                    ONLYOFF = true,\n                    L         = { \n                        enUS = \"Multidots Range\", \n                        ruRU = \"Сфера Multidots\", \n                        frFR = \"Portée du Multidots\", \n                    }, \n                    TT        = { \n                        enUS = \"Choose the range where you want to automatically multidots units.\", \n                        ruRU = \"Выберите диапазон, в котором вы хотите автоматически многоточечные единицы.\", \n                        frFR = \"Choisissez la portée dans laquelle vous souhaitez multidoter automatiquement les unités.\", \n                    }, \n                    M         = {},\n                },\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"In Raid\", value = \"In Raid\" },\n                        { text = \"In Dungeon\", value = \"In Dungeon\" },\n                        { text = \"In PvP\", value = \"In PvP\" },\n                        { text = \"Everywhere\", value = \"Everywhere\" },\n                    },\n                    MULT = false,\n                    DB = \"AutoDotSelection\",\n                    DBV = \"In Raid\", \n                    L = { \n                        enUS = \"Multidots where\", \n                        ruRU = \"Multidots где\", \n                        frFR = \"Multidots où\", \n                    }, \n                    TT = { \n                        enUS = \"Choose where you want to automatically multidots units.\", \n                        ruRU = \"Выберите, где вы хотите автоматически многоточечные единицы.\", \n                        frFR = \"Choisissez l'endroit où vous souhaitez multidoter automatiquement les unités.\",\n                    }, \n                    M = {},\n                },                \n            },\n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Trinkets -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"TrinketsAoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Trinkets\\nAoE only\", \n                        ruRU = \"Trinkets\\nAoE only\",  \n                        frFR = \"Trinkets\\nAoE only\",  \n                    }, \n                    TT = { \n                        enUS = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                        ruRU = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                        frFR = \"Enable this to option to trinkets for AoE usage ONLY.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 30,                            \n                    DB = \"TrinketsMinTTD\",\n                    DBV = 10, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Min TTD\",\n                    },\n                    TT = { \n                        enUS = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                        ruRU = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                        frFR = \"Minimum Time To Die for units in range before using Trinkets.\\nNOTE: This will calculate Time To Die of your current target OR the Area Time To Die if multiples units are detected.\", \n                    },                    \n                    M = {},\n                },\n            },\n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 2, \n                    MAX = 10,                            \n                    DB = \"TrinketsMinUnits\",\n                    DBV = 20, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Min Units\",\n                    },\n                    TT = { \n                        enUS = \"Minimum number of units in range to activate Trinkets.\", \n                        ruRU = \"Minimum number of units in range to activate Trinkets.\", \n                        frFR = \"Minimum number of units in range to activate Trinkets.\",  \n                    },                    \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 40,                            \n                    DB = \"TrinketsUnitsRange\",\n                    DBV = 20, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"Max AoE range\",\n                    },\n                    TT = { \n                        enUS = \"Maximum range for units detection to automatically activate trinkets.\", \n                        ruRU = \"Maximum range for units detection to automatically activate trinkets.\", \n                        frFR = \"Maximum range for units detection to automatically activate trinkets.\",  \n                    },                    \n                    M = {},\n                },\n            },\n            { -- [7]  Azerite Beam settings\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(295258) .. \" -- \",\n                    },\n                },\n            },\n            { -- [3] 3rd Row                 \n                \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 3, \n                    MAX = 50,                            \n                    DB = \"FocusedAzeriteBeamTTD\",\n                    DBV = 10, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(295258) .. \" TTD\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum Time To Die for a unit before using \" .. GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Установите минимальное время смерти для отряда перед использованием \" .. GetSpellInfo(295258) .. \" \\nНе применимо к боссу.\", \n                        frFR = \"Définissez le temps minimum pour mourir pour une unité avant d'utiliser \" .. GetSpellInfo(295258) .. \" \\nNe s'applique pas aux boss.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"FocusedAzeriteBeamUnits\",\n                    DBV = 3, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(295258) .. \" TTD\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum Time To Die for a unit before using \" .. GetSpellInfo(295258) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Установите минимальное время смерти для отряда перед использованием \" .. GetSpellInfo(295258) .. \" \\nНе применимо к боссу.\", \n                        frFR = \"Définissez le temps minimum pour mourir pour une unité avant d'utiliser \" .. GetSpellInfo(295258) .. \" \\nNe s'applique pas aux boss.\", \n                    },                     \n                    M = {},\n                },                 \n            },\n            { -- [7] UnbridledFuryAuto\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(300714) .. \" -- \",\n                    },\n                },\n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryAuto\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Burst Potion\", \n                        ruRU = \"Burst Potion\",\n                        frFR = \"Burst Potion\",\n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots depending of the settings of this section\", \n                        ruRU = \"If activated, will auto re pots depending of the settings of this section\", \n                        frFR = \"If activated, will auto re pots depending of the settings of this section\", \n                    }, \n                    M = {},\n                }, \n                {\n                    E = \"Checkbox\", \n                    DB = \"UnbridledFuryWithExecute\",\n                    DBV = false,\n                    L = { \n                        enUS = \"Sync execute phase\", \n                        ruRU = \"Sync execute phase\",\n                        frFR = \"Sync execute phase\",   \n                    }, \n                    TT = { \n                        enUS = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                        ruRU = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                        frFR = \"If activated, will auto re pots as soon as Execute phase is detected.\", \n                    }, \n                    M = {},\n                }, \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 60,                          \n                    DB = \"UnbridledFuryTTD\",\n                    DBV = 40, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(300714) .. \" TTD\",\n                    },\n                    TT = { \n                        enUS = \"Set the minimum Time To Die for a unit before using \" .. GetSpellInfo(300714) .. \" \\nDoes not apply to Boss.\", \n                        ruRU = \"Установите минимальное время смерти для отряда перед использованием \" .. GetSpellInfo(300714) .. \" \\nНе применимо к боссу.\", \n                        frFR = \"Définissez le temps minimum pour mourir pour une unité avant d'utiliser \" .. GetSpellInfo(300714) .. \" \\nNe s'applique pas aux boss.\", \n                    },                     \n                    M = {},\n                },                \n            },    \n            \n            { -- [7] \n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Dummy DPS Test -- \",\n                    },\n                },\n            },\n            { -- [3] 3rd Row                     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 10,                            \n                    DB = \"DummyTime\",\n                    DBV = 5, -- Set healthpercentage @30% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = \"DPS Testing Time\",\n                    },\n                    TT = { \n                        enUS = \"Set the desired time for test in minutes.\\nWill show a notification icon when time is expired.\\nMin: 1 / Max: 10.\", \n                        ruRU = \"Установите желаемое время для теста в минутах.\\nПо истечении времени будет отображаться значок уведомления.\\nMin: 1 / Max: 10.\",  \n                        frFR = \"Définissez la durée souhaitée pour le test en minutes.\\nAffiche une icône de notification lorsque le temps est écoulé.\\nMin: 1 / Max: 10.\", \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 15,                            \n                    DB = \"DummyStopDelay\",\n                    DBV = 10, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Stop Delay\",\n                    },\n                    TT = { \n                        enUS = \"After the dummy test is concluded, how much time should we stop the rotation. (In seconds)\\nThis value is mainly used as a protection when you are out of combat to avoid auto attack.\\nDefault value : 10 seconds.\", \n                        ruRU = \"После того, как фиктивный тест закончен, сколько времени мы должны остановить вращение. (В секундах)\\nЭто значение в основном используется в качестве защиты, когда вы находитесь вне боя, чтобы избежать автоматической атаки.\\nЗначение по умолчанию: 10 секунд.\", \n                        frFR = \"Une fois le test fictif terminé, combien de temps devons-nous arrêter la rotation. (En secondes)\\nCette valeur est principalement utilisée comme protection lorsque vous êtes hors de combat pour éviter l'attaque automatique.\\nValeur par défaut: 10 secondes.\", \n                    },                     \n                    M = {},\n                },\n            },\n            { -- [4] 4th Row\n                \n                {\n                    E = \"LayoutSpace\",                                                                         \n                },\n            },\n            \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Overlay -- \",\n                    },\n                },\n            },\n            { -- [2] 2nd Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseAnnouncer\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Smart Announcer\", \n                        ruRU = \"Use Smart Announcer\",  \n                        frFR = \"Use Smart Announcer\", \n                    }, \n                    TT = { \n                        enUS = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        ruRU = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        frFR = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AnnouncerInCombatOnly\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Only use in combat\", \n                        ruRU = \"Only use in combat\", \n                        frFR = \"Only use in combat\",\n                    }, \n                    TT = { \n                        enUS = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work with precombat actions if available.\\nFor example : Sap out of combat, pre potion.\", \n                        ruRU = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",\n                        frFR = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",  \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AnnouncerDelay\",\n                    DBV = 2, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Alerts delay (sec)\",\n                    },\n                    TT = { \n                        enUS = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        ruRU = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        frFR = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                    },                     \n                    M = {},\n                },                \n            },    \n            { -- [3]\n                {\n                    E = \"Header\",\n                    L = {\n                        enUS = \" -- Defensives -- \",\n                    },\n                },\n            }, \n            { -- [4]     \n                {\n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"VampiricEmbrace\",\n                    DBV = 60, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(15286) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n                {                    \n                    E = \"Slider\",                                                     \n                    MIN = -1, \n                    MAX = 100,                            \n                    DB = \"Dispersion\",\n                    DBV = 60, -- Set healthpercentage @60% life. \n                    ONOFF = true,\n                    L = { \n                        ANY = GetSpellInfo(47585) .. \" (%)\",\n                    }, \n                    M = {},\n                },\n            }, \n        },\n        \n        [ACTION_CONST_PRIEST_DISCIPLINE] = {          \n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },    \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- General -- \",\n                    },\n                },\n            },\n            { -- [1]                             \n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\n@mouseover\", \n                        ruRU = \"Использовать\\n@mouseover\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                        ruRU = \"Разблокирует использование действий для @mouseover юнитов\\nНапример: Воскрешение, Хилинг\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"targettarget\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\n@targettarget\", \n                        ruRU = \"Использовать\\n@targettarget\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions\\nfor enemy @targettarget units\", \n                        ruRU = \"Разблокирует использование\\nдействий для вражеских @targettarget юнитов\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nAoE\", \n                        ruRU = \"Использовать\\nAoE\", \n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                        ruRU = \"Включает действия для нескольких целей\", \n                    }, \n                    M = {},\n                },  \n                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"UseRotationPassive\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nPassive\\nRotation\",\n                        ruRU = \"Включить\\nПассивную\\nРотацию\" \n                    },\n                    M = {},\n                },                                  \n            },     \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Healing Engine -- \",\n                    },\n                },\n            },    \n            { -- [7] \n                {\n                    E = \"Checkbox\", \n                    DB = \"ManaManagement\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Boss Fight\\nManaSave\\n(PvE)\", \n                        ruRU = \"Бой с Боссом\\nУправление Маной\\n(PvE)\",\n                    }, \n                    TT = { \n                        enUS = \"Enable to keep small mana save tricks during boss fight\\nMana will keep going to save phase if Boss HP >= our Mana\", \n                        ruRU = \"Включает сохранение малого количества маны с помощью некоторых манипуляций в течении боя против Босса\\nМана будет переходить в фазу сохранения если ХП Босса >= нашей Маны\", \n                    }, \n                    M = {},\n                },             \n                {\n                    E = \"Checkbox\", \n                    DB = \"ManaPotion\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nMana Potion\",\n                        ruRU = \"Использовать\\nЗелье Маны\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"StopCastOverHeal\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Stop Cast\\noverhealing\",\n                        ruRU = \"Stop Cast\\noverhealing\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically stop the current cast to avoid overhealing.\",\n                        ruRU = \"Enable this option to automatically stop the current cast to avoid overhealing.\",\n                    },\n                    M = {},\n                },         \n            },\n            {            \n                {        \n                    E = \"Checkbox\", \n                    DB = \"StartByPreCast\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Begin Combat\\nBy PreCast\",\n                        ruRU = \"Начинать Бой\\nЗаранее произнося\", \n                    },\n                    TT = { \n                        enUS = \"Will start rotation on enemy by available longer\\ncasting spell depended on your spec\",\n                        ruRU = \"Будет начинать ротация на противнике с доступной\\nдлинной произносящейся способности в зависимости от спека\",\n                    },\n                    M = {},\n                },\n                {        \n                    E = \"Checkbox\", \n                    DB = \"HE_Absorb\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Calculate Absorb\",\n                        ruRU = \"Calculate Absorb\",\n                    },\n                    TT = { \n                        enUS = \"Will auto calculate absorb to avoid wasting of refresh spells if they got absorb superior than spell that gonna be casted\",\n                        ruRU = \"Will auto calculate absorb to avoid wasting of refresh spells if they got absorb superior than spell that gonna be casted\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"SpellKick\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Spell Kick\",\n                        ruRU = \"Spell Kick\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use your kicking spells.\",\n                        ruRU = \"Enable this option to automatically use your kicking spells.\",\n                    },\n                    M = {},\n                },\n            },\n            {                            \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"SwitchFriendlyTTD\",                    \n                    DBV = 4,\n                    ONLYON = true,\n                    L = { \n                        ANY = \"Urgent switch\\nto friendly TTD(sec)\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"SwitchFriendlyHP\",                    \n                    DBV = 45,\n                    ONLYON = true,\n                    L = { \n                        ANY = \"Urgent switch\\nto friendly HP(%)\",                        \n                    },                     \n                    M = {},\n                },\n            },    \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Racials -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"RacialBurstHealing\",                    \n                    DBV = 100,\n                    ONLYON = true,\n                    L = { \n                        ANY = A.GetLocalization()[\"TAB\"][1][\"RACIAL\"] .. \"\\n(Healing HP %)\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"RacialBurstDamaging\",                    \n                    DBV = 100,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetLocalization()[\"TAB\"][1][\"RACIAL\"] .. \"\\n(Damaging HP %)\",                        \n                    },                     \n                    M = {},\n                },\n            },\n            { -- Trinkets\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Trinkets -- \",\n                    },\n                },\n            },    \n            {                 \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"Always\", value = \"Always\" },\n                        { text = \"Burst Synchronized\", value = \"BurstSync\" },                    \n                    },\n                    DB = \"TrinketBurstSyncUP\",\n                    DBV = \"Always\",\n                    L = { \n                        enUS = \"Damager: How to use trinkets\",\n                        ruRU = \"Урон: Как использовать аксессуары\", \n                    },\n                    TT = { \n                        enUS = \"Always: On cooldown\\nBurst Synchronized: By Burst Mode in 'General' tab\",\n                        ruRU = \"Always: По доступности\\nBurst Synchronized: От Режима Бурстов во вкладке 'Общее'\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                            \n                    DB = \"TrinketMana\",\n                    DBV = 85,\n                    ONLYOFF = false,\n                    L = { \n                        enUS = \"Trinket: Mana(%)\",\n                        ruRU = \"Trinket: Mana(%)\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                            \n                    DB = \"TrinketBurstHealing\",\n                    DBV = 75,\n                    ONLYOFF = false,\n                    L = { \n                        enUS = \"Healer: Target Health (%)\",\n                        ruRU = \"Лекарь: Здоровье Цели (%)\", \n                    },\n                    M = {},\n                },        \n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Essences -- \",\n                    },\n                },\n            },    \n            {\n                RowOptions = { margin = { top = 10 } },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"LucidDreamManaPercent\",                    \n                    DBV = 85,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(299374) .. \"\\nMana %\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 10,                            \n                    DB = \"LifeBindersInvocationUnits\",                    \n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(299944) .. \"\\nunits number\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"LifeBindersInvocationHP\",                    \n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(299944) .. \"\\n(%)\",                        \n                    },                     \n                    M = {},\n                },\n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Mythic + -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"MythicPlusLogic\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Smart Mythic+\",\n                        ruRU = \"Smart Mythic+\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to activate critical healing logic depending of the current dungeon.\\nExample:Fulminating Zap in Junkyard\",\n                        ruRU = \"Enable this option to activate critical healing logic depending of the current dungeon.\\nExample:Fulminating Zap in Junkyard\",\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"GrievousWoundsLogic\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Grievous Wounds\\nlogic\",\n                        ruRU = \"Grievous Wounds\\nlogic\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to activate critical healing logic for friendly units that got Grievous Wounds debuff.\",\n                        ruRU = \"Enable this option to activate critical healing logic for friendly units that got Grievous Wounds debuff.\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"GrievousWoundsMinStacks\",                    \n                    DBV = 2,\n                    ONOFF = false,\n                    L = { \n                        ANY = \"Grievous Wounds\\nmin stacks\",                        \n                    },   \n                    TT = { \n                        enUS = \"How many stacks of Grievous Wounds should be up on friendly unit before force targetting on this unit.\\nExample: 2 means friendly unit will be urgently targetted if he got 2 stacks.\", \n                        ruRU = \"How many stacks of Grievous Wounds should be up on friendly unit before force targetting on this unit.\\nExample: 2 means friendly unit will be urgently targetted if he got 2 stacks.\", \n                    },                    \n                    M = {},\n                },                \n                {\n                    E = \"Checkbox\", \n                    DB = \"StopCastQuake\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Stop Cast\\nquaking\",\n                        ruRU = \"Stop Cast\\nquaking\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically stop your current cast before Quake.\",\n                        ruRU = \"Enable this option to automatically stop your current cast before Quake.\",\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 3,                            \n                    DB = \"StopCastQuakeSec\",                    \n                    DBV = 1,\n                    Precision = 1,\n                    ONOFF = false,\n                    L = { \n                        ANY = \"Stop Cast\\nquaking seconds\",                      \n                    },\n                    TT = { \n                        enUS = \"Define the value you want to stop your cast before next Quake hit.\\nValue is in seconds.\\nExample: 1 means you will stop cast at 1sec remaining on Quaking.\",            \n                        ruRU = \"Define the value you want to stop your cast before next Quake hit.\\nValue is in seconds.\\nExample: 1 means you will stop cast at 1sec remaining on Quaking.\",            \n                    },                    \n                    M = {},\n                },\n            },\n            { -- Penance\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(47540) .. \" -- \",\n                    },\n                }, \n            },\n            {\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"BOTH\", value = \"BOTH\" },\n                        { text = \"HEAL\", value = \"HEAL\" },    \n                        { text = \"DMG\", value = \"DMG\" },                    \n                    },\n                    DB = \"PenanceWorkMode\",\n                    DBV = \"BOTH\",\n                    L = { \n                        ANY = GetSpellInfo(47540) .. \" Work Mode\",\n                    }, \n                    TT = { \n                        enUS = \"These conditions will be skiped if unit will dying in emergency (critical) situation\", \n                        ruRU = \"Эти условия будут пропущены если юнит будет умирать в чрезвычайной (критической) ситуациии\", \n                    },                    \n                    M = {},\n                },\n            },     \n            { -- Angelic Feather\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Utilities -- \",\n                    },\n                }, \n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"AngelicFeather\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(121536),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(121536),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(121536),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(121536),\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"LeapofFaith\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(73325),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(73325),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(73325),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(73325),\n                    },\n                    M = {},\n                },    \n            },                 \n            { -- [6]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Party -- \",\n                    },\n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@party1\", value = 1 },\n                        { text = \"@party2\", value = 2 },\n                    },\n                    MULT = true,\n                    DB = \"PartyUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                    }, \n                    L = { \n                        ANY = \"Party Units\",\n                    }, \n                    TT = { \n                        enUS = \"Enable/Disable relative party passive rotation\", \n                        ruRU = \"Включить/Выключить относительно группы пассивную ротацию\", \n                    }, \n                    M = {},\n                },  \n                {\n                    E = \"Checkbox\", \n                    DB = \"Dispel\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(528),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(528),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(528),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(528),\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"MassDispel\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(32375),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(32375),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(32375),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(32375),\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"Purje\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(527),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(527),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(527),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(527),\n                    },\n                    M = {},\n                },                \n            },     \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Overlay -- \",\n                    },\n                },\n            },\n            { -- [2] 2nd Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseAnnouncer\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Smart Announcer\", \n                        ruRU = \"Use Smart Announcer\",  \n                        frFR = \"Use Smart Announcer\", \n                    }, \n                    TT = { \n                        enUS = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        ruRU = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        frFR = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AnnouncerInCombatOnly\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Only use in combat\", \n                        ruRU = \"Only use in combat\", \n                        frFR = \"Only use in combat\",\n                    }, \n                    TT = { \n                        enUS = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work with precombat actions if available.\\nFor example : Sap out of combat, pre potion.\", \n                        ruRU = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",\n                        frFR = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",  \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AnnouncerDelay\",\n                    DBV = 2, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Alerts delay (sec)\",\n                    },\n                    TT = { \n                        enUS = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        ruRU = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        frFR = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                    },                     \n                    M = {},\n                },                \n            },    \n            \n        },\n        [ACTION_CONST_PRIEST_HOLY] = {          \n            LayoutOptions = { gutter = 5, padding = { left = 10, right = 10 } },    \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- General -- \",\n                    },\n                },\n            },\n            { -- [1]                             \n                {\n                    E = \"Checkbox\", \n                    DB = \"mouseover\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\n@mouseover\", \n                        ruRU = \"Использовать\\n@mouseover\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions for @mouseover units\\nExample: Resuscitate, Healing\", \n                        ruRU = \"Разблокирует использование действий для @mouseover юнитов\\nНапример: Воскрешение, Хилинг\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"targettarget\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\n@targettarget\", \n                        ruRU = \"Использовать\\n@targettarget\", \n                    }, \n                    TT = { \n                        enUS = \"Will unlock use actions\\nfor enemy @targettarget units\", \n                        ruRU = \"Разблокирует использование\\nдействий для вражеских @targettarget юнитов\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AoE\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nAoE\", \n                        ruRU = \"Использовать\\nAoE\", \n                    }, \n                    TT = { \n                        enUS = \"Enable multiunits actions\", \n                        ruRU = \"Включает действия для нескольких целей\", \n                    }, \n                    M = {},\n                },  \n                {\n                    E = \"Checkbox\", \n                    DB = \"TasteInterruptList\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use BFA Mythic+ & Raid\\nsmart interrupt list\", \n                        ruRU = \"использование BFA Mythic+ & Raid\\nумный список прерываний\", \n                        frFR = \"Liste d'interrupts intelligente\\nBFA Mythic+ & Raid\",\n                    }, \n                    TT = { \n                        enUS = \"If Enabled : Will force a special interrupt list containing all the BFA Mythic+ and Raid stuff WHEN YOU ARE IN MYTHIC+ OR RAID ZONE.\\nYou can edit this list in the Interrupts tab\\nand customize it as you want\",\n                        ruRU = \"Если включено : Запустит специальный список прерываний, содержащий все BFA Mythic+ и Raid stuff КОГДА ВЫ НАХОДИТЕСЬ В МИФИЧЕСКОЙ + ИЛИ ЗОНЕ RAID.\\nВы можете редактировать этот список на вкладке Прерывания\\nи настраивай как хочешь\",\n                        frFR = \"Si activé : Force une liste d'interruption spéciale contenant tous les éléments BFA Mythic + et Raid QUAND VOUS ETES EN MYTHIC+ OU EN RAID.\\nVous pouvez modifier cette liste dans l'onglet Interruptions\\net la personnaliser comme vous le souhaitez\", \n                    }, \n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"UseRotationPassive\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nPassive\\nRotation\",\n                        ruRU = \"Включить\\nПассивную\\nРотацию\" \n                    },\n                    M = {},\n                },                                  \n            },     \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Healing Engine -- \",\n                    },\n                },\n            },    \n            { -- [7] \n                {\n                    E = \"Checkbox\", \n                    DB = \"ManaManagement\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Boss Fight\\nManaSave\\n(PvE)\", \n                        ruRU = \"Бой с Боссом\\nУправление Маной\\n(PvE)\",\n                    }, \n                    TT = { \n                        enUS = \"Enable to keep small mana save tricks during boss fight\\nMana will keep going to save phase if Boss HP >= our Mana\", \n                        ruRU = \"Включает сохранение малого количества маны с помощью некоторых манипуляций в течении боя против Босса\\nМана будет переходить в фазу сохранения если ХП Босса >= нашей Маны\", \n                    }, \n                    M = {},\n                },             \n                {\n                    E = \"Checkbox\", \n                    DB = \"ManaPotion\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use\\nMana Potion\",\n                        ruRU = \"Использовать\\nЗелье Маны\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"StopCastOverHeal\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Stop Cast\\noverhealing\",\n                        ruRU = \"Stop Cast\\noverhealing\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically stop the current cast to avoid overhealing.\",\n                        ruRU = \"Enable this option to automatically stop the current cast to avoid overhealing.\",\n                    },\n                    M = {},\n                },         \n            },\n            {            \n                {        \n                    E = \"Checkbox\", \n                    DB = \"StartByPreCast\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Begin Combat\\nBy PreCast\",\n                        ruRU = \"Начинать Бой\\nЗаранее произнося\", \n                    },\n                    TT = { \n                        enUS = \"Will start rotation on enemy by available longer\\ncasting spell depended on your spec\",\n                        ruRU = \"Будет начинать ротация на противнике с доступной\\nдлинной произносящейся способности в зависимости от спека\",\n                    },\n                    M = {},\n                },\n                {        \n                    E = \"Checkbox\", \n                    DB = \"HE_Absorb\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Calculate Absorb\",\n                        ruRU = \"Calculate Absorb\",\n                    },\n                    TT = { \n                        enUS = \"Will auto calculate absorb to avoid wasting of refresh spells if they got absorb superior than spell that gonna be casted\",\n                        ruRU = \"Will auto calculate absorb to avoid wasting of refresh spells if they got absorb superior than spell that gonna be casted\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"SpellKick\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Spell Kick\",\n                        ruRU = \"Spell Kick\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use your kicking spells.\",\n                        ruRU = \"Enable this option to automatically use your kicking spells.\",\n                    },\n                    M = {},\n                },\n            },\n            \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Racials -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"RacialBurstHealing\",                    \n                    DBV = 100,\n                    ONLYON = true,\n                    L = { \n                        ANY = A.GetLocalization()[\"TAB\"][1][\"RACIAL\"] .. \"\\n(Healing HP %)\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"RacialBurstDamaging\",                    \n                    DBV = 100,\n                    ONOFF = false,\n                    L = { \n                        ANY = A.GetLocalization()[\"TAB\"][1][\"RACIAL\"] .. \"\\n(Damaging HP %)\",                        \n                    },                     \n                    M = {},\n                },\n            },\n            { -- Trinkets\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Trinkets -- \",\n                    },\n                },\n            },    \n            {                 \n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"Always\", value = \"Always\" },\n                        { text = \"Burst Synchronized\", value = \"BurstSync\" },                    \n                    },\n                    DB = \"TrinketBurstSyncUP\",\n                    DBV = \"Always\",\n                    L = { \n                        enUS = \"Damager: How to use trinkets\",\n                        ruRU = \"Урон: Как использовать аксессуары\", \n                    },\n                    TT = { \n                        enUS = \"Always: On cooldown\\nBurst Synchronized: By Burst Mode in 'General' tab\",\n                        ruRU = \"Always: По доступности\\nBurst Synchronized: От Режима Бурстов во вкладке 'Общее'\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                            \n                    DB = \"TrinketMana\",\n                    DBV = 85,\n                    ONLYOFF = false,\n                    L = { \n                        enUS = \"Trinket: Mana(%)\",\n                        ruRU = \"Trinket: Mana(%)\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 5, \n                    MAX = 100,                            \n                    DB = \"TrinketBurstHealing\",\n                    DBV = 75,\n                    ONLYOFF = false,\n                    L = { \n                        enUS = \"Healer: Target Health (%)\",\n                        ruRU = \"Лекарь: Здоровье Цели (%)\", \n                    },\n                    M = {},\n                },        \n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Essences -- \",\n                    },\n                },\n            },    \n            {\n                RowOptions = { margin = { top = 10 } },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 100,                            \n                    DB = \"LucidDreamManaPercent\",                    \n                    DBV = 85,\n                    ONLYON = true,\n                    L = { \n                        ANY = GetSpellInfo(299374) .. \"\\nMana %\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 10,                            \n                    DB = \"LifeBindersInvocationUnits\",                    \n                    DBV = 5,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(299944) .. \"\\nunits number\",                        \n                    },                     \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 0, \n                    MAX = 100,                            \n                    DB = \"LifeBindersInvocationHP\",                    \n                    DBV = 85,\n                    ONOFF = false,\n                    L = { \n                        ANY = GetSpellInfo(299944) .. \"\\n(%)\",                        \n                    },                     \n                    M = {},\n                },\n            },\n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Mythic + -- \",\n                    },\n                },\n            },    \n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"MythicPlusLogic\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Smart Mythic+\",\n                        ruRU = \"Smart Mythic+\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to activate critical healing logic depending of the current dungeon.\\nExample:Fulminating Zap in Junkyard\",\n                        ruRU = \"Enable this option to activate critical healing logic depending of the current dungeon.\\nExample:Fulminating Zap in Junkyard\",\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"GrievousWoundsLogic\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Grievous Wounds\\nlogic\",\n                        ruRU = \"Grievous Wounds\\nlogic\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to activate critical healing logic for friendly units that got Grievous Wounds debuff.\",\n                        ruRU = \"Enable this option to activate critical healing logic for friendly units that got Grievous Wounds debuff.\",\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 5,                            \n                    DB = \"GrievousWoundsMinStacks\",                    \n                    DBV = 2,\n                    ONOFF = false,\n                    L = { \n                        ANY = \"Grievous Wounds\\nmin stacks\",                        \n                    },   \n                    TT = { \n                        enUS = \"How many stacks of Grievous Wounds should be up on friendly unit before force targetting on this unit.\\nExample: 2 means friendly unit will be urgently targetted if he got 2 stacks.\", \n                        ruRU = \"How many stacks of Grievous Wounds should be up on friendly unit before force targetting on this unit.\\nExample: 2 means friendly unit will be urgently targetted if he got 2 stacks.\", \n                    },                    \n                    M = {},\n                },                \n                {\n                    E = \"Checkbox\", \n                    DB = \"StopCastQuake\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Stop Cast\\nquaking\",\n                        ruRU = \"Stop Cast\\nquaking\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically stop your current cast before Quake.\",\n                        ruRU = \"Enable this option to automatically stop your current cast before Quake.\",\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 3,                            \n                    DB = \"StopCastQuakeSec\",                    \n                    DBV = 1,\n                    Precision = 1,\n                    ONOFF = false,\n                    L = { \n                        ANY = \"Stop Cast\\nquaking seconds\",                      \n                    },\n                    TT = { \n                        enUS = \"Define the value you want to stop your cast before next Quake hit.\\nValue is in seconds.\\nExample: 1 means you will stop cast at 1sec remaining on Quaking.\",            \n                        ruRU = \"Define the value you want to stop your cast before next Quake hit.\\nValue is in seconds.\\nExample: 1 means you will stop cast at 1sec remaining on Quaking.\",            \n                    },                    \n                    M = {},\n                },\n            },\n            { -- GuardianSpiritSelfDeff\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(47788) .. \" -- \",\n                    },\n                }, \n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"GuardianSpiritSelfDeff\",\n                    DBV = true,\n                    L = { \n                        enUS = GetSpellInfo(47788) .. \" Self Deff\",\n                        ruRU = GetSpellInfo(47788) .. \" Self Deff\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(47788) .. \" for Self defense.\",\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(47788) .. \" for Self defense.\",\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"GuardianSpiritTeamDeff\",\n                    DBV = true,\n                    L = { \n                        enUS = GetSpellInfo(47788) .. \" Team Deff\",\n                        ruRU = GetSpellInfo(47788) .. \" Team Deff\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(47788) .. \" for Team deffense.\",\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(47788) .. \" for Team deffense.\",\n                    },\n                    M = {},\n                },    \n            },     \n            { -- Renew\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- \" .. GetSpellInfo(139) .. \" -- \",\n                    },\n                }, \n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"RenewRefresh\",\n                    DBV = false,\n                    L = { \n                        enUS = GetSpellInfo(139) .. \" Force Refresh\",\n                        ruRU = GetSpellInfo(139) .. \" Force Refresh\",\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically force \" .. GetSpellInfo(139) .. \" refreshment on every units.\",\n                        ruRU = \"Enable this option to automatically force \" .. GetSpellInfo(139) .. \" refreshment on every units.\",\n                    },\n                    M = {},\n                },        \n            },     \n            { -- Angelic Feather\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Utilities -- \",\n                    },\n                }, \n            },\n            {\n                {\n                    E = \"Checkbox\", \n                    DB = \"AngelicFeather\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(121536),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(121536),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(121536),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(121536),\n                    },\n                    M = {},\n                },    \n                {\n                    E = \"Checkbox\", \n                    DB = \"LeapofFaith\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(73325),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(73325),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(73325),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(73325),\n                    },\n                    M = {},\n                },    \n            },                 \n            { -- [6]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Party -- \",\n                    },\n                },\n            }, \n            { -- [7]\n                {\n                    E = \"Dropdown\",                                                         \n                    OT = {\n                        { text = \"@party1\", value = 1 },\n                        { text = \"@party2\", value = 2 },\n                    },\n                    MULT = true,\n                    DB = \"PartyUnits\",\n                    DBV = {\n                        [1] = true, \n                        [2] = true,\n                    }, \n                    L = { \n                        ANY = \"Party Units\",\n                    }, \n                    TT = { \n                        enUS = \"Enable/Disable relative party passive rotation\", \n                        ruRU = \"Включить/Выключить относительно группы пассивную ротацию\", \n                    }, \n                    M = {},\n                },  \n                {\n                    E = \"Checkbox\", \n                    DB = \"Dispel\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(528),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(528),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(528),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(528),\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"MassDispel\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(32375),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(32375),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(32375),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(32375),\n                    },\n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"Purje\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Auto\\n\" .. GetSpellInfo(527),\n                        ruRU = \"Auto\\n\" .. GetSpellInfo(527),\n                    },\n                    TT = { \n                        enUS = \"Enable this option to automatically use \" .. GetSpellInfo(527),\n                        ruRU = \"Enable this option to automatically use \" .. GetSpellInfo(527),\n                    },\n                    M = {},\n                },                \n            },     \n            { -- [7]\n                {\n                    E = \"Header\",\n                    L = {\n                        ANY = \" -- Overlay -- \",\n                    },\n                },\n            },\n            { -- [2] 2nd Row\n                {\n                    E = \"Checkbox\", \n                    DB = \"UseAnnouncer\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Use Smart Announcer\", \n                        ruRU = \"Use Smart Announcer\",  \n                        frFR = \"Use Smart Announcer\", \n                    }, \n                    TT = { \n                        enUS = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        ruRU = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                        frFR = \"Will make the rotation to announce importants informations.\\nUseful to get fast and clear status of what the rotation is doing and why it is doing.\\nFor example :\\n- Blind on enemy healer to interrupt an incoming heal.\\n- Vanish to survive incoming damage.\", \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Checkbox\", \n                    DB = \"AnnouncerInCombatOnly\",\n                    DBV = true,\n                    L = { \n                        enUS = \"Only use in combat\", \n                        ruRU = \"Only use in combat\", \n                        frFR = \"Only use in combat\",\n                    }, \n                    TT = { \n                        enUS = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work with precombat actions if available.\\nFor example : Sap out of combat, pre potion.\", \n                        ruRU = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",\n                        frFR = \"Will only use Smart Announcer while in combat.\\nDisable it will make Smart Announcer work out of combat if precombat actions are available.\\nFor example : Sap out of combat, pre potion.\",  \n                    }, \n                    M = {},\n                },\n                {\n                    E = \"Slider\",                                                     \n                    MIN = 1, \n                    MAX = 10,                            \n                    DB = \"AnnouncerDelay\",\n                    DBV = 2, -- 2sec\n                    ONOFF = true,\n                    L = { \n                        ANY = \"Alerts delay (sec)\",\n                    },\n                    TT = { \n                        enUS = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        ruRU = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                        frFR = \"Will force a specific delay before the alerts fade.\\nDefault value : 2 seconds.\", \n                    },                     \n                    M = {},\n                },                \n            },            \n            \n        },        \n    },\n}\n\nfunction A.Main_CastBars(unit, list)\n    if not A.IsInitialized or A.IamHealer or (A.Zone ~= \"arena\" and A.Zone ~= \"pvp\") then \n        return false \n    end \n    \n    if A[A.PlayerSpec] and A[A.PlayerSpec].SpearHandStrike and A[A.PlayerSpec].SpearHandStrike:IsReadyP(unit, nil, true) and A[A.PlayerSpec].SpearHandStrike:AbsentImun(unit, {\"KickImun\", \"TotalImun\", \"DamagePhysImun\"}, true) and A.InterruptIsValid(unit, list) then \n        return true         \n    end \nend \n\nfunction A.Second_CastBars(unit)\n    if not A.IsInitialized or (A.Zone ~= \"arena\" and A.Zone ~= \"pvp\")  then \n        return false \n    end \n    \n    local Toggle = A.GetToggle(2, \"ParalysisPvP\")    \n    if Toggle and Toggle ~= \"OFF\" and A[A.PlayerSpec] and A[A.PlayerSpec].Paralysis and A[A.PlayerSpec].Paralysis:IsReadyP(unit, nil, true) and A[A.PlayerSpec].Paralysis:AbsentImun(unit, {\"CCTotalImun\", \"TotalImun\", \"DamagePhysImun\"}, true) and Unit(unit):IsControlAble(\"incapacitate\", 0) then \n        if Toggle == \"BOTH\" then \n            return select(2, A.InterruptIsValid(unit, \"Heal\", true)) or select(2, A.InterruptIsValid(unit, \"PvP\", true)) \n        else\n            return select(2, A.InterruptIsValid(unit, Toggle, true))         \n        end \n    end \nend \n\n",
				}, -- [1]
				{
					["Order"] = 2,
					["Name"] = "SHADOW",
					["Code"] = "--##################################\n--###### TRIP'S SHADOW PRIEST ######\n--##################################\n\n-- Full credit to Taste\n\nlocal _G, setmetatable                            = _G, setmetatable\nlocal A                                         = _G.Action\nlocal Listener                                    = Action.Listener\nlocal Create                                    = Action.Create\nlocal GetToggle                                    = Action.GetToggle\nlocal SetToggle                                    = Action.SetToggle\nlocal GetGCD                                    = Action.GetGCD\nlocal GetCurrentGCD                                = Action.GetCurrentGCD\nlocal GetPing                                    = Action.GetPing\nlocal ShouldStop                                = Action.ShouldStop\nlocal BurstIsON                                    = Action.BurstIsON\nlocal AuraIsValid                                = Action.AuraIsValid\nlocal InterruptIsValid                            = Action.InterruptIsValid\nlocal FrameHasSpell                                = Action.FrameHasSpell\nlocal Azerite                                    = LibStub(\"AzeriteTraits\")\nlocal Utils                                        = Action.Utils\nlocal TeamCache                                    = Action.TeamCache\nlocal EnemyTeam                                    = Action.EnemyTeam\nlocal FriendlyTeam                                = Action.FriendlyTeam\nlocal LoC                                        = Action.LossOfControl\nlocal Player                                    = Action.Player \nlocal MultiUnits                                = Action.MultiUnits\nlocal UnitCooldown                                = Action.UnitCooldown\nlocal Unit                                        = Action.Unit \nlocal IsUnitEnemy                                = Action.IsUnitEnemy\nlocal IsUnitFriendly                            = Action.IsUnitFriendly\nlocal ActiveUnitPlates                            = MultiUnits:GetActiveUnitPlates()\nlocal IsIndoors, UnitIsUnit                     = IsIndoors, UnitIsUnit\nlocal TR                                        = Action.TasteRotation\nlocal pairs                                     = pairs\nlocal Pet                                       = LibStub(\"PetLibrary\")\n\n--- ============================ CONTENT ===========================\n--- ======= APL LOCALS =======\n-- luacheck: max_line_length 9999\n\n-- Spells\nAction[ACTION_CONST_PRIEST_SHADOW] = {\n    -- Racial\n    ArcaneTorrent                          = Action.Create({ Type = \"Spell\", ID = 50613 }),\n    BloodFury                              = Action.Create({ Type = \"Spell\", ID = 20572 }),\n    Fireblood                              = Action.Create({ Type = \"Spell\", ID = 265221 }),\n    AncestralCall                          = Action.Create({ Type = \"Spell\", ID = 274738 }),\n    Berserking                             = Action.Create({ Type = \"Spell\", ID = 26297 }),\n    ArcanePulse                            = Action.Create({ Type = \"Spell\", ID = 260364 }),\n    QuakingPalm                            = Action.Create({ Type = \"Spell\", ID = 107079 }),\n    Haymaker                               = Action.Create({ Type = \"Spell\", ID = 287712 }), \n    WarStomp                               = Action.Create({ Type = \"Spell\", ID = 20549 }),\n    BullRush                               = Action.Create({ Type = \"Spell\", ID = 255654 }),    \n    GiftofNaaru                            = Action.Create({ Type = \"Spell\", ID = 59544 }),\n    Shadowmeld                             = Action.Create({ Type = \"Spell\", ID = 58984 }), -- usable in Action Core \n    Stoneform                              = Action.Create({ Type = \"Spell\", ID = 20594 }), \n    WilloftheForsaken                      = Action.Create({ Type = \"Spell\", ID = 7744  }), -- not usable in APL but user can Queue it    \n    EscapeArtist                           = Action.Create({ Type = \"Spell\", ID = 20589 }), -- not usable in APL but user can Queue it\n    EveryManforHimself                     = Action.Create({ Type = \"Spell\", ID = 59752 }), -- not usable in APL but user can Queue it\n    Darkflight                             = Create({ Type = \"Spell\", ID = 68992    }),\n    -- Generics\n    Shadowfiend                            = Action.Create({ Type = \"Spell\", ID = 34433 }),\n    Mindbender                             = Action.Create({ Type = \"Spell\", ID = 200174 }),\n    SurrenderToMadness                     = Action.Create({ Type = \"Spell\", ID = 193223 }),\n    VampiricTouch                          = Action.Create({ Type = \"Spell\", ID = 34914 }),\n    ShadowWordPain                         = Action.Create({ Type = \"Spell\", ID = 589 }),\n    MindBlast                              = Action.Create({ Type = \"Spell\", ID = 8092 }),\n    ShadowWordVoid                         = Action.Create({ Type = \"Spell\", ID = 205351 }),\n    MindFlay                               = Action.Create({ Type = \"Spell\", ID = 15407 }),\n    MindSear                               = Action.Create({ Type = \"Spell\", ID = 48045 }),\n    VoidEruption                           = Action.Create({ Type = \"Spell\", ID = 228260 }),\n    VoidBolt                               = Action.Create({ Type = \"Spell\", ID = 205448 }),\n    DarkVoid                               = Action.Create({ Type = \"Spell\", ID = 263346 }),\n    ShadowCrash                            = Action.Create({ Type = \"Spell\", ID = 205385 }),\n    ShadowWordDeath                        = Action.Create({ Type = \"Spell\", ID = 32379 }),\n    VoidTorrent                            = Action.Create({ Type = \"Spell\", ID = 263165 }),\n    Misery                                 = Action.Create({ Type = \"Spell\", ID = 238558 }),\n    Shadowform                             = Action.Create({ Type = \"Spell\", ID = 232698 }),\n    ChorusofInsanity                       = Action.Create({ Type = \"Spell\", ID = 278661 }),\n    LegacyOfTheVoid                        = Action.Create({ Type = \"Spell\", ID = 193225, Hidden = true }),\n    ShadowformBuff                         = Action.Create({ Type = \"Spell\", ID = 232698, Hidden = true }),\n    VoidformBuff                           = Action.Create({ Type = \"Spell\", ID = 194249, Hidden = true }),\n    HarvestedThoughtsBuff                  = Action.Create({ Type = \"Spell\", ID = 288343, Hidden = true }),    \n    VampiricTouchDebuff                    = Action.Create({ Type = \"Spell\", ID = 34914, Hidden = true }),\n    ShadowWordPainDebuff                   = Action.Create({ Type = \"Spell\", ID = 589, Hidden = true }),\n    WeakenedSoulDebuff                     = Action.Create({ Type = \"Spell\", ID = 6788, Hidden = true }),\n    SearingDialogue                        = Action.Create({ Type = \"Spell\", ID = 272788, Hidden = true }),\n    ThoughtHarvester                       = Action.Create({ Type = \"Spell\", ID = 288340, Hidden = true }),\n    WhispersoftheDamned                    = Action.Create({ Type = \"Spell\", ID = 275722, Hidden = true }),\n    DeathThroes                            = Action.Create({ Type = \"Spell\", ID = 278659, Hidden = true }),\n    SpitefulApparitions                    = Action.Create({ Type = \"Spell\", ID = 277682, Hidden = true }),\n    Damnation                              = Action.Create({ Type = \"Spell\", ID = 341374}),\n    UnfurlingDarknessBuff                  = Action.Create({ Type = \"Spell\", ID = 341282}),\n    SearingNightmare                       = Action.Create({ Type = \"Spell\", ID = 341385}),\n    PsychicLink                            = Action.Create({ Type = \"Spell\", ID = 199484}),\n    PowerInfusion                          = Action.Create({ Type = \"Spell\", ID = 10060}),\n    DevouringPlague                        = Action.Create({ Type = \"Spell\", ID = 335467}),\n    DarkThought                               = Action.Create({ Type = \"Spell\", ID = 341207, Hidden = true }),\n    --    DevouringPlagueDebuff                  = Action.Create({ Type = \"Spell\", ID = 335467, Hidden = true}),\n    -- PvP   \n    Silence                                = Action.Create({ Type = \"Spell\", ID = 15487 }),    \n    PsychicScream                          = Action.Create({ Type = \"Spell\", ID = 8122   }), -- Fear\n    PsychicHorror                          = Action.Create({ Type = \"Spell\", ID = 64044 }), -- Fear + Disarm\n    -- Covenant Abilities\n    AscendedBlast                          = Action.Create({ Type = \"Spell\", ID = 325283}), \n    AscendedNova                           = Action.Create({ Type = \"Spell\", ID = 325020}), \n    BoonoftheAscended                      = Action.Create({ Type = \"Spell\", ID = 325013}), \n    --    BoonoftheAscendedBuff                  = Action.Create({ Type = \"Spell\", ID = 325013}), \n    FaeGuardians                           = Action.Create({ Type = \"Spell\", ID = 327661}), \n    Mindgames                              = Action.Create({ Type = \"Spell\", ID = 323673}), \n    UnholyNova                             = Action.Create({ Type = \"Spell\", ID = 324724}), \n    -- Conduit Effects\n    DissonantEchoesBuff                    = Action.Create({ Type = \"Spell\", ID = 343144}), \n    -- Utilities \n    PowerWordFortitude                     = Action.Create({ Type = \"Spell\", ID = 21562 }),    -- Shield\n    DispelMagic                            = Action.Create({ Type = \"Spell\", ID = 528,   }),    \n    -- Defensives\n    PowerWordShield                        = Action.Create({ Type = \"Spell\", ID = 17    }), \n    VampiricEmbrace                        = Action.Create({ Type = \"Spell\", ID = 15286 }),\n    Dispersion                             = Action.Create({ Type = \"Spell\", ID = 47585 }),    \n    -- Oils\n    EmbalmersOil                           = Action.Create({ Type = \"Spell\", ID = 171286, QueueForbidden = true }), \n    ShadowcoreOil                          = Action.Create({ Type = \"Spell\", ID = 171285, QueueForbidden = true }),  \n    -- Potions\n    -- stats\n    PotionofSpectralAgility                = Action.Create({ Type = \"Potion\", ID = 171270, QueueForbidden = true }), \n    PotionofSpectralIntellect              = Action.Create({ Type = \"Potion\", ID = 171273, QueueForbidden = true }), \n    PotionofSpectralStrength               = Action.Create({ Type = \"Potion\", ID = 171275, QueueForbidden = true }), \n    PotionofSpectralStamina                = Action.Create({ Type = \"Potion\", ID = 171274, QueueForbidden = true }), \n    -- heal\n    SpiritualHealingPotion                 = Action.Create({ Type = \"Potion\", ID = 171267, QueueForbidden = true }), \n    SpiritualManaPotion                    = Action.Create({ Type = \"Potion\", ID = 171268, QueueForbidden = true }), \n    SpiritualRejuvenationPotion            = Action.Create({ Type = \"Potion\", ID = 171269, QueueForbidden = true }), \n    PotionofSpiritualClarity               = Action.Create({ Type = \"Potion\", ID = 171272, QueueForbidden = true }), \n    -- combat effects potions\n    PotionofDeathlyFixation                = Action.Create({ Type = \"Potion\", ID = 171351, QueueForbidden = true }), \n    PotionofEmpoweredExorcisms             = Action.Create({ Type = \"Potion\", ID = 171352, QueueForbidden = true }),\n    PotionofPhantomFire                    = Action.Create({ Type = \"Potion\", ID = 171349, QueueForbidden = true }),\n    PotionofDivineAwakening                = Action.Create({ Type = \"Potion\", ID = 171350, QueueForbidden = true }),\n    PotionofSacrificialAnima               = Action.Create({ Type = \"Potion\", ID = 176811, QueueForbidden = true }),\n    -- utilities potions\n    PotionofHardenedShadows                = Action.Create({ Type = \"Potion\", ID = 171271, QueueForbidden = true }),\n    PotionofShadedSight                    = Action.Create({ Type = \"Potion\", ID = 171264, QueueForbidden = true }),\n    PotionofSoulPurity                     = Action.Create({ Type = \"Potion\", ID = 171263, QueueForbidden = true }),\n    PotionofSpecterSwiftness               = Action.Create({ Type = \"Potion\", ID = 171370, QueueForbidden = true }),\n    PotionoftheHiddenSpirit                = Action.Create({ Type = \"Potion\", ID = 171266, QueueForbidden = true }),\n    PotionofthePsychopompsSpeed            = Action.Create({ Type = \"Potion\", ID = 184090, QueueForbidden = true }),\n    PotionofUnhinderedPassing              = Action.Create({ Type = \"Potion\", ID = 183823, QueueForbidden = true }),\n    -- Nathria Trinkets\n    SanguineVintage                        = Action.Create({ Type = \"Trinket\", ID = 184031 }),\n    ManaboundMirror                        = Action.Create({ Type = \"Trinket\", ID = 184029 }),\n    GluttonousSpike                        = Action.Create({ Type = \"Trinket\", ID = 184023 }),\n    DreadfireVessel                        = Action.Create({ Type = \"Trinket\", ID = 184030 }),\n    MemoryofPastSins                       = Action.Create({ Type = \"Trinket\", ID = 184025 }),\n    ConsumptiveInfusion                    = Action.Create({ Type = \"Trinket\", ID = 184022 }),\n    StoneLegionHeraldry                    = Action.Create({ Type = \"Trinket\", ID = 184027 }),\n    BargastsLeash                          = Action.Create({ Type = \"Trinket\", ID = 184017 }),\n    -- OP Dungeons Trinkets\n    BloodSpatteredScale                    = Action.Create({ Type = \"Trinket\", ID = 179331 }),\n    OverwhelmingPowerCrystal               = Action.Create({ Type = \"Trinket\", ID = 179342 }),\n    SunbloodAmethyst                       = Action.Create({ Type = \"Trinket\", ID = 178826 }),\n    PulsatingStoneheart                    = Action.Create({ Type = \"Trinket\", ID = 178825 }),\n    BladedancersArmorKit                   = Action.Create({ Type = \"Trinket\", ID = 178862 }),  \n    \n    -- Legendaries\n    PainbreakerPsalmChest                  = Action.Create({ Type = \"Spell\", ID = 173241 }),\n    PainbreakerPsalmCloak                  = Action.Create({ Type = \"Spell\", ID = 173242 }),\n    CalltotheVoidGloves                    = Action.Create({ Type = \"Spell\", ID = 173244 }),\n    CalltotheVoidWrists                    = Action.Create({ Type = \"Spell\", ID = 173249 }),\n    -- Misc\n    Channeling                             = Action.Create({ Type = \"Spell\", ID = 209274, Hidden = true }),-- Show an icon during channeling\n    TargetEnemy                            = Action.Create({ Type = \"Spell\", ID = 44603, Hidden = true }),-- Change Target (Tab button)\n    StopCast                               = Action.Create({ Type = \"Spell\", ID = 61721, Hidden = true }),    -- spell_magic_polymorphrabbit\n    DummyTest                              = Action.Create({ Type = \"Spell\", ID = 159999, Hidden = true     }), -- Dummy stop dps icon\n    ConcentratedFlame                       = Action.Create({ Type = \"Spell\", ID = 295373, }),\n};\n\n-- To create essences use next code:\nAction:CreateEssencesFor(ACTION_CONST_PRIEST_SHADOW)  -- where PLAYERSPEC is Constance (example: ACTION_CONST_MONK_BM)\nlocal A = setmetatable(Action[ACTION_CONST_PRIEST_SHADOW], { __index = Action })\n\n\n------------------------------------------\n---------------- VARIABLES ---------------\n------------------------------------------\nlocal VarDotsUp = false;\nlocal VarAllDotsUp = false;\nlocal VarMindSearCutoff = 1;\nlocal VarSearingNightmareCutoff = false;\nlocal PainbreakerEquipped = (A.PainbreakerPsalmChest:IsExists() or A.PainbreakerPsalmCloak:IsExists())\nlocal CalltotheVoidEquipped = (A.CalltotheVoidGloves:IsExists() or A.CalltotheVoidWrists:IsExists())\n\nA.Listener:Add(\"ROTATION_VARS\", \"PLAYER_REGEN_ENABLED\", function()\n        VarDotsUp = false\n        VarAllDotsUp = false\n        VarMindSearCutoff = 1\n        VarSearingNightmareCutoff = false\nend)\n\nlocal function num(val)\n    if val then return 1 else return 0 end\nend\n\nlocal function bool(val)\n    return val ~= 0\nend\n\nlocal player = \"player\"\n\n------------------------------------------\n-------------- COMMON PREAPL -------------\n------------------------------------------\nlocal Temp = {\n    TotalAndPhys                            = {\"TotalImun\", \"DamagePhysImun\"},\n    TotalAndCC                              = {\"TotalImun\", \"CCTotalImun\"},\n    TotalAndPhysKick                        = {\"TotalImun\", \"DamagePhysImun\", \"KickImun\"},\n    TotalAndPhysAndCC                       = {\"TotalImun\", \"DamagePhysImun\", \"CCTotalImun\"},\n    TotalAndPhysAndStun                     = {\"TotalImun\", \"DamagePhysImun\", \"StunImun\"},\n    TotalAndPhysAndCCAndStun                = {\"TotalImun\", \"DamagePhysImun\", \"CCTotalImun\", \"StunImun\"},\n    TotalAndMag                             = {\"TotalImun\", \"DamageMagicImun\"},\n    TotalAndMagKick                         = {\"TotalImun\", \"DamageMagicImun\", \"KickImun\"},\n    DisablePhys                             = {\"TotalImun\", \"DamagePhysImun\", \"Freedom\", \"CCTotalImun\"},\n    DisableMag                              = {\"TotalImun\", \"DamageMagicImun\", \"Freedom\", \"CCTotalImun\"},\n    VampiricTouchDelay                      = 0,\n}\n\nlocal IsIndoors, UnitIsUnit, UnitName = IsIndoors, UnitIsUnit, UnitName\n\nlocal function IsSchoolFree()\n    return LoC:IsMissed(\"SILENCE\") and LoC:Get(\"SCHOOL_INTERRUPT\", \"SHADOW\") == 0\nend \n\nlocal function InRange(unit)\n    -- @return boolean \n    return A.VampiricTouch:IsInRange(unit)\nend \nInRange = A.MakeFunctionCachedDynamic(InRange)\n\nlocal function GetByRange(count, range, isStrictlySuperior, isStrictlyInferior, isStrictlyEqual, isCheckEqual, isCheckCombat)\n    -- @return boolean \n    local c = 0 \n    \n    if isStrictlySuperior == nil then\n        isStrictlySuperior = false\n    end\n    \n    if isStrictlyInferior == nil then\n        isStrictlyInferior = false\n    end    \n    \n    if isStrictlyEqual == nil then\n        isStrictlyEqual = false\n    end\n    \n    for unit in pairs(ActiveUnitPlates) do \n        if (not isCheckEqual or not UnitIsUnit(\"target\", unit)) and (not isCheckCombat or Unit(unit):CombatTime() > 0) then \n            if InRange(unit) then \n                c = c + 1\n            elseif range then \n                local r = Unit(unit):GetRange()\n                if r > 0 and r <= range then \n                    c = c + 1\n                end \n            end \n            -- Strictly superior than >\n            if isStrictlySuperior and not isStrictlyInferior and not isStrictlyEqual then\n                if c > count then\n                    return true\n                end\n            end\n            \n            -- Strictly inferior <\n            if isStrictlyInferior and not isStrictlySuperior and not isStrictlyEqual then\n                if c < count then\n                    return true\n                end\n            end\n            \n            -- Strictly equal ==\n            if not isStrictlyInferior and not isStrictlySuperior and isStrictlyEqual then\n                if c == count then\n                    return true\n                end\n            end    \n            \n            -- Classic >=\n            if not isStrictlyInferior and not isStrictlySuperior and not isStrictlyEqual then\n                if c >= count then \n                    return true \n                end \n            end\n        end \n        \n    end\n    \nend  \nGetByRange = A.MakeFunctionCachedDynamic(GetByRange)\n\n-- InsanityThreshold\nlocal function InsanityThreshold()\n    return A.LegacyOfTheVoid:IsSpellLearned() and 60 or 90\nend\n\n-- ExecuteRange\nlocal function ExecuteRange()\n    return 20\nend\n\n-- DotsUp\nlocal function DotsUp(unitID, all)\n    if all then\n        return (Unit(unitID):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) > 0 and Unit(unitID):HasDeBuffs(A.VampiricTouchDebuff.ID, true) > 0 and Unit(unitID):HasDeBuffs(A.DevouringPlague.ID, true) > 0)\n    else\n        return (Unit(unitID):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) > 0 and Unit(unitID):HasDeBuffs(A.VampiricTouchDebuff.ID, true) > 0)\n    end\nend\n\n-- Non GCD spell check\nlocal function countInterruptGCD(unit)\n    if not A.Silence:IsReadyByPassCastGCD(unit) or not A.Silence:AbsentImun(unit, Temp.TotalAndMagKick) then\n        return true\n    end\nend\n\n-- Interrupts spells\nlocal function Interrupts(unit)\n    if A.GetToggle(2, \"TasteInterruptList\") and (IsInRaid() or A.InstanceInfo.KeyStone > 1) then\n        useKick, useCC, useRacial, notInterruptable, castRemainsTime, castDoneTime = Action.InterruptIsValid(unit, \"TasteBFAContent\", true, countInterruptGCD(unit))\n    else\n        useKick, useCC, useRacial, notInterruptable, castRemainsTime, castDoneTime = Action.InterruptIsValid(unit, nil, nil, countInterruptGCD(unit))\n    end\n    \n    if castRemainsTime >= A.GetLatency() then\n        -- Silence\n        if useKick and A.Silence:IsReady(unit) and A.Silence:AbsentImun(unit, Temp.TotalAndMagKick, true) then \n            -- Notification                    \n            Action.SendNotification(\"Silence interrupting...\", A.Silence.ID)\n            return A.Silence\n        end \n        \n        -- Fear Disarm\n        if useCC and A.PsychicHorror:IsReady(unit) and A.PsychicHorror:AbsentImun(unit, Temp.TotalAndMagKick, true) and Unit(unit):IsControlAble(\"stun\", 0) then \n            -- Notification                    \n            Action.SendNotification(\"Psychic Horror interrupting...\", A.PsychicHorror.ID)\n            return A.PsychicHorror              \n        end \n        \n        if useRacial and A.QuakingPalm:AutoRacial(unit) then \n            return A.QuakingPalm\n        end \n        \n        if useRacial and A.Haymaker:AutoRacial(unit) then \n            return A.Haymaker\n        end \n        \n        if useRacial and A.WarStomp:AutoRacial(unit) then \n            return A.WarStomp\n        end \n        \n        if useRacial and A.BullRush:AutoRacial(unit) then \n            return A.BullRush\n        end \n    end\nend\n\n-- Defensives\nlocal function SelfDefensives()\n    if Unit(player):CombatTime() == 0 then  \n        return \n    end\n    \n    local VampiricEmbrace = A.GetToggle(2, \"VampiricEmbrace\")\n    if    VampiricEmbrace >= 0 and A.VampiricEmbrace:IsReady(player) and \n    (\n        (     -- Auto \n            VampiricEmbrace >= 100 and \n            (\n                (\n                    not A.IsInPvP and \n                    Unit(player):HealthPercent() < 80 and \n                    Unit(player):TimeToDieX(20) < 8 \n                ) or \n                (\n                    A.IsInPvP and \n                    (\n                        Unit(player):UseDeff() or \n                        (\n                            Unit(player, 5):HasFlags() and \n                            Unit(player):GetRealTimeDMG() > 0 and \n                            Unit(player):IsFocused(nil, true)                                 \n                        )\n                    )\n                )\n            ) and \n            Unit(player):HasBuffs(\"DeffBuffs\") == 0\n        ) or \n        (    -- Custom\n            VampiricEmbrace < 100 and \n            Unit(player):HealthPercent() <= VampiricEmbrace\n        )\n    ) \n    then \n        return A.VampiricEmbrace\n    end \nend \nSelfDefensives = A.MakeFunctionCachedStatic(SelfDefensives)\n\n-- Multidot Handler UI --\nlocal function HandleMultidots()\n    local choice = Action.GetToggle(2, \"AutoDotSelection\")\n    \n    if choice == \"In Raid\" then\n        if IsInRaid() then\n            return true\n        else\n            return false\n        end\n    elseif choice == \"In Dungeon\" then \n        if IsInGroup() then\n            return true\n        else\n            return false\n        end\n    elseif choice == \"In PvP\" then     \n        if A.IsInPvP then \n            return true\n        else\n            return false\n        end        \n    elseif choice == \"Everywhere\" then \n        return true\n    else\n        return false\n    end\n    --print(choice)\nend\n\n-- Insanity Drain \nlocal function InsanityDrain()\n    return (Unit(player):HasBuffs(A.VoidformBuff.ID, true) > 0) and (math.ceil(5 + Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) * 0.68)) or 0\nend\n\n--[[ CritCds\nlocal function CritCds(unit)\n    use_item,name=azsharas_font_of_power\n    if A.AzsharasFontofPower:IsReady(player) then\n    return A.AzsharasFontofPower\nend\n\n-- use_item,effect_name=cyclotronic_blast\nif A.CyclotronicBlast:IsReady(unit) then\n    return A.CyclotronicBlast\nend\n\n-- the_unbound_force\nif A.TheUnboundForce:AutoHeartOfAzerothP(unit, true) and Action.GetToggle(1, \"HeartOfAzeroth\") then\n    return A.TheUnboundForce\nend\nend\nCritCds = A.MakeFunctionCachedStatic(CritCds)]]\n\n\n--- ======= ACTION LISTS =======\n-- [3] Single Rotation\nA[3] = function(icon, isMulti)\n    --------------------\n    --- ROTATION VAR ---\n    --------------------\n    local isMoving = A.Player:IsMoving()\n    local inCombat = Unit(player):CombatTime() > 0\n    local combatTime = Unit(player):CombatTime()\n    local ShouldStop = Action.ShouldStop()\n    local Pull = Action.BossMods:GetPullTimer()\n    local profileStop = false\n    local DBM = Action.GetToggle(1, \"BossMods\")\n    local HeartOfAzeroth = Action.GetToggle(1, \"HeartOfAzeroth\")\n    local Racial = Action.GetToggle(1, \"Racial\")\n    local Potion = Action.GetToggle(1, \"Potion\")\n    local UnbridledFuryAuto = GetToggle(2, \"UnbridledFuryAuto\")\n    local UnbridledFuryTTD = GetToggle(2, \"UnbridledFuryTTD\")\n    local UnbridledFuryWithBloodlust = GetToggle(2, \"UnbridledFuryWithBloodlust\")\n    local UnbridledFuryHP = GetToggle(2, \"UnbridledFuryHP\")\n    local UnbridledFuryWithExecute = GetToggle(2, \"UnbridledFuryWithExecute\")\n    local FocusedAzeriteBeamTTD = GetToggle(2, \"FocusedAzeriteBeamTTD\")\n    local FocusedAzeriteBeamUnits = GetToggle(2, \"FocusedAzeriteBeamUnits\")\n    -- Multidots var\n    local MissingShadowWordPain = MultiUnits:GetByRangeMissedDoTs(MultiDotDistance, 5, A.ShadowWordPain.ID) --MultiDots(40, A.FlameShockDebuff, 15, 4) --MultiUnits:GetByRangeMissedDoTs(40, 10, 188389)  MultiUnits:GetByRangeMissedDoTs(range, stop, dots, ttd)\n    local MissingVampiricTouch = MultiUnits:GetByRangeMissedDoTs(MultiDotDistance, 5, A.VampiricTouch.ID) --MultiDots(40, A.FlameShockDebuff, 15, 4) --MultiUnits:GetByRangeMissedDoTs(40, 10, 188389)  MultiUnits:GetByRangeMissedDoTs(range, stop, dots, ttd)\n    local AppliedShadowWordPain = MultiUnits:GetByRangeAppliedDoTs(MultiDotDistance, 5, A.ShadowWordPain.ID) --MultiDots(40, A.FlameShockDebuff, 15, 4) --MultiUnits:GetByRangeMissedDoTs(40, 10, 188389)  MultiUnits:GetByRangeMissedDoTs(range, stop, dots, ttd)\n    local AppliedVampiricTouch = MultiUnits:GetByRangeAppliedDoTs(MultiDotDistance, 5, A.VampiricTouch.ID) --MultiDots(40, A.FlameShockDebuff, 15, 4) --MultiUnits:GetByRangeMissedDoTs(40, 10, 188389)  MultiUnits:GetByRangeMissedDoTs(range, stop, dots, ttd)\n    local ShadowWordPainToRefresh = MultiUnits:GetByRangeDoTsToRefresh(MultiDotDistance, 5, A.ShadowWordPain.ID, 6, 5)\n    local VampiricTouchToRefresh = MultiUnits:GetByRangeDoTsToRefresh(MultiDotDistance, 5, A.VampiricTouch.ID, 6, 5)\n    -- Trinkets vars\n    local Trinket1IsAllowed, Trinket2IsAllowed = TR:TrinketIsAllowed()\n    local TrinketsAoE = GetToggle(2, \"TrinketsAoE\")\n    local TrinketsMinTTD = GetToggle(2, \"TrinketsMinTTD\")\n    local TrinketsUnitsRange = GetToggle(2, \"TrinketsUnitsRange\")\n    local TrinketsMinUnits = GetToggle(2, \"TrinketsMinUnits\")\n    \n    \n    local InsanityDrain = InsanityDrain()\n    local VoidFormActive = Unit(player):HasBuffs(A.VoidformBuff.ID, true) > 0\n    -- Azerite beam protection channel\n    local CanCast = true\n    local TotalCast, CurrentCastLeft, CurrentCastDone = Unit(player):CastTime()\n    local _, castStartedTime, castEndTime = Unit(player):IsCasting()\n    local secondsLeft, percentLeft, spellID, spellName, notInterruptable, isChannel = Unit(player):IsCastingRemains()\n    -- Ensure all channel and cast are really safe\n    -- Double protection with check on current casts and also timestamp of the cast\n    if (spellID == A.FocusedAzeriteBeam.ID) then \n        if (CurrentCastLeft > 0 or secondsLeft > 0 or isChannel) then\n            if TMW.time < castEndTime then            \n                CanCast = false\n            else\n                CanCast = true\n            end\n        end\n    end\n    -- Showing icon PoolResource to make sure nothing else is read by GG\n    if not CanCast then\n        return A.PoolResource:Show(icon)\n    end\n    \n    ------------------------------------\n    ---------- DUMMY DPS TEST ----------\n    ------------------------------------\n    local DummyTime = GetToggle(2, \"DummyTime\")\n    if DummyTime > 0 then\n        local unit = \"target\"\n        local endtimer = 0\n        \n        if Unit(unit):IsExists() and Unit(unit):IsDummy() then\n            if Unit(player):CombatTime() >= (DummyTime * 60) then\n                StopAttack()\n                endtimer = TMW.time\n                --ClearTarget() -- Protected ? \n                -- Notification                    \n                Action.SendNotification(DummyTime .. \" Minutes Dummy Test Concluded - Profile Stopped\", A.DummyTest.ID)            \n                \n                if endtimer < TMW.time + 5 then\n                    profileStop = true\n                    --return A.DummyTest:Show(icon)\n                end\n            end\n        end\n    end\n    if Temp.VampiricTouchDelay == 0 and A.VampiricTouch:IsSpellInCasting() then\n        Temp.VampiricTouchDelay = 15\n    end\n    \n    if Temp.VampiricTouchDelay > 0 then\n        --    print(Temp.ImmolateDelay)\n        Temp.VampiricTouchDelay = Temp.VampiricTouchDelay - 1\n    end\n    ------------------------------------------------------\n    ---------------- ENEMY UNIT ROTATION -----------------\n    ------------------------------------------------------\n    local function EnemyRotation(unit)\n        \n        -- variable,name=mind_blast_targets,op=set,value=floor((4.5+azerite.whispers_of_the_damned.rank)%(1+0.27*azerite.searing_dialogue.rank))\n        VarMindBlastTargets = math.floor ((4.5 + A.WhispersoftheDamned:GetAzeriteRank()) / (1 + 0.27 * A.SearingDialogue:GetAzeriteRank()))\n        \n        -- variable,name=swp_trait_ranks_check,op=set,value=(1-0.07*azerite.death_throes.rank+0.2*azerite.thought_harvester.rank)*(1-0.09*azerite.thought_harvester.rank*azerite.searing_dialogue.rank)\n        VarSwpTraitRanksCheck = (1 - 0.07 * A.DeathThroes:GetAzeriteRank() + 0.2 * A.ThoughtHarvester:GetAzeriteRank()) * (1 - 0.09 * A.ThoughtHarvester:GetAzeriteRank() * A.SearingDialogue:GetAzeriteRank())\n        \n        -- variable,name=vt_trait_ranks_check,op=set,value=(1-0.04*azerite.thought_harvester.rank-0.05*azerite.spiteful_apparitions.rank)\n        VarVtTraitRanksCheck = (1 - 0.04 * A.ThoughtHarvester:GetAzeriteRank() - 0.05 * A.SpitefulApparitions:GetAzeriteRank())\n        \n        -- variable,name=vt_mis_trait_ranks_check,op=set,value=(1-0.07*azerite.death_throes.rank-0.03*azerite.thought_harvester.rank-0.055*azerite.spiteful_apparitions.rank)*(1-0.027*azerite.thought_harvester.rank*azerite.searing_dialogue.rank)\n        VarVtMisTraitRanksCheck = (1 - 0.07 * A.DeathThroes:GetAzeriteRank() - 0.03 * A.ThoughtHarvester:GetAzeriteRank() - 0.055 * A.SpitefulApparitions:GetAzeriteRank()) * (1 - 0.027 * A.ThoughtHarvester:GetAzeriteRank() * A.SearingDialogue:GetAzeriteRank())\n        \n        -- variable,name=vt_mis_sd_check,op=set,value=1-0.014*azerite.searing_dialogue.rank\n        VarVtMisSdCheck = 1 - 0.014 * A.SearingDialogue:GetAzeriteRank()\n        \n        -- variable,name=dots_up,op=set,value=dot.shadow_word_pain.ticking&dot.vampiric_touch.ticking\n        VarDotsUp = (Unit(unit):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) > 0 and Unit(unit):HasDeBuffs(A.VampiricTouchDebuff.ID, true) > 0)\n        \n        -- CritCds\n        --        local CritCd = CritCds(unit)\n        \n        -- Interrupt Handler          \n        local unit = \"target\"\n        local useKick, useCC, useRacial = Action.InterruptIsValid(unit, \"TargetMouseover\")    \n        local Trinket1IsAllowed, Trinket2IsAllowed = TR.TrinketIsAllowed()\n        \n        -- Interrupt\n        local Interrupt = Interrupts(unit)\n        if Interrupt then \n            return Interrupt:Show(icon)\n        end \n        \n        -- DispelMagic \n        if A.DispelMagic:IsReady(unit, nil, nil, true) and A.DispelMagic:AbsentImun(unit, Temp.TotalAndMagKick) and A.AuraIsValid(unit, \"UseDispel\", \"Dispel\") then \n            return A.DispelMagic:Show(icon)\n        end \n        \n        --actions.main+=/devouring_plague,target_if=(refreshable|insanity>75)&!variable.pi_or_vf_sync_condition&(!talent.searing_nightmare.enabled|(talent.searing_nightmare.enabled&!variable.searing_nightmare_cutoff))\n        if A.DevouringPlague:IsReady(unit) and ((Unit(unit):HasDeBuffs(A.DevouringPlague.ID, true) == 0 or Unit(unit):HasDeBuffs(A.DevouringPlague.ID, true) < 3) or Player:Insanity() > 75) and A.VoidEruption:GetCooldown() > 0 then\n            return A.DevouringPlague:Show(icon)\n        end    \n        \n        --[[ potion\n        if A.PotionofUnbridledFury:IsReady(unit) and Action.GetToggle(1, \"Potion\") and UnbridledFuryAuto\n        and \n        (\n            (UnbridledFuryWithBloodlust and Unit(player):HasHeroism())\n            or\n            (UnbridledFuryWithExecute and Unit(unit):HealthPercent() <= 30)\n        )\n        and Unit(unit):TimeToDie() > UnbridledFuryTTD\n        then\n            -- Notification                    \n            Action.SendNotification(\"Burst: Potion of Unbridled Fury\", A.PotionofUnbridledFury.ID)    \n            return A.PotionofUnbridledFury:Show(icon)\n        end]]\n        \n        --Precombat\n        if combatTime == 0 and not profileStop and Unit(unit):IsExists() and unit ~= \"mouseover\" then\n            -- flask\n            -- food\n            -- augmentation\n            -- snapshot_stats\n            \n            --[[ potion\n            if A.PotionofUnbridledFury:IsReady(unit) and Action.GetToggle(1, \"Potion\") then\n                return A.PotionofUnbridledFury:Show(icon)\n            end]]\n            \n            -- shadowform,if=!buff.shadowform.up\n            if A.Shadowform:IsReady(unit) and Unit(player):HasBuffsDown(A.ShadowformBuff.ID, true) then\n                return A.Shadowform:Show(icon)\n            end\n            \n            --[[ use_item,name=azsharas_font_of_power\n            if A.AzsharasFontofPower:IsReady(player) then\n                return A.AzsharasFontofPower:Show(icon)\n            end]]\n            \n            \n            -- mind_blast,if=spell_targets.mind_sear<2|azerite.thought_harvester.rank=0\n            if A.MindBlast:IsReady(unit) and (GetByRange(2, 40, false, true) or A.ThoughtHarvester:GetAzeriteRank() == 0) then\n                return A.MindBlast:Show(icon)\n            end\n            \n            -- vampiric_touch\n            if A.VampiricTouch:IsReady(unit) and Temp.VampiricTouchDelay == 0 and Unit(unit):HasDeBuffs(A.VampiricTouchDebuff.ID, true) == 0 then\n                return A.VampiricTouch:Show(icon)\n            end\n            \n        end\n        \n        -- Burst Phase\n        if BurstIsON(unit) and unit ~= \"mouseover\" and inCombat and not profileStop and CanCast then\n            \n            --[[memory_of_lucid_dreams,if=(buff.voidform.stack>20&insanity<=50)|buff.voidform.stack>(26+7*buff.bloodlust.up)|(InsanityDrain*((gcd.max*2)+action.mind_blast.cast_time))>insanity\n            if CanCast and A.MemoryofLucidDreams:IsReady(unit) and A.VitalityConduit:IsSpellInRange(target) and \n            (\n                (Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) > 20 and Player:Insanity() <= 50) \n                or \n                Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) > (26 + 7 * num(Unit(player):HasHeroism())) \n                or \n                (InsanityDrain * ((A.GetGCD() * 2) + A.MindBlast:GetSpellCastTime())) > Player:Insanity()\n            )\n            then\n                return A.Darkflight:Show(icon)\n            end\n            -- racials\n            if A.BloodFury:AutoRacial(unit, nil, nil, true) then \n                return A.BloodFury:Show(icon)\n            end \n            \n            if A.Fireblood:AutoRacial(unit, nil, nil, true) then \n                return A.Fireblood:Show(icon)\n            end \n            \n            if A.AncestralCall:AutoRacial(unit, nil, nil, true) then \n                return A.AncestralCall:Show(icon)\n            end \n            \n            if A.Berserking:AutoRacial(unit, nil, nil, true) then \n                return A.Berserking:Show(icon)\n            end \n            \n            -- blood_of_the_enemy\n            if A.BloodoftheEnemy:AutoHeartOfAzerothP(unit, true) and Action.GetToggle(1, \"HeartOfAzeroth\") then\n                return A.Darkflight:Show(icon)\n            end\n            \n            -- guardian_of_azeroth,if=buff.voidform.stack>15\n            if A.GuardianofAzeroth:AutoHeartOfAzerothP(unit, true) and Action.GetToggle(1, \"HeartOfAzeroth\") and (Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) > 15) then\n                return A.Darkflight:Show(icon)\n            end\n            \n            -- focused_azerite_beam,if=spell_targets.mind_sear>=2|raid_event.adds.in>60\n            if A.FocusedAzeriteBeam:AutoHeartOfAzeroth(unit, true) and CanCast and BurstIsON(unit) and UseHeartOfAzeroth \n            and (GetByRange(FocusedAzeriteBeamUnits, 30) or Unit(unit):IsBoss()) and Unit(unit):TimeToDie() >= FocusedAzeriteBeamTTD\n            then\n                -- Notification                    \n                Action.SendNotification(\"Stop moving!! Focused Azerite Beam\", A.FocusedAzeriteBeam.ID)                 \n                return A.Darkflight:Show(icon)\n            end\n            \n            -- purifying_blast,if=spell_targets.mind_sear>=2|raid_event.adds.in>60\n            if A.PurifyingBlast:AutoHeartOfAzerothP(unit, true) and Action.GetToggle(1, \"HeartOfAzeroth\") and (MultiUnits:GetByRange(40) >= 2 or 10000000000 > 60) then\n                return A.Darkflight:Show(icon)\n            end]]\n            \n            -- concentrated_flame,line_cd=6,if=time<=10|(buff.chorus_of_insanity.stack>=15&buff.voidform.up)|full_recharge_time<gcd|target.time_to_die<5\n            \n            \n            -- ripple_in_space\n            if A.RippleinSpace:AutoHeartOfAzerothP(unit, true) and Action.GetToggle(1, \"HeartOfAzeroth\") then\n                return A.Darkflight:Show(icon)\n            end\n            \n            -- reaping_flames\n            if A.ReapingFlames:AutoHeartOfAzerothP(unit, true) then\n                return A.Darkflight:Show(icon)\n            end\n            \n            -- worldvein_resonance\n            if A.WorldveinResonance:AutoHeartOfAzerothP(unit, true) and Action.GetToggle(1, \"HeartOfAzeroth\") then\n                return A.Darkflight:Show(icon)\n            end\n            \n            -- Mindbender/Shadowfiend at 19 or more stacks, or if the target will die in less than 15s.\n            if A.Shadowfiend:IsReady(unit) and Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) > 18 and Unit(unit):IsBoss() then\n                return A.Shadowfiend:Show(icon)\n            end    \n            \n            --[[ call_action_list,name=crit_cds,if=(buff.voidform.up&buff.chorus_of_insanity.stack>20)|azerite.chorus_of_insanity.rank=0\n            if CritCd and \n            (\n                (VoidFormActive and Unit(player):HasBuffsStacks(A.ChorusofInsanity.ID, true) > 20) \n                or \n                A.ChorusofInsanity:GetAzeriteRank() == 0\n            )\n            then\n                return CritCd:Show(icon)\n            end]]\n            \n            -- use_items\n            \n            -- Non SIMC Custom Trinket1\n            if A.Trinket1:IsReady(unit) and Trinket1IsAllowed and    \n            (\n                TrinketsAoE and GetByRange(TrinketsMinUnits, TrinketsUnitsRange) and Player:AreaTTD(TrinketsUnitsRange) > TrinketsMinTTD\n                or\n                not TrinketsAoE and Unit(unit):TimeToDie() >= TrinketsMinTTD                     \n            )\n            then \n                return A.Trinket1:Show(icon)\n            end         \n            \n            -- Non SIMC Custom Trinket2\n            if A.Trinket2:IsReady(unit) and Trinket2IsAllowed and        \n            (\n                TrinketsAoE and GetByRange(TrinketsMinUnits, TrinketsUnitsRange) and Player:AreaTTD(TrinketsUnitsRange) > TrinketsMinTTD\n                or\n                not TrinketsAoE and Unit(unit):TimeToDie() >= TrinketsMinTTD                     \n            )\n            then\n                return A.Trinket2:Show(icon)     \n            end    \n            \n        end\n        \n        -- MULTI TARGET\n        \n        -- run_action_list,name=cleave,if=active_enemies>1\n        if inCombat and GetByRange(1, 40, true) then\n            \n            -- Auto Multidot\n            if Unit(unit):TimeToDie() >= 10  \n            and Action.GetToggle(2, \"AoE\") and Action.GetToggle(2, \"AutoDot\") and HandleMultidots() and  \n            (\n                (\n                    (MissingVampiricTouch > 0 and MissingVampiricTouch < 5) \n                    or \n                    (VampiricTouchToRefresh > 0 and VampiricTouchToRefresh < 5) \n                ) \n                and Unit(unit):HasDeBuffs(A.ShadowWordPain.ID, true) > 5 and Unit(unit):HasDeBuffs(A.VampiricTouch.ID, true) > 5 \n            ) \n            and MultiUnits:GetByRange(MultiDotDistance) > 1 and MultiUnits:GetByRange(MultiDotDistance) <= 5\n            then\n                return A:Show(icon, ACTION_CONST_AUTOTARGET)\n            end    \n            \n            if A.ConcentratedFlame:IsReady(unit) and VarDotsUp and not VoidFormActive then\n                return A.Darkflight:Show(icon)\n            end\n            \n            -- void_eruption\n            if A.VoidEruption:IsReady(unit, nil, nil, A.GetToggle(2, \"ByPassSpells\")) and Player:Insanity() >= InsanityThreshold() and not VoidFormActive and not isMoving then\n                return A.VoidEruption:Show(icon)\n            end        \n            \n            --[[ dark_ascension,if=buff.voidform.down\n            if A.DarkAscension:IsReady(unit) and not VoidFormActive then\n                return A.DarkAscension:Show(icon)\n            end]]\n            \n            --MindBlast bypass MindFlay channel\n            if A.MindBlast:IsReady(unit, nil, nil, A.GetToggle(2, \"ByPassSpells\")) and Unit(\"player\"):HasBuffs(A.DarkThought.ID, true) > 0 then\n                return A.MindBlast:Show(icon)\n            end\n            \n            -- vampiric_touch\n            if A.VampiricTouch:IsReady(unit, nil, nil, A.GetToggle(2, \"ByPassSpells\")) and Temp.VampiricTouchDelay == 0 and (Unit(\"player\"):HasBuffs(A.UnfurlingDarknessBuff.ID, true) > 0 and Unit(\"player\"):HasBuffs(A.UnfurlingDarknessBuff.ID, true) < 3) then\n                return A.VampiricTouch:Show(icon)\n            end\n            \n            -- vampiric_touch,if=!ticking&azerite.thought_harvester.rank>=1\n            if A.VampiricTouch:IsReady(unit) and Temp.VampiricTouchDelay == 0 and (Unit(unit):HasDeBuffs(A.VampiricTouchDebuff.ID, true) == 0 and A.ThoughtHarvester:GetAzeriteRank() >= 1) then\n                return A.VampiricTouch:Show(icon)\n            end\n            \n            -- mind_sear,if=buff.harvested_thoughts.up\n            if A.MindSear:IsReady(unit) and VarDotsUp and not isMoving and A.VoidBolt:GetCooldown() >= A.GetGCD() and Unit(player):HasBuffs(A.HarvestedThoughtsBuff.ID, true) > 0 then\n                return A.MindSear:Show(icon)\n            end\n            \n            -- void_bolt\n            if VoidFormActive and\n            (\n                (A.GetToggle(2, \"SpellsTiming\") and A.VoidBolt:GetCooldown() <= A.GetGCD() + A.GetCurrentGCD() + A.GetPing() + (TMW.UPD_INTV or 0) + ACTION_CONST_CACHE_DEFAULT_TIMER) \n                or\n                (A.VoidBolt:IsReady(unitID, nil, nil, A.GetToggle(2, \"ByPassSpells\")))\n            )\n            then\n                return A.VoidBolt:Show(icon)\n            end        \n            \n            -- shadow_crash,if=(raid_event.adds.in>5&raid_event.adds.duration<2)|raid_event.adds.duration>2\n            if A.ShadowCrash:IsReady(player) and not VoidFormActive and GetByRange(2, 40) then\n                return A.ShadowCrash:Show(icon)\n            end\n            \n            -- shadow_word_death,target_if=target.time_to_die<3|buff.voidform.down\n            if A.ShadowWordDeath:IsReady(unit) then\n                if Unit(unit):TimeToDie() < 3 or not VoidFormActive then\n                    return A.ShadowWordDeath:Show(icon) \n                end\n            end\n            \n            -- surrender_to_madness,if=buff.voidform.stack>10+(10*buff.bloodlust.up)\n            if A.SurrenderToMadness:IsReady(unit) and (Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) > 10 + (10 * num(Unit(player):HasHeroism()))) then\n                return A.SurrenderToMadness:Show(icon)\n            end\n            \n            -- dark_void,if=raid_event.adds.in>10&(dot.shadow_word_pain.refreshable|target.time_to_die>30)\n            if A.DarkVoid:IsReady(unit) and (Unit(unit):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) < 5 or Unit(unit):TimeToDie() > 30) then\n                return A.DarkVoid:Show(icon)\n            end\n            \n            -- mindbender\n            if A.Mindbender:IsReady(unit) then\n                return A.Mindbender:Show(icon)\n            end\n            \n            -- mind_blast,target_if=spell_targets.mind_sear<variable.mind_blast_targets\n            if A.MindBlast:IsReady(unit) then\n                if GetByRange(VarMindBlastTargets, 40, false, true) then\n                    return A.MindBlast:Show(icon) \n                end\n            end\n            \n            -- shadow_word_pain,target_if=refreshable&target.time_to_die>((-1.2+3.3*spell_targets.mind_sear)*variable.swp_trait_ranks_check*(1-0.012*azerite.searing_dialogue.rank*spell_targets.mind_sear)),if=!talent.misery.enabled\n            if A.ShadowWordPain:IsReady(unit) and\n            (\n                Unit(unit):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) < 5\n                and \n                Unit(unit):TimeToDie() > ((num(true) - 1.2 + 3.3 * MultiUnits:GetByRange(40)) * VarSwpTraitRanksCheck * (1 - 0.012 * A.SearingDialogue:GetAzeriteRank() * MultiUnits:GetByRange(40)))\n            )\n            and (not A.Misery:IsSpellLearned()) \n            then                \n                return A.ShadowWordPain:Show(icon) \n            end\n            \n            -- vampiric_touch,target_if=refreshable,if=target.time_to_die>((1+3.3*spell_targets.mind_sear)*variable.vt_trait_ranks_check*(1+0.10*azerite.searing_dialogue.rank*spell_targets.mind_sear))\n            if A.VampiricTouch:IsReady(unit) and Temp.VampiricTouchDelay == 0 then\n                if (Unit(unit):HasDeBuffs(A.VampiricTouchDebuff.ID, true) < 5) and \n                (\n                    Unit(unit):TimeToDie() > ((1 + 3.3 * MultiUnits:GetByRange(40)) * VarVtTraitRanksCheck * (1 + 0.10 * A.SearingDialogue:GetAzeriteRank() * MultiUnits:GetByRange(40)))\n                )\n                then\n                    return A.VampiricTouch:Show(icon) \n                end\n            end\n            \n            -- vampiric_touch,target_if=dot.shadow_word_pain.refreshable,if=(talent.misery.enabled&target.time_to_die>((1.0+2.0*spell_targets.mind_sear)*variable.vt_mis_trait_ranks_check*(variable.vt_mis_sd_check*spell_targets.mind_sear)))\n            if A.VampiricTouch:IsReady(unit) and Temp.VampiricTouchDelay == 0 then\n                if (Unit(unit):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) < 5) and \n                (\n                    (\n                        A.Misery:IsSpellLearned() \n                        and \n                        Unit(unit):TimeToDie() > ((1.0 + 2.0 * MultiUnits:GetByRange(40)) * VarVtMisTraitRanksCheck * (VarVtMisSdCheck * MultiUnits:GetByRange(40)))\n                    )\n                )\n                then\n                    return A.VampiricTouch:Show(icon) \n                end\n            end\n            \n            -- void_torrent,if=buff.voidform.up\n            if A.VoidTorrent:IsReady(unit) and VoidFormActive then\n                return A.VoidTorrent:Show(icon)\n            end\n            \n            -- mind_sear,target_if=spell_targets.mind_sear>1,chain=1,interrupt_immediate=1,interrupt_if=ticks>=2\n            if A.MindSear:IsReady(unit) and not isMoving and MultiUnits:GetActiveEnemies() > 2 and \n            (\n                VarDotsUp \n                or \n                Unit(unit):TimeToDie() < 6\n            )\n            then \n                return A.MindSear:Show(icon)         \n            end             \n            \n            -- mind_flay,chain=1,interrupt_immediate=1,interrupt_if=ticks<=2&(cooldown.void_bolt.up|cooldown.mind_blast.up)\n            if A.MindFlay:IsReady(unit) and not isMoving and MultiUnits:GetActiveEnemies() <= 2 and \n            (\n                VarDotsUp \n                or \n                Unit(unit):TimeToDie() < 6\n            )\n            then \n                return A.MindFlay:Show(icon)         \n            end     \n            \n            -- shadow_word_pain\n            if A.ShadowWordPain:IsReady(unit) and A.Misery:IsSpellLearned() then\n                return A.ShadowWordPain:Show(icon)\n            end\n            \n        end\n        \n        --Single Target\n        \n        -- run_action_list,name=single,if=active_enemies=1\n        if inCombat and GetByRange(1, 40, false, false, true) then\n            \n            if A.ConcentratedFlame:IsReady(unit) and VarDotsUp and not VoidFormActive then\n                return A.Darkflight:Show(icon)\n            end\n            \n            -- void_eruption\n            if A.VoidEruption:IsReady(unit, nil, nil, A.GetToggle(2, \"ByPassSpells\")) and Player:Insanity() >= InsanityThreshold() and not VoidFormActive and not isMoving then\n                return A.VoidEruption:Show(icon)\n            end        \n            \n            --[[ dark_ascension,if=buff.voidform.down\n            if A.DarkAscension:IsReady(unit) and (not VoidFormActive) then\n                return A.DarkAscension:Show(icon)\n            end]]\n            \n            -- void_bolt\n            if VoidFormActive and\n            (\n                (A.GetToggle(2, \"SpellsTiming\") and A.VoidBolt:GetCooldown() <= A.GetGCD() + A.GetCurrentGCD() + A.GetPing() + (TMW.UPD_INTV or 0) + ACTION_CONST_CACHE_DEFAULT_TIMER) \n                or\n                (A.VoidBolt:IsReady(unitID, nil, nil, A.GetToggle(2, \"ByPassSpells\")))\n            )\n            then\n                return A.VoidBolt:Show(icon)\n            end\n            \n            --MindBlast bypass MindFlay channel\n            if A.MindBlast:IsReady(unit, nil, nil, A.GetToggle(2, \"ByPassSpells\")) and Unit(\"player\"):HasBuffs(A.DarkThought.ID, true) > 0 then\n                return A.MindBlast:Show(icon)\n            end\n            \n            -- vampiric_touch\n            if A.VampiricTouch:IsReady(unit, nil, nil, A.GetToggle(2, \"ByPassSpells\")) and Temp.VampiricTouchDelay == 0 and (Unit(\"player\"):HasBuffs(A.UnfurlingDarknessBuff.ID, true) > 0 and Unit(\"player\"):HasBuffs(A.UnfurlingDarknessBuff.ID, true) < 3) then\n                return A.VampiricTouch:Show(icon)\n            end\n            \n            -- call_action_list,name=cds\n            --  if (true) then\n            --      local ShouldReturn = Cds(unit); if ShouldReturn then return ShouldReturn; end\n            --  end\n            \n            -- mind_sear,if=buff.harvested_thoughts.up&cooldown.void_bolt.remains>=1.5&azerite.searing_dialogue.rank>=1\n            if A.MindSear:IsReady(unit) and (Unit(player):HasBuffs(A.HarvestedThoughtsBuff.ID, true) > 0 and A.VoidBolt:GetCooldown() >= 1.5 and A.SearingDialogue:GetAzeriteRank() >= 1) then\n                return A.MindSear:Show(icon)\n            end\n            \n            -- shadow_word_death,if=target.time_to_die<3|cooldown.shadow_word_death.charges=2|(cooldown.shadow_word_death.charges=1&cooldown.shadow_word_death.remains<gcd.max)\n            if A.ShadowWordDeath:IsReady(unit) and \n            (\n                Unit(unit):TimeToDie() < 3 \n                or \n                A.ShadowWordDeath:GetSpellCharges() == 2 \n                or \n                (A.ShadowWordDeath:GetSpellCharges() == 1 and A.ShadowWordDeath:GetCooldown() < A.GetGCD())\n            )\n            then\n                return A.ShadowWordDeath:Show(icon)\n            end\n            \n            -- surrender_to_madness,if=buff.voidform.stack>10+(10*buff.bloodlust.up)\n            if A.SurrenderToMadness:IsReady(unit) and (Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) > 10 + (10 * num(Unit(player):HasHeroism()))) then\n                return A.SurrenderToMadness:Show(icon)\n            end\n            \n            -- dark_void,if=raid_event.adds.in>10\n            if A.DarkVoid:IsReady(unit) and not isMoving and not VoidFormActive and Unit(unit):IsBoss() then\n                return A.DarkVoid:Show(icon)\n            end\n            \n            --[[ power_word_shield\n            if A.PowerWordShield:IsReady(player) and Unit(player):HasDeBuffs(A.WeakenedSoulDebuff.ID) == 0 and Player:PrevGCD(1, A.ShadowWordDeath) then \n                return A.PowerWordShield:Show(icon)\n            end]]\n            \n            -- mindbender,if=talent.mindbender.enabled|(buff.voidform.stack>18|target.time_to_die<15)\n            if A.Mindbender:IsReady(unit) and \n            (\n                A.Mindbender:IsSpellLearned() \n                or \n                (\n                    Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) > 18 \n                    or \n                    Unit(unit):TimeToDie() < 15\n                )\n            )\n            then\n                return A.Mindbender:Show(icon)\n            end\n            \n            -- shadow_word_death,if=!buff.voidform.up|(cooldown.shadow_word_death.charges=2&buff.voidform.stack<15)\n            if A.ShadowWordDeath:IsReady(unit) and \n            (\n                not VoidFormActive \n                or\n                (A.ShadowWordDeath:GetSpellCharges() == 2 and Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) < 15)\n            )\n            then\n                return A.ShadowWordDeath:Show(icon)\n            end\n            \n            -- shadow_crash,if=(raid_event.adds.in>5&raid_event.adds.duration<2)|raid_event.adds.duration>2\n            if A.ShadowCrash:IsReady(player) and VarDotsUp and not VoidFormActive then\n                return A.ShadowCrash:Show(icon)\n            end    \n            \n            -- mind_blast,if=variable.dots_up&((raid_event.movement.in>cast_time+0.5&raid_event.movement.in<4)|!talent.shadow_word_void.enabled|buff.voidform.down|buff.voidform.stack>14&(insanity<70|charges_fractional>1.33)|buff.voidform.stack<=14&(insanity<60|charges_fractional>1.33))\n            if A.MindBlast:IsReady(unit) and \n            (\n                VarDotsUp and \n                (\n                    not A.ShadowWordVoid:IsSpellLearned() \n                    or \n                    not VoidFormActive \n                    or \n                    Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) > 14 and \n                    (\n                        Player:Insanity() < 70 \n                        or \n                        A.MindBlast:GetSpellChargesFrac() > 1.33\n                    ) \n                    or \n                    Unit(player):HasBuffsStacks(A.VoidformBuff.ID, true) <= 14 and \n                    (\n                        Player:Insanity() < 60 \n                        or \n                        A.MindBlast:GetSpellChargesFrac() > 1.33\n                    )\n                )\n            )\n            then\n                return A.MindBlast:Show(icon)\n            end\n            \n            -- void_torrent,if=dot.shadow_word_pain.remains>4&dot.vampiric_touch.remains>4&buff.voidform.up\n            if A.VoidTorrent:IsReady(unit) and \n            (\n                Unit(unit):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) > 4 \n                and\n                Unit(unit):HasDeBuffs(A.VampiricTouchDebuff.ID, true) > 4 \n                and \n                VoidFormActive\n            )\n            then\n                return A.VoidTorrent:Show(icon)\n            end\n            \n            -- shadow_word_pain,if=refreshable&target.time_to_die>4&!talent.misery.enabled&!talent.dark_void.enabled\n            if A.ShadowWordPain:IsReady(unit) and (Unit(unit):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) < 5 and Unit(unit):TimeToDie() > 4 and not A.Misery:IsSpellLearned() and not A.DarkVoid:IsSpellLearned() or (isMoving and (not VoidFormActive or A.VoidBolt:GetCooldown() >= A.GetGCD()))) then\n                return A.ShadowWordPain:Show(icon)\n            end\n            \n            -- vampiric_touch,if=refreshable&target.time_to_die>6|(talent.misery.enabled&dot.shadow_word_pain.refreshable)\n            if A.VampiricTouch:IsReady(unit) and Temp.VampiricTouchDelay == 0 and not Player:IsCasting(A.VampiricTouch) and \n            (\n                Unit(unit):HasDeBuffs(A.VampiricTouchDebuff.ID, true) < 5 and Unit(unit):TimeToDie() > 6 \n                or \n                (A.Misery:IsSpellLearned() and Unit(unit):HasDeBuffs(A.ShadowWordPainDebuff.ID, true) < 5)\n            )\n            then\n                return A.VampiricTouch:Show(icon)\n            end\n            \n            -- mind_flay,chain=1,interrupt_immediate=1,interrupt_if=ticks>=2&(cooldown.void_bolt.up|cooldown.mind_blast.up)\n            -- need proper ticks count here \n            if A.MindFlay:IsReady(unit) then\n                return A.MindFlay:Show(icon)\n            end\n            \n            -- shadow_word_pain\n            if A.ShadowWordPain:IsReady(unit) and isMoving then\n                return A.ShadowWordPain:Show(icon)\n            end\n            \n        end\n        \n    end\n    \n    -- End on EnemyRotation()\n    \n    -- Defensive\n    local SelfDefensive = SelfDefensives()\n    if SelfDefensive then \n        return SelfDefensive:Show(icon)\n    end \n    \n    -- Mouseover\n    if A.IsUnitEnemy(\"mouseover\") then\n        unit = \"mouseover\"\n        if EnemyRotation(unit) then \n            return true \n        end \n    end \n    \n    -- Target  \n    if A.IsUnitEnemy(\"target\") then \n        unit = \"target\"\n        if EnemyRotation(unit) then \n            return true\n        end \n        \n    end\nend\n-- Finished\n\n-- [4] AoE Rotation\nA[4] = function(icon)\n    return A[3](icon, true)\nend\n-- [5] Trinket Rotation\n-- No specialization trinket actions \n-- Passive \nlocal function FreezingTrapUsedByEnemy()\n    if     UnitCooldown:GetCooldown(\"arena\", 3355) > UnitCooldown:GetMaxDuration(\"arena\", 3355) - 2 and\n    UnitCooldown:IsSpellInFly(\"arena\", 3355) and \n    Unit(player):GetDR(\"incapacitate\") >= 50 \n    then \n        local Caster = UnitCooldown:GetUnitID(\"arena\", 3355)\n        if Caster and Unit(Caster):GetRange() <= 40 then \n            return true \n        end \n    end \nend \nlocal function ArenaRotation(icon, unit)\n    if A.IsInPvP and (A.Zone == \"pvp\" or A.Zone == \"arena\") and not Player:IsStealthed() and not Player:IsMounted() then\n        -- Note: \"arena1\" is just identification of meta 6\n        if (unit == \"arena1\" or unit == \"arena2\" or unit == \"arena3\") then  \n            -- Interrupt\n            local Interrupt = Interrupts(unit)\n            if Interrupt then \n                return Interrupt:Show(icon)\n            end    \n        end\n    end \nend \nlocal function PartyRotation(unit)\n    if (unit == \"party1\" and not A.GetToggle(2, \"PartyUnits\")[1]) or (unit == \"party2\" and not A.GetToggle(2, \"PartyUnits\")[2]) then \n        return false \n    end\n    \nend \n\nA[6] = function(icon)\n    return ArenaRotation(icon, \"arena1\")\nend\n\nA[7] = function(icon)\n    --  local Party = PartyRotation(\"party1\") \n    if Party then \n        return Party:Show(icon)\n    end \n    return ArenaRotation(icon, \"arena2\")\nend\n\nA[8] = function(icon)\n    -- local Party = PartyRotation(\"party2\") \n    if Party then \n        return Party:Show(icon)\n    end     \n    return ArenaRotation(icon, \"arena3\")\nend\n\n\n\n",
				}, -- [2]
				{
					["Order"] = 2,
					["Name"] = "Prediction Healing",
					["Code"] = "local _G, math, error                = _G, math, error\nlocal math_ceil                        = math.ceil\nlocal math_max                        = math.max\n\nlocal TMW                             = _G.TMW\n\nlocal A                             = _G.Action\nlocal CONST                         = A.Const\nlocal HealingEngine                    = Action.HealingEngine\nlocal Unit                             = A.Unit \nlocal GetCurrentGCD                    = A.GetCurrentGCD\nlocal GetSpellDescription            = A.GetSpellDescription\nlocal GetToggle                        = A.GetToggle\nlocal GetLatency                    = A.GetLatency\n\nlocal HealingEngineIsManaSave        = HealingEngine.IsManaSave\n\nlocal UnitIsUnit                    = _G.UnitIsUnit\n\nlocal AtonementBuff = 0\n\nfunction A:PredictHeal(unitID, variation, enemies)  \n    -- @usage obj:PredictHeal(unitID[, variation]) \n    -- @return boolean, number \n    -- Returns:\n    -- [1] true if action can be used\n    -- [2] total amount of predicted missed health \n    -- Any healing spell can be applied     \n    if Unit(unitID):IsPenalty() then\n        return true, 0\n    end     \n    \n    local PO = GetToggle(8, \"PredictOptions\")\n    -- PO[1] incHeal\n    -- PO[2] incDMG\n    -- PO[3] threat -- not usable in prediction\n    -- PO[4] HoTs\n    -- PO[5] absorbPossitive\n    -- PO[6] absorbNegative\n    local defaultVariation, isManaSave\n    local variation = variation or 1\n    if A.IamHealer and HealingEngineIsManaSave(unitID) then \n        isManaSave = true \n        defaultVariation = variation\n        variation = math_max(variation - 1 + GetToggle(8, \"ManaManagementPredictVariation\"), 1)        \n    end    \n    \n    local enemies = enemies or 0\n    \n    -- Class things\n    -- Discipline\n    if Unit(\"player\"):HasSpec(256) then \n        AtonementBuff = Unit(unitID):HasBuffs(81749, \"player\", true)\n        AtonementBuff = (AtonementBuff > A.GetGCD() + A.GetCurrentGCD() and AtonementBuff) or 0\n    elseif AtonementBuff ~= 0 then \n        AtonementBuff = 0\n    end \n    \n    -- Spells\n    if self.predictName == \"PenanceHeal\" then\n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total         \n    end \n    \n    if self.predictName == \"PenanceDMG\" then\n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * 0.55 * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total                  \n    end \n    \n    -- Power Word: Shield\n    if self.predictName == \"PowerWordShield\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Power Word: Radiance\n    if self.predictName == \"PowerWordRadiance\" then  \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total                    \n    end \n    \n    if self.predictName == \"ShadowMend\" then  \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total               \n    end \n    \n    if self.predictName == \"DivineStar\" then               \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total        \n    end    \n    \n    if self.predictName == \"Halo\" then  \n        \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        local cast = Unit(\"player\"):CastTime(120517) + A.GetCurrentGCD()\n        local withoutOptions = (desc[1] * variation) + ((AtonementBuff > cast and desc[1] * 0.55 * enemies) or 0) \n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    if self.predictName == \"HolyNova\" then   \n        \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = (desc[2] * variation) + ((AtonementBuff > 0 and desc[1] * 0.55 * enemies) or 0) \n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total           \n    end \n    \n    if self.predictName == \"ShadowCovenant\" then\n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation + desc[2] \n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total  \n        \n    end \n    \n    -- Holy \n    -- Note about Mastery: Regarding overwrite previous effect by any next spell here is no reason to add that \n    -- Holy Word: Sanctify \n    if self.predictName == \"HolyWordSanctify\" then       \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total    \n    end \n    \n    -- Holy Word: Serenity \n    if self.predictName == \"HolyWordSerenity\" then       \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Circle of Healing \n    if self.predictName == \"CircleOfHealing\" then       \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Prayer Of Mending    \n    if self.predictName == \"PrayerofMending\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Prayer Of Mending HoT   \n    if self.predictName == \"PrayerofMendingHoT\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Prayer of Healing\n    if self.predictName == \"PrayerOfHealing\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Binding Heal\n    if self.predictName == \"BindingHeal\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Renew \n    if self.predictName == \"Renew\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[2] * variation + (desc[1] * 15)\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total              \n        \n    end \n    \n    -- Flash Heal\n    if self.predictName == \"FlashHeal\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Heal \n    if self.predictName == \"Heal\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Apotheosis\n    if self.predictName == \"Apotheosis\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local Serenity = A.GetSpellDescription(2050)[1] * variation \n        local Sancify = A.GetSpellDescription(34861)[1] * variation        \n        local withoutOptions = Serenity + Sancify\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n        \n    end \n    \n    -- PvP: Greater Heal \n    if self.predictName == \"GreaterHeal\" then   \n        local desc = self:GetSpellDescription()\n        local castTime = self:GetSpellCastTime()\n        \n        -- Add current GCD to pre-pare \n        if castTime > 0 then \n            castTime = castTime + GetCurrentGCD()\n        end \n        \n        local incHeal, incDMG, HoTs, absorbPossitive, absorbNegative = 0, 0, 0, 0, 0\n        if PO[1] and castTime > 0 then \n            incHeal = Unit(unitID):GetIncomingHeals()\n        end \n        \n        if PO[2] and castTime > 0 then \n            incDMG = Unit(unitID):GetDMG() * castTime\n        end \n        \n        if PO[4] and castTime > 0 then -- 4 here!\n            HoTs = Unit(unitID):GetHEAL() * castTime\n        end \n        \n        if PO[5] then \n            absorbPossitive = Unit(unitID):GetAbsorb()\n            -- Better don't touch it, not tested anyway\n            if absorbPossitive >= Unit(unitID):HealthDeficit() then \n                absorbPossitive = 0\n            end \n        end \n        \n        if PO[6] then \n            absorbNegative = Unit(unitID):GetTotalHealAbsorbs()\n        end \n        \n        local withoutOptions = desc[1] * variation\n        local total = withoutOptions + incHeal - incDMG + HoTs + absorbPossitive - absorbNegative\n        \n        return Unit(unitID):HealthDeficit() >= total, total \n    end \n    \n    -- Debug \n    if not self.predictName then \n        error((self:GetKeyName() or \"Unknown action name\") .. \" doesn't contain predictName\")        \n    end \n    \n    return false, 0\n    \nend\n\n\n",
				}, -- [3]
				["n"] = 3,
			},
			["Groups"] = {
				{
					["GUID"] = "TMW:group:1Rhh0xLqd4g8",
					["Point"] = {
						["y"] = 12,
						["x"] = -29,
						["point"] = "TOPLEFT",
						["relativePoint"] = "TOPLEFT",
					},
					["Scale"] = 0.600000023841858,
					["TimerBar_CompleteColor"] = "ff000000",
					["Name"] = "Shown Main",
					["TimerBar_StartColor"] = "ff000000",
					["Locked"] = true,
					["TimerBar_MiddleColor"] = "ff000000",
					["Icons"] = {
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0KeNg=IDQd", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0KeNh2uwMT", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["GUID"] = "TMW:icon:1T0MjrGnynSL",
							["Icons"] = {
								"TMW:icon:1T0Kg0ZzHksM", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["GUID"] = "TMW:icon:1T0NdouSxYDb",
							["Icons"] = {
								"TMW:icon:1T0Kg0a1tFci", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0a6eYf9", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aBPYen", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aG1oeM", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Icons"] = {
								"TMW:icon:1T0Kg0aKbPUI", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
					["Columns"] = 8,
				}, -- [1]
				{
					["GUID"] = "TMW:group:1T0KXe2TsCkW",
					["Point"] = {
						["y"] = 50,
						["x"] = -29.0000038146973,
						["point"] = "TOPLEFT",
						["relativePoint"] = "TOPLEFT",
					},
					["Scale"] = 0.600000023841858,
					["TimerBar_CompleteColor"] = "ff000000",
					["Name"] = "Hidden APL",
					["TimerBar_StartColor"] = "ff000000",
					["Locked"] = true,
					["TimerBar_MiddleColor"] = "ff000000",
					["Icons"] = {
						{
							["GUID"] = "TMW:icon:1T0KeNg=IDQd",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["GUID"] = "TMW:icon:1T0KeNh2uwMT",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["GUID"] = "TMW:icon:1T0Kg0ZzHksM",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["GUID"] = "TMW:icon:1T0Kg0a1tFci",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["GUID"] = "TMW:icon:1T0Kg0a6eYf9",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["GUID"] = "TMW:icon:1T0Kg0aBPYen",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["GUID"] = "TMW:icon:1T0Kg0aG1oeM",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["GUID"] = "TMW:icon:1T0Kg0aKbPUI",
							["Type"] = "conditionicon",
							["SettingsPerView"] = {
								["icon"] = {
									["Texts"] = {
										[2] = "",
									},
								},
							},
							["FakeHidden"] = true,
							["Conditions"] = {
								{
									["Name"] = "Rotation(thisobj)",
									["Type"] = "LUA",
								}, -- [1]
								["n"] = 1,
							},
							["Enabled"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["ShowTimerText"] = true,
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
					["Columns"] = 8,
				}, -- [2]
				{
					["GUID"] = "TMW:group:1P3cu8AAtSYM",
					["Point"] = {
						["y"] = -3.0517578125e-05,
						["relativeTo"] = "TMW:group:1TMvhh5X05mC",
					},
					["Name"] = "Visible APL",
					["Scale"] = 2.5,
					["Conditions"] = {
						{
							["Name"] = "return not GetToggle(1, \"DisableRotationDisplay\")",
							["Type"] = "LUA",
						}, -- [1]
						["n"] = 1,
					},
					["Icons"] = {
						{
							["Enabled"] = true,
							["Type"] = "meta",
							["Events"] = {
								{
									["OnlyShown"] = true,
									["Type"] = "Lua",
									["Lua"] = "Action.ToggleMainUI()",
									["Event"] = "OnRightClick",
								}, -- [1]
								["n"] = 1,
							},
							["GUID"] = "TMW:icon:1T0MjsTsMtq6",
							["Icons"] = {
								"TMW:icon:1T0MjrGnynSL", -- [1]
							},
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [121]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [122]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [123]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [124]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [125]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [126]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [127]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [128]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [129]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [130]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [131]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [132]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [133]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [134]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [135]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [136]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [137]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [138]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [139]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [140]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [141]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [142]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [143]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [144]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [145]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [146]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [147]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [148]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [149]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [150]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [151]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [152]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [153]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [154]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [155]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [156]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [157]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [158]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [159]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [160]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [161]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [162]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [163]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [164]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [165]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [166]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [167]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [168]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [169]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [170]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [171]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [172]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [173]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [174]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [175]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [176]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [177]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [178]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [179]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [180]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [181]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [182]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [183]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [184]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [185]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [186]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [187]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [188]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [189]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [190]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [191]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [192]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [193]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [194]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [195]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [196]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [197]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [198]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [199]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [200]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [201]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [202]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [203]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [204]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [205]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [206]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [207]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [208]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [209]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [210]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [211]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [212]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [213]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [214]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [215]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [216]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [217]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [218]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [219]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [220]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [221]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [222]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [223]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [224]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [225]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [226]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [227]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [228]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [229]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [230]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [231]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [232]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [233]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [234]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [235]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [236]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [237]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [238]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [239]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [240]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [241]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [242]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [243]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [244]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [245]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [246]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [247]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [248]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [249]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [250]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [251]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [252]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [253]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [254]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [255]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [256]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [257]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [258]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [259]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [260]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [261]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [262]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [263]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [264]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [265]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [266]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [267]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [268]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [269]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [270]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [271]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [272]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [273]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [274]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [275]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [276]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [277]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [278]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [279]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [280]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [281]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [282]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [283]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [284]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [285]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [286]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [287]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [288]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [289]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [290]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [291]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [292]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [293]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [294]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [295]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [296]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [297]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [298]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [299]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [300]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [301]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [302]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [303]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [304]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [305]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [306]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [307]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [308]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [309]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [310]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [311]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [312]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [313]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [314]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [315]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [316]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [317]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [318]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [319]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [320]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [321]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [322]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [323]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [324]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [325]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [326]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [327]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [328]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [329]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [330]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [331]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [332]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [333]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [334]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [335]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [336]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [337]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [338]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [339]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [340]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [341]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [342]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [343]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [344]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [345]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [346]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [347]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [348]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [349]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [350]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [351]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [352]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [353]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [354]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [355]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [356]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [357]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [358]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [359]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [360]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [361]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [362]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [363]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [364]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [365]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [366]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [367]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [368]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [369]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [370]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [371]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [372]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [373]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [374]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [375]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [376]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [377]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [378]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [379]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [380]
					},
					["Columns"] = 1,
				}, -- [3]
				{
					["GUID"] = "TMW:group:1TMvhh5X05mC",
					["Columns"] = 1,
					["Name"] = "Visible APL Layout",
					["Conditions"] = {
						{
							["Name"] = "return not GetToggle(1, \"DisableRotationDisplay\") and not GetToggle(1, \"DisableRotationModes\")",
							["Type"] = "LUA",
						}, -- [1]
						["n"] = 1,
					},
					["Scale"] = 2.5,
					["Level"] = 11,
					["Icons"] = {
						{
							["Enabled"] = true,
							["Type"] = "conditionicon",
							["Events"] = {
								{
									["OnlyShown"] = true,
									["Type"] = "Lua",
									["Lua"] = "if IsShiftKeyDown() then\n    Action.ToggleBurst()\nelseif IsControlKeyDown() then\n    Action.ToggleMode()\nelseif IsAltKeyDown() then\n    Action.ToggleAoE()\nelse\n    Action.PrintHelpToggle()\nend",
									["Event"] = "OnLeftClick",
								}, -- [1]
								{
									["OnlyShown"] = true,
									["Type"] = "Lua",
									["Lua"] = "Action.ToggleMainUI()",
									["Event"] = "OnRightClick",
								}, -- [2]
								["n"] = 2,
							},
							["SettingsPerView"] = {
								["icon"] = {
									["TextLayout"] = "TMW:textlayout:1TMvg5InaYOw",
									["Texts"] = {
										"[ActionBurst]", -- [1]
									},
								},
							},
							["CustomTex"] = "NONE",
							["States"] = {
								{
								}, -- [1]
								{
									["Alpha"] = 1,
								}, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [121]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [122]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [123]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [124]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [125]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [126]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [127]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [128]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [129]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [130]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [131]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [132]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [133]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [134]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [135]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [136]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [137]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [138]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [139]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [140]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [141]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [142]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [143]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [144]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [145]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [146]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [147]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [148]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [149]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [150]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [151]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [152]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [153]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [154]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [155]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [156]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [157]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [158]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [159]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [160]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [161]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [162]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [163]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [164]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [165]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [166]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [167]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [168]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [169]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [170]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [171]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [172]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [173]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [174]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [175]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [176]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [177]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [178]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [179]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [180]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [181]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [182]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [183]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [184]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [185]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [186]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [187]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [188]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [189]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [190]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [191]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [192]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [193]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [194]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [195]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [196]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [197]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [198]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [199]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [200]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [201]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [202]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [203]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [204]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [205]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [206]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [207]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [208]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [209]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [210]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [211]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [212]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [213]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [214]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [215]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [216]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [217]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [218]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [219]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [220]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [221]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [222]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [223]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [224]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [225]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [226]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [227]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [228]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [229]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [230]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [231]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [232]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [233]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [234]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [235]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [236]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [237]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [238]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [239]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [240]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [241]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [242]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [243]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [244]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [245]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [246]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [247]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [248]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [249]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [250]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [251]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [252]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [253]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [254]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [255]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [256]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [257]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [258]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [259]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [260]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [261]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [262]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [263]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [264]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [265]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [266]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [267]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [268]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [269]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [270]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [271]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [272]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [273]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [274]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [275]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [276]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [277]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [278]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [279]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [280]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [281]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [282]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [283]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [284]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [285]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [286]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [287]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [288]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [289]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [290]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [291]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [292]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [293]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [294]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [295]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [296]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [297]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [298]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [299]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [300]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [301]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [302]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [303]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [304]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [305]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [306]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [307]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [308]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [309]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [310]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [311]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [312]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [313]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [314]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [315]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [316]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [317]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [318]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [319]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [320]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [321]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [322]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [323]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [324]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [325]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [326]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [327]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [328]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [329]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [330]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [331]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [332]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [333]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [334]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [335]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [336]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [337]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [338]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [339]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [340]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [341]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [342]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [343]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [344]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [345]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [346]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [347]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [348]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [349]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [350]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [351]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [352]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [353]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [354]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [355]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [356]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [357]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [358]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [359]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [360]
					},
					["Point"] = {
						["y"] = 7.918154239654541,
						["x"] = 204.4966278076172,
						["point"] = "BOTTOMLEFT",
						["relativePoint"] = "BOTTOMLEFT",
					},
				}, -- [4]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [101]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [102]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [103]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [104]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [105]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [106]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [107]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [108]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [109]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [110]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [111]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [112]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [113]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [114]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [115]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [116]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [117]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [118]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [119]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [120]
					},
				}, -- [5]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
					},
				}, -- [6]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
					},
				}, -- [7]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [8]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
					},
				}, -- [9]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [61]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [62]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [63]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [64]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [65]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [66]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [67]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [68]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [69]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [70]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [71]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [72]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [73]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [74]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [75]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [76]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [77]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [78]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [79]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [80]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [81]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [82]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [83]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [84]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [85]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [86]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [87]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [88]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [89]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [90]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [91]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [92]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [93]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [94]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [95]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [96]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [97]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [98]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [99]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [100]
					},
				}, -- [10]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
					},
				}, -- [11]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [12]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [37]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [38]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [39]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [40]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [41]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [42]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [43]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [44]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [45]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [46]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [47]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [48]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [49]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [50]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [51]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [52]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [53]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [54]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [55]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [56]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [57]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [58]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [59]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [60]
					},
				}, -- [13]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
					},
				}, -- [14]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [31]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [32]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [33]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [34]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [35]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [36]
					},
				}, -- [15]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [19]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [20]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [21]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [22]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [23]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [24]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [25]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [26]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [27]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [28]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [29]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [30]
					},
				}, -- [16]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [6]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [7]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [8]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [9]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [10]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [11]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [12]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [13]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [14]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [15]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [16]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [17]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [18]
					},
				}, -- [17]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
					},
				}, -- [18]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
					},
				}, -- [19]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
					},
				}, -- [20]
				{
					["Icons"] = {
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [1]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [2]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [3]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [4]
						{
							["States"] = {
								{
								}, -- [1]
								nil, -- [2]
								{
								}, -- [3]
								{
								}, -- [4]
							},
						}, -- [5]
					},
				}, -- [21]
			},
			["ForceNoBlizzCC"] = true,
			["Version"] = 90201,
			["Locked"] = true,
			["NumGroups"] = 4,
			["TextureName"] = "Flat",
		},
	},
}